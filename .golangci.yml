# This code is licensed under the terms of the MIT license https://opensource.org/license/mit
# Copyright (c) 2021-2025 Marat Reymers

## Golden config for golangci-lint v1.63.4
#
# This is the best config for golangci-lint based on my experience and opinion.
# It is very strict, but not extremely strict.
# Feel free to adapt and change it for your needs.

run:
  # Timeout for analysis, e.g. 30s, 5m.
  # Default: 1m
  timeout: 3m
  allow-parallel-runners: true
  # Allow multiple golangci-lint instances running, but serialize them around a lock.
  # If false, golangci-lint exits with an error if it fails to acquire file lock on start.
  # Default: false
  allow-serial-runners: true

# This file contains only configs which differ from defaults.
# All possible options can be found here https://github.com/golangci/golangci-lint/blob/master/.golangci.reference.yml
linters-settings:
  cyclop:
    # The maximal code complexity to report.
    # Default: 10
    max-complexity: 30
    # The maximal average package complexity.
    # If it's higher than 0.0 (float) the check is enabled
    # Default: 0.0
    package-average: 10.0

  errcheck:
    # Report about not checking of errors in type assertions: `a := b.(MyStruct)`.
    # Such cases aren't reported by default.
    # Default: false
    check-type-assertions: true

  exhaustive:
    # Program elements to check for exhaustiveness.
    # Default: [ switch ]
    check:
      - switch
      - map

  exhaustruct:
    # List of regular expressions to exclude struct packages and their names from checks.
    # Regular expressions must match complete canonical struct package/name/structname.
    # Default: []
    exclude:
      # std libs
      - "^net/http.Client$"
      - "^net/http.Cookie$"
      - "^net/http.Request$"
      - "^net/http.Response$"
      - "^net/http.Server$"
      - "^net/http.Transport$"
      - "^net/url.URL$"
      - "^os/exec.Cmd$"
      - "^reflect.StructField$"
      # public libs
      - "^github.com/Shopify/sarama.Config$"
      - "^github.com/Shopify/sarama.ProducerMessage$"
      - "^github.com/mitchellh/mapstructure.DecoderConfig$"
      - "^github.com/prometheus/client_golang/.+Opts$"
      - "^github.com/spf13/cobra.Command$"
      - "^github.com/spf13/cobra.CompletionOptions$"
      - "^github.com/stretchr/testify/mock.Mock$"
      - "^github.com/testcontainers/testcontainers-go.+Request$"
      - "^github.com/testcontainers/testcontainers-go.FromDockerfile$"
      - "^golang.org/x/tools/go/analysis.Analyzer$"
      - "^google.golang.org/protobuf/.+Options$"
      - "^gopkg.in/yaml.v3.Node$"

  funlen:
    # Checks the number of lines in a function.
    # If lower than 0, disable the check.
    # Default: 60
    lines: 100
    # Checks the number of statements in a function.
    # If lower than 0, disable the check.
    # Default: 40
    statements: 50
    # Ignore comments when counting lines.
    # Default false
    ignore-comments: true

  gochecksumtype:
    # Presence of `default` case in switch statements satisfies exhaustiveness, if all members are not listed.
    # Default: true
    default-signifies-exhaustive: false

  gocognit:
    # Minimal code complexity to report.
    # Default: 30 (but we recommend 10-20)
    min-complexity: 20

  gocritic:
    # Settings passed to gocritic.
    # The settings key is the name of a supported gocritic checker.
    # The list of supported checkers can be find in https://go-critic.github.io/overview.
    settings:
      captLocal:
        # Whether to restrict checker to params only.
        # Default: true
        paramsOnly: false
      underef:
        # Whether to skip (*x).method() calls where x is a pointer receiver.
        # Default: true
        skipRecvDeref: false

  gomodguard:
    blocked:
      # List of blocked modules.
      # Default: []
      modules:
        - github.com/golang/protobuf:
            recommendations:
              - google.golang.org/protobuf
            reason: "see https://developers.google.com/protocol-buffers/docs/reference/go/faq#modules"
        - github.com/satori/go.uuid:
            recommendations:
              - github.com/google/uuid
            reason: "satori's package is not maintained"
        - github.com/gofrs/uuid:
            recommendations:
              - github.com/gofrs/uuid/v5
            reason: "gofrs' package was not go module before v5"

  govet:
    # Enable all analyzers.
    # Default: false
    enable-all: true
    # Disable analyzers by name.
    # Run `go tool vet help` to see all analyzers.
    # Default: []
    disable:
      - fieldalignment # too strict
    # Settings per analyzer.
    settings:
      shadow:
        # Whether to be strict about shadowing; can be noisy.
        # Default: false
        strict: true

  inamedparam:
    # Skips check for interface methods with only a single parameter.
    # Default: false
    skip-single-param: true

  mnd:
    # List of function patterns to exclude from analysis.
    # Values always ignored: `time.Date`,
    # `strconv.FormatInt`, `strconv.FormatUint`, `strconv.FormatFloat`,
    # `strconv.ParseInt`, `strconv.ParseUint`, `strconv.ParseFloat`.
    # Default: []
    ignored-functions:
      - args.Error
      - flag.Arg
      - flag.Duration.*
      - flag.Float.*
      - flag.Int.*
      - flag.Uint.*
      - os.Chmod
      - os.Mkdir.*
      - os.OpenFile
      - os.WriteFile
      - prometheus.ExponentialBuckets.*
      - prometheus.LinearBuckets

  nakedret:
    # Make an issue if func has more lines of code than this setting, and it has naked returns.
    # Default: 30
    max-func-lines: 0

  nolintlint:
    # Exclude following linters from requiring an explanation.
    # Default: []
    allow-no-explanation: [funlen, gocognit, lll]
    # Enable to require an explanation of nonzero length after each nolint directive.
    # Default: false
    require-explanation: true
    # Enable to require nolint directives to mention the specific linter being suppressed.
    # Default: false
    require-specific: true

  perfsprint:
    # Optimizes into strings concatenation.
    # Default: true
    strconcat: false

  reassign:
    # Patterns for global variable names that are checked for reassignment.
    # See https://github.com/curioswitch/go-reassign#usage
    # Default: ["EOF", "Err.*"]
    patterns:
      - ".*"
  revive:
    ignore-generated-header: true
    severity: warning
    confidence: 0.8
    errorCode: 0
    warningCode: 0
    rules:
      - name: blank-imports
      - name: context-as-argument
      - name: context-keys-type
      - name: dot-imports
      - name: error-return
      - name: error-strings
      - name: error-naming
      - name: exported
      - name: increment-decrement
      - name: var-naming
      - name: var-declaration
      - name: package-comments
      - name: range
      - name: receiver-naming
      - name: time-naming
      - name: unexported-return
      - name: indent-error-flow
      - name: errorf
      - name: empty-block
      - name: superfluous-else
      - name: unused-parameter
      - name: unreachable-code
      - name: redefines-builtin-id

  rowserrcheck:
    # database/sql is always checked
    # Default: []
    packages:
      - github.com/jmoiron/sqlx

  sloglint:
    # Enforce not using global loggers.
    # Values:
    # - "": disabled
    # - "all": report all global loggers
    # - "default": report only the default slog logger
    # https://github.com/go-simpler/sloglint?tab=readme-ov-file#no-global
    # Default: ""
    no-global: "all"
    # Enforce using methods that accept a context.
    # Values:
    # - "": disabled
    # - "all": report all contextless calls
    # - "scope": report only if a context exists in the scope of the outermost function
    # https://github.com/go-simpler/sloglint?tab=readme-ov-file#context-only
    # Default: ""
    context: "scope"

  staticcheck:
    # SAxxxx checks in https://staticcheck.dev/docs/configuration/options/#checks
    # Example (to disable some checks): [ "all", "-SA1000", "-SA1001"]
    # Default: ["*"]
    checks:
      # Invalid regular expression.
      # https://staticcheck.dev/docs/checks/#SA1000
      - SA1000
      # Invalid template.
      # https://staticcheck.dev/docs/checks/#SA1001
      - SA1001
      # Invalid format in 'time.Parse'.
      # https://staticcheck.dev/docs/checks/#SA1002
      - SA1002
      # Unsupported argument to functions in 'encoding/binary'.
      # https://staticcheck.dev/docs/checks/#SA1003
      - SA1003
      # Suspiciously small untyped constant in 'time.Sleep'.
      # https://staticcheck.dev/docs/checks/#SA1004
      - SA1004
      # Invalid first argument to 'exec.Command'.
      # https://staticcheck.dev/docs/checks/#SA1005
      - SA1005
      # 'Printf' with dynamic first argument and no further arguments.
      # https://staticcheck.dev/docs/checks/#SA1006
      - SA1006
      # Invalid URL in 'net/url.Parse'.
      # https://staticcheck.dev/docs/checks/#SA1007
      - SA1007
      # Non-canonical key in 'http.Header' map.
      # https://staticcheck.dev/docs/checks/#SA1008
      - SA1008
      # '(*regexp.Regexp).FindAll' called with 'n == 0', which will always return zero results.
      # https://staticcheck.dev/docs/checks/#SA1010
      - SA1010
      # Various methods in the "strings" package expect valid UTF-8, but invalid input is provided.
      # https://staticcheck.dev/docs/checks/#SA1011
      - SA1011
      # A nil 'context.Context' is being passed to a function, consider using 'context.TODO' instead.
      # https://staticcheck.dev/docs/checks/#SA1012
      - SA1012
      # 'io.Seeker.Seek' is being called with the whence constant as the first argument, but it should be the second.
      # https://staticcheck.dev/docs/checks/#SA1013
      - SA1013
      # Non-pointer value passed to 'Unmarshal' or 'Decode'.
      # https://staticcheck.dev/docs/checks/#SA1014
      - SA1014
      # Using 'time.Tick' in a way that will leak. Consider using 'time.NewTicker', and only use 'time.Tick' in tests, commands and endless functions.
      # https://staticcheck.dev/docs/checks/#SA1015
      - SA1015
      # Trapping a signal that cannot be trapped.
      # https://staticcheck.dev/docs/checks/#SA1016
      - SA1016
      # Channels used with 'os/signal.Notify' should be buffered.
      # https://staticcheck.dev/docs/checks/#SA1017
      - SA1017
      # 'strings.Replace' called with 'n == 0', which does nothing.
      # https://staticcheck.dev/docs/checks/#SA1018
      - SA1018
      # Using a deprecated function, variable, constant or field.
      # https://staticcheck.dev/docs/checks/#SA1019
      - SA1019
      # Using an invalid host:port pair with a 'net.Listen'-related function.
      # https://staticcheck.dev/docs/checks/#SA1020
      - SA1020
      # Using 'bytes.Equal' to compare two 'net.IP'.
      # https://staticcheck.dev/docs/checks/#SA1021
      - SA1021
      # Modifying the buffer in an 'io.Writer' implementation.
      # https://staticcheck.dev/docs/checks/#SA1023
      - SA1023
      # A string cutset contains duplicate characters.
      # https://staticcheck.dev/docs/checks/#SA1024
      - SA1024
      # It is not possible to use '(*time.Timer).Reset''s return value correctly.
      # https://staticcheck.dev/docs/checks/#SA1025
      - SA1025
      # Cannot marshal channels or functions.
      # https://staticcheck.dev/docs/checks/#SA1026
      - SA1026
      # Atomic access to 64-bit variable must be 64-bit aligned.
      # https://staticcheck.dev/docs/checks/#SA1027
      - SA1027
      # 'sort.Slice' can only be used on slices.
      # https://staticcheck.dev/docs/checks/#SA1028
      - SA1028
      # Inappropriate key in call to 'context.WithValue'.
      # https://staticcheck.dev/docs/checks/#SA1029
      - SA1029
      # Invalid argument in call to a 'strconv' function.
      # https://staticcheck.dev/docs/checks/#SA1030
      - SA1030
      # Overlapping byte slices passed to an encoder.
      # https://staticcheck.dev/docs/checks/#SA1031
      - SA1031
      # Wrong order of arguments to 'errors.Is'.
      # https://staticcheck.dev/docs/checks/#SA1032
      - SA1032
      # 'sync.WaitGroup.Add' called inside the goroutine, leading to a race condition.
      # https://staticcheck.dev/docs/checks/#SA2000
      - SA2000
      # Empty critical section, did you mean to defer the unlock?.
      # https://staticcheck.dev/docs/checks/#SA2001
      - SA2001
      # Called 'testing.T.FailNow' or 'SkipNow' in a goroutine, which isn't allowed.
      # https://staticcheck.dev/docs/checks/#SA2002
      - SA2002
      # Deferred 'Lock' right after locking, likely meant to defer 'Unlock' instead.
      # https://staticcheck.dev/docs/checks/#SA2003
      - SA2003
      # 'TestMain' doesn't call 'os.Exit', hiding test failures.
      # https://staticcheck.dev/docs/checks/#SA3000
      - SA3000
      # Assigning to 'b.N' in benchmarks distorts the results.
      # https://staticcheck.dev/docs/checks/#SA3001
      - SA3001
      # Binary operator has identical expressions on both sides.
      # https://staticcheck.dev/docs/checks/#SA4000
      - SA4000
      # '&*x' gets simplified to 'x', it does not copy 'x'.
      # https://staticcheck.dev/docs/checks/#SA4001
      - SA4001
      # Comparing unsigned values against negative values is pointless.
      # https://staticcheck.dev/docs/checks/#SA4003
      - SA4003
      # The loop exits unconditionally after one iteration.
      # https://staticcheck.dev/docs/checks/#SA4004
      - SA4004
      # Field assignment that will never be observed. Did you mean to use a pointer receiver?.
      # https://staticcheck.dev/docs/checks/#SA4005
      - SA4005
      # A value assigned to a variable is never read before being overwritten. Forgotten error check or dead code?.
      # https://staticcheck.dev/docs/checks/#SA4006
      - SA4006
      # The variable in the loop condition never changes, are you incrementing the wrong variable?.
      # https://staticcheck.dev/docs/checks/#SA4008
      - SA4008
      # A function argument is overwritten before its first use.
      # https://staticcheck.dev/docs/checks/#SA4009
      - SA4009
      # The result of 'append' will never be observed anywhere.
      # https://staticcheck.dev/docs/checks/#SA4010
      - SA4010
      # Break statement with no effect. Did you mean to break out of an outer loop?.
      # https://staticcheck.dev/docs/checks/#SA4011
      - SA4011
      # Comparing a value against NaN even though no value is equal to NaN.
      # https://staticcheck.dev/docs/checks/#SA4012
      - SA4012
      # Negating a boolean twice ('!!b') is the same as writing 'b'. This is either redundant, or a typo.
      # https://staticcheck.dev/docs/checks/#SA4013
      - SA4013
      # An if/else if chain has repeated conditions and no side-effects; if the condition didn't match the first time, it won't match the second time, either.
      # https://staticcheck.dev/docs/checks/#SA4014
      - SA4014
      # Calling functions like 'math.Ceil' on floats converted from integers doesn't do anything useful.
      # https://staticcheck.dev/docs/checks/#SA4015
      - SA4015
      # Certain bitwise operations, such as 'x ^ 0', do not do anything useful.
      # https://staticcheck.dev/docs/checks/#SA4016
      - SA4016
      # Discarding the return values of a function without side effects, making the call pointless.
      # https://staticcheck.dev/docs/checks/#SA4017
      - SA4017
      # Self-assignment of variables.
      # https://staticcheck.dev/docs/checks/#SA4018
      - SA4018
      # Multiple, identical build constraints in the same file.
      # https://staticcheck.dev/docs/checks/#SA4019
      - SA4019
      # Unreachable case clause in a type switch.
      # https://staticcheck.dev/docs/checks/#SA4020
      - SA4020
      # "x = append(y)" is equivalent to "x = y".
      # https://staticcheck.dev/docs/checks/#SA4021
      - SA4021
      # Comparing the address of a variable against nil.
      # https://staticcheck.dev/docs/checks/#SA4022
      - SA4022
      # Impossible comparison of interface value with untyped nil.
      # https://staticcheck.dev/docs/checks/#SA4023
      - SA4023
      # Checking for impossible return value from a builtin function.
      # https://staticcheck.dev/docs/checks/#SA4024
      - SA4024
      # Integer division of literals that results in zero.
      # https://staticcheck.dev/docs/checks/#SA4025
      - SA4025
      # Go constants cannot express negative zero.
      # https://staticcheck.dev/docs/checks/#SA4026
      - SA4026
      # '(*net/url.URL).Query' returns a copy, modifying it doesn't change the URL.
      # https://staticcheck.dev/docs/checks/#SA4027
      - SA4027
      # 'x % 1' is always zero.
      # https://staticcheck.dev/docs/checks/#SA4028
      - SA4028
      # Ineffective attempt at sorting slice.
      # https://staticcheck.dev/docs/checks/#SA4029
      - SA4029
      # Ineffective attempt at generating random number.
      # https://staticcheck.dev/docs/checks/#SA4030
      - SA4030
      # Checking never-nil value against nil.
      # https://staticcheck.dev/docs/checks/#SA4031
      - SA4031
      # Comparing 'runtime.GOOS' or 'runtime.GOARCH' against impossible value.
      # https://staticcheck.dev/docs/checks/#SA4032
      - SA4032
      # Assignment to nil map.
      # https://staticcheck.dev/docs/checks/#SA5000
      - SA5000
      # Deferring 'Close' before checking for a possible error.
      # https://staticcheck.dev/docs/checks/#SA5001
      - SA5001
      # The empty for loop ("for {}") spins and can block the scheduler.
      # https://staticcheck.dev/docs/checks/#SA5002
      - SA5002
      # Defers in infinite loops will never execute.
      # https://staticcheck.dev/docs/checks/#SA5003
      - SA5003
      # "for { select { ..." with an empty default branch spins.
      # https://staticcheck.dev/docs/checks/#SA5004
      - SA5004
      # The finalizer references the finalized object, preventing garbage collection.
      # https://staticcheck.dev/docs/checks/#SA5005
      - SA5005
      # Infinite recursive call.
      # https://staticcheck.dev/docs/checks/#SA5007
      - SA5007
      # Invalid struct tag.
      # https://staticcheck.dev/docs/checks/#SA5008
      - SA5008
      # Invalid Printf call.
      # https://staticcheck.dev/docs/checks/#SA5009
      - SA5009
      # Impossible type assertion.
      # https://staticcheck.dev/docs/checks/#SA5010
      - SA5010
      # Possible nil pointer dereference.
      # https://staticcheck.dev/docs/checks/#SA5011
      - SA5011
      # Passing odd-sized slice to function expecting even size.
      # https://staticcheck.dev/docs/checks/#SA5012
      - SA5012
      # Using 'regexp.Match' or related in a loop, should use 'regexp.Compile'.
      # https://staticcheck.dev/docs/checks/#SA6000
      - SA6000
      # Missing an optimization opportunity when indexing maps by byte slices.
      # https://staticcheck.dev/docs/checks/#SA6001
      - SA6001
      # Storing non-pointer values in 'sync.Pool' allocates memory.
      # https://staticcheck.dev/docs/checks/#SA6002
      - SA6002
      # Converting a string to a slice of runes before ranging over it.
      # https://staticcheck.dev/docs/checks/#SA6003
      - SA6003
      # Inefficient string comparison with 'strings.ToLower' or 'strings.ToUpper'.
      # https://staticcheck.dev/docs/checks/#SA6005
      - SA6005
      # Using io.WriteString to write '[]byte'.
      # https://staticcheck.dev/docs/checks/#SA6006
      - SA6006
      # Defers in range loops may not run when you expect them to.
      # https://staticcheck.dev/docs/checks/#SA9001
      - SA9001
      # Using a non-octal 'os.FileMode' that looks like it was meant to be in octal.
      # https://staticcheck.dev/docs/checks/#SA9002
      - SA9002
      # Empty body in an if or else branch.
      # https://staticcheck.dev/docs/checks/#SA9003
      - SA9003
      # Only the first constant has an explicit type.
      # https://staticcheck.dev/docs/checks/#SA9004
      - SA9004
      # Trying to marshal a struct with no public fields nor custom marshaling.
      # https://staticcheck.dev/docs/checks/#SA9005
      - SA9005
      # Dubious bit shifting of a fixed size integer value.
      # https://staticcheck.dev/docs/checks/#SA9006
      - SA9006
      # Deleting a directory that shouldn't be deleted.
      # https://staticcheck.dev/docs/checks/#SA9007
      - SA9007
      # 'else' branch of a type assertion is probably not reading the right value.
      # https://staticcheck.dev/docs/checks/#SA9008
      - SA9008
      # Ineffectual Go compiler directive.
      # https://staticcheck.dev/docs/checks/#SA9009
      - SA9009

  tenv:
    # The option `all` will run against whole test files (`_test.go`) regardless of method/function signatures.
    # Otherwise, only methods that take `*testing.T`, `*testing.B`, and `testing.TB` as arguments are checked.
    # Default: false
    all: true

linters:
  disable-all: true
  enable:
    ## enabled by default
    - errcheck # checking for unchecked errors, these unchecked errors can be critical bugs in some cases
    - gosimple # specializes in simplifying a code
    - govet # reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - ineffassign # detects when assignments to existing variables are not used
    - staticcheck # is a go vet on steroids, applying a ton of static analysis checks
    - typecheck # like the front-end of a Go compiler, parses and type-checks Go code
    - unused # checks for unused constants, variables, functions and types
    ## disabled by default
    - asasalint # checks for pass []any as any in variadic func(...any)
    - asciicheck # checks that your code does not contain non-ASCII identifiers
    - bidichk # checks for dangerous unicode character sequences
    - bodyclose # checks whether HTTP response body is closed successfully
    - canonicalheader # checks whether net/http.Header uses canonical header
    - copyloopvar # detects places where loop variables are copied (Go 1.22+)
    - cyclop # checks function and package cyclomatic complexity
    - dupl # tool for code clone detection
    - durationcheck # checks for two durations multiplied together
    - errname # checks that sentinel errors are prefixed with the Err and error types are suffixed with the Error
    - errorlint # finds code that will cause problems with the error wrapping scheme introduced in Go 1.13
    - exhaustive # checks exhaustiveness of enum switch statements
    - exptostd # detects functions from golang.org/x/exp/ that can be replaced by std functions
    - fatcontext # detects nested contexts in loops
    - forbidigo # forbids identifiers
    - funlen # tool for detection of long functions
    - gocheckcompilerdirectives # validates go compiler directive comments (//go:)
    - gochecknoglobals # checks that no global variables exist
    - gochecknoinits # checks that no init functions are present in Go code
    - gochecksumtype # checks exhaustiveness on Go "sum types"
    - gocognit # computes and checks the cognitive complexity of functions
    - goconst # finds repeated strings that could be replaced by a constant
    - gocritic # provides diagnostics that check for bugs, performance and style issues
    - gocyclo # computes and checks the cyclomatic complexity of functions
    - godot # checks if comments end in a period
    - gofmt # [replaced by goimports] checks whether code was gofmt-ed
    - gofumpt # [replaced by goimports, gofumports is not available yet] checks whether code was gofumpt-ed
    - goimports # in addition to fixing imports, goimports also formats your code in the same style as gofmt
    - gomoddirectives # manages the use of 'replace', 'retract', and 'excludes' directives in go.mod
    - gomodguard # allow and block lists linter for direct Go module dependencies. This is different from depguard where there are different block types for example version constraints and module recommendations
    - goprintffuncname # checks that printf-like functions are named with f at the end
    - gosec # inspects source code for security problems
    - iface # checks the incorrect use of interfaces, helping developers avoid interface pollution
    - intrange # finds places where for loops could make use of an integer range
    - lll # reports long lines
    - loggercheck # checks key value pairs for common logger libraries (kitlog,klog,logr,zap)
    - makezero # finds slice declarations with non-zero initial length
    - mirror # reports wrong mirror patterns of bytes/strings usage
    - mnd # detects magic numbers
    - musttag # enforces field tags in (un)marshaled structs
    - nakedret # finds naked returns in functions greater than a specified function length
    - nestif # reports deeply nested if statements
    - nilerr # finds the code that returns nil even if it checks that the error is not nil
    - nilnesserr # reports that it checks for err != nil, but it returns a different nil value error (powered by nilness and nilerr)
    - nilnil # checks that there is no simultaneous return of nil error and an invalid value
    - noctx # finds sending http request without context.Context
    - nolintlint # reports ill-formed or insufficient nolint directives
    - nonamedreturns # reports all named returns
    - nosprintfhostport # checks for misuse of Sprintf to construct a host with port in a URL
    - perfsprint # checks that fmt.Sprintf can be replaced with a faster alternative
    - predeclared # finds code that shadows one of Go's predeclared identifiers
    - promlinter # checks Prometheus metrics naming via promlint
    - protogetter # reports direct reads from proto message fields when getters should be used
    - reassign # checks that package variables are not reassigned
    - recvcheck # checks for receiver type consistency
    - revive # fast, configurable, extensible, flexible, and beautiful linter for Go, drop-in replacement of golint
    - rowserrcheck # checks whether Err of rows is checked successfully
    - sloglint # ensure consistent code style when using log/slog
    - spancheck # checks for mistakes with OpenTelemetry/Census spans
    - sqlclosecheck # checks that sql.Rows and sql.Stmt are closed
    - stylecheck # is a replacement for golint
    - tenv # detects using os.Setenv instead of t.Setenv since Go1.17
    - testableexamples # checks if examples are testable (have an expected output)
    - testifylint # checks usage of github.com/stretchr/testify
    - testpackage # makes you use a separate _test package
    - tparallel # detects inappropriate usage of t.Parallel() method in your Go test codes
    - unconvert # removes unnecessary type conversions
    - unparam # reports unused function parameters
    - usestdlibvars # detects the possibility to use variables/constants from the Go standard library
    - usetesting # reports uses of functions with replacement inside the testing package
    - wastedassign # finds wasted assignment statements
    - whitespace # detects leading and trailing whitespace

    ## you may want to enable
    #- decorder # checks declaration order and count of types, constants, variables and functions
    #- exhaustruct # [highly recommend to enable] checks if all structure fields are initialized
    #- gci # controls golang package import order and makes it always deterministic
    #- ginkgolinter # [if you use ginkgo/gomega] enforces standards of using ginkgo and gomega
    #- godox # detects FIXME, TODO and other comment keywords
    #- goheader # checks is file header matches to pattern
    #- inamedparam # [great idea, but too strict, need to ignore a lot of cases by default] reports interfaces with unnamed method parameters
    #- interfacebloat # checks the number of methods inside an interface
    #- ireturn # accept interfaces, return concrete types
    #- prealloc # [premature optimization, but can be used in some cases] finds slice declarations that could potentially be preallocated
    #- tagalign # checks that struct tags are well aligned
    #- varnamelen # [great idea, but too many false positives] checks that the length of a variable's name matches its scope
    #- wrapcheck # checks that errors returned from external packages are wrapped
    #- zerologlint # detects the wrong usage of zerolog that a user forgets to dispatch zerolog.Event

    ## disabled
    #- containedctx # detects struct contained context.Context field
    #- contextcheck # [too many false positives] checks the function whether use a non-inherited context
    #- depguard # [replaced by gomodguard] checks if package imports are in a list of acceptable packages
    #- dogsled # checks assignments with too many blank identifiers (e.g. x, _, _, _, := f())
    #- dupword # [useless without config] checks for duplicate words in the source code
    #- err113 # [too strict] checks the errors handling expressions
    #- errchkjson # [don't see profit + I'm against of omitting errors like in the first example https://github.com/breml/errchkjson] checks types passed to the json encoding functions. Reports unsupported types and optionally reports occasions, where the check for the returned error can be omitted
    #- exportloopref # [not necessary from Go 1.22] checks for pointers to enclosing loop variables
    #- forcetypeassert # [replaced by errcheck] finds forced type assertions
    #- gosmopolitan # reports certain i18n/l10n anti-patterns in your Go codebase
    #- grouper # analyzes expression groups
    #- importas # enforces consistent import aliases
    #- maintidx # measures the maintainability index of each function
    #- misspell # [useless] finds commonly misspelled English words in comments
    #- nlreturn # [too strict and mostly code is not more readable] checks for a new line before return and branch statements to increase code clarity
    #- paralleltest # [too many false positives] detects missing usage of t.Parallel() method in your Go test
    #- tagliatelle # checks the struct tags
    #- thelper # detects golang test helpers without t.Helper() call and checks the consistency of test helpers
    #- wsl # [too strict and mostly code is not more readable] whitespace linter forces you to use empty lines

issues:
  # Maximum count of issues with the same text.
  # Set to 0 to disable.
  # Default: 3
  max-same-issues: 50

  exclude-rules:
    - source: "(noinspection|TODO)"
      linters: [godot]
    - source: "//noinspection"
      linters: [gocritic]
    - path: "_test\\.go"
      linters:
        - bodyclose
        - dupl
        - errcheck
        - funlen
        - goconst
        - gosec
        - noctx
        - wrapcheck
output:
  show-stats: true
