name: Build and Deploy to AWS ECR

on:
  push:
    branches:
      - main # Trigger the workflow on pushes to the main branch.

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code and submodules
      - name: Checkout code and submodules
        uses: actions/checkout@v3
        with:
          submodules: "true" # Ensure that submodules are checked out.

      # Step 3: Set up Make and install dependencies (if needed)
      - name: Set up Make
        run: |
          sudo apt-get update -y
          sudo apt-get install -y make

      # Step 4: Set up environment variables from GitHub Secrets
      - name: Set up environment variables
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> $GITHUB_ENV
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> $GITHUB_ENV
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
          echo "MICROSOFT_TENANT_ID=${{ secrets.MICROSOFT_TENANT_ID }}" >> $GITHUB_ENV
          echo "MICROSOFT_CLIENT_ID=${{ secrets.MICROSOFT_CLIENT_ID }}" >> $GITHUB_ENV
          echo "MICROSOFT_CLIENT_SECRET=${{ secrets.MICROSOFT_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ACCESS_TOKEN_JWT_SECRET=${{ secrets.ACCESS_TOKEN_JWT_SECRET }}" >> $GITHUB_ENV
          echo "REFRESH_TOKEN_JWT_SECRET=${{ secrets.REFRESH_TOKEN_JWT_SECRET }}" >> $GITHUB_ENV

      - name: Build Docker image for amd64 using Make
        run: |
          make build_image

      # Step 6: Set up AWS OIDC authentication using GitHub Actions
      - name: Authenticate with AWS using OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-west-2
          role-session-name: GitHubActionsOIDC

      # Step 7: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_URL }}

      # Step 8: Tag Docker image and push to ECR
      - name: Tag Docker image and push to ECR
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker tag slotify-api:latest ${{ secrets.AWS_ECR_URL }}:$IMAGE_TAG-amd64
          docker push ${{ secrets.AWS_ECR_URL }}:$IMAGE_TAG-amd64

      # Step 9: SSH into EC2 instance and pull the Docker image
      - name: SSH into EC2 and pull image from ECR
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.AWS_EC2_HOST }} # EC2 instance public IP or hostname
          username: ec2-user
          key: ${{ secrets.AWS_EC2_KEY }} # EC2 SSH private key
          script: |
            aws ecr get-login-password --region eu-west-2 | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_URL }}
            # Pull the Docker image from ECR
            IMAGE_TAG=${{ github.sha }}
            docker pull ${{ secrets.AWS_ECR_URL }}:$IMAGE_TAG-amd64
            echo "
              services:
                api:
                  image: ${{ secrets.AWS_ECR_URL }}:$IMAGE_TAG-amd64
                  container_name: slotify-api-container
                  ports:
                    - '80:8080'
                  environment:
                    DB_HOST: ${{ secrets.DB_HOST }}
                    DB_PORT: ${{ secrets.DB_PORT }}
                    DB_USERNAME: ${{ secrets.DB_USERNAME }}
                    DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
                    DB_NAME: ${{ secrets.DB_NAME }}
                    MICROSOFT_TENANT_ID: ${{ secrets.MICROSOFT_TENANT_ID }}
                    MICROSOFT_CLIENT_ID: ${{ secrets.MICROSOFT_CLIENT_ID }}
                    MICROSOFT_CLIENT_SECRET: ${{ secrets.MICROSOFT_CLIENT_SECRET }}
                    ACCESS_TOKEN_JWT_SECRET: ${{ secrets.ACCESS_TOKEN_JWT_SECRET }}
                    REFRESH_TOKEN_JWT_SECRET: ${{ secrets.REFRESH_TOKEN_JWT_SECRET }}
              " > docker-compose.yml

              # Run the container using Docker Compose
              docker-compose up -d
