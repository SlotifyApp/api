// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AttendeeResponseStatus.
const (
	AttendeeResponseStatusAccepted           AttendeeResponseStatus = "accepted"
	AttendeeResponseStatusDeclined           AttendeeResponseStatus = "declined"
	AttendeeResponseStatusEntativelyAccepted AttendeeResponseStatus = "entativelyAccepted"
	AttendeeResponseStatusNone               AttendeeResponseStatus = "none"
	AttendeeResponseStatusNotResponded       AttendeeResponseStatus = "notResponded"
	AttendeeResponseStatusOrganizer          AttendeeResponseStatus = "organizer"
)

// Defines values for AttendeeType.
const (
	Optional AttendeeType = "optional"
	Required AttendeeType = "required"
	Resource AttendeeType = "resource"
)

// Defines values for EmptySuggestionsReason.
const (
	EmptySuggestionsReasonAttendeesUnavailable          EmptySuggestionsReason = "attendeesUnavailable"
	EmptySuggestionsReasonAttendeesUnavailableOrUnknown EmptySuggestionsReason = "attendeesUnavailableOrUnknown"
	EmptySuggestionsReasonLocationsUnavailable          EmptySuggestionsReason = "locationsUnavailable"
	EmptySuggestionsReasonOrganizerUnavailable          EmptySuggestionsReason = "organizerUnavailable"
	EmptySuggestionsReasonUnknown                       EmptySuggestionsReason = "unknown"
)

// Defines values for FreeBusyStatus.
const (
	FreeBusyStatusBusy             FreeBusyStatus = "busy"
	FreeBusyStatusFree             FreeBusyStatus = "free"
	FreeBusyStatusOof              FreeBusyStatus = "oof"
	FreeBusyStatusTentative        FreeBusyStatus = "tentative"
	FreeBusyStatusUnknown          FreeBusyStatus = "unknown"
	FreeBusyStatusWorkingElsewhere FreeBusyStatus = "workingElsewhere"
)

// Defines values for InviteStatus.
const (
	InviteStatusAccepted InviteStatus = "accepted"
	InviteStatusDeclined InviteStatus = "declined"
	InviteStatusExpired  InviteStatus = "expired"
	InviteStatusPending  InviteStatus = "pending"
)

// Defines values for LocationRoomType.
const (
	BusinessAddress LocationRoomType = "businessAddress"
	ConferenceRoom  LocationRoomType = "conferenceRoom"
	Default         LocationRoomType = "default"
	GeoCoordinates  LocationRoomType = "geoCoordinates"
	HomeAddress     LocationRoomType = "homeAddress"
	Hotel           LocationRoomType = "hotel"
	LocalBusiness   LocationRoomType = "localBusiness"
	PostalAddress   LocationRoomType = "postalAddress"
	Restaurant      LocationRoomType = "restaurant"
	StreetAddress   LocationRoomType = "streetAddress"
)

// Attendee Maps roughly to [MSFT Attendee](https://learn.microsoft.com/en-us/graph/api/resources/attendee?view=graph-rest-1.0#properties)
type Attendee struct {
	// AttendeeType Maps directly to [MSFT Attendee->type](https://learn.microsoft.com/en-us/graph/api/resources/attendee?view=graph-rest-1.0)
	AttendeeType   *AttendeeType           `json:"attendeeType,omitempty"`
	Email          *openapi_types.Email    `json:"email"`
	ResponseStatus *AttendeeResponseStatus `json:"responseStatus"`
}

// AttendeeResponseStatus defines model for Attendee.ResponseStatus.
type AttendeeResponseStatus string

// AttendeeAvailability Maps roughly to [MSFT attendeeAvailability](https://learn.microsoft.com/en-us/graph/api/resources/attendeeavailability?view=graph-rest-1.0)
type AttendeeAvailability struct {
	// Attendee directly maps to [MSFT attendeeBase](https://learn.microsoft.com/en-us/graph/api/resources/attendeebase?view=graph-rest-1.0)
	Attendee AttendeeBase `json:"attendee"`

	// Availability Maps directly to [MSFT freebusyStatus](https://learn.microsoft.com/en-us/graph/api/resources/attendeeavailability?view=graph-rest-1.0)
	Availability FreeBusyStatus `json:"availability"`
}

// AttendeeBase directly maps to [MSFT attendeeBase](https://learn.microsoft.com/en-us/graph/api/resources/attendeebase?view=graph-rest-1.0)
type AttendeeBase struct {
	// AttendeeType Maps directly to [MSFT Attendee->type](https://learn.microsoft.com/en-us/graph/api/resources/attendee?view=graph-rest-1.0)
	AttendeeType AttendeeType `json:"attendeeType"`

	// EmailAddress directly maps to MSFT Email Address, see info here:[MSFT EmailAddress Struct Docs](https://learn.microsoft.com/en-us/graph/api/resources/emailaddress?view=graph-rest-1.0)
	EmailAddress EmailAddress `json:"emailAddress"`
}

// AttendeeType Maps directly to [MSFT Attendee->type](https://learn.microsoft.com/en-us/graph/api/resources/attendee?view=graph-rest-1.0)
type AttendeeType string

// CalendarEvent Maps roughly to [MSFT event](https://learn.microsoft.com/en-us/graph/api/resources/event?view=graph-rest-1.0#properties)
type CalendarEvent struct {
	Attendees   []Attendee `json:"attendees"`
	Body        *string    `json:"body,omitempty"`
	Created     *time.Time `json:"created,omitempty"`
	EndTime     *string    `json:"endTime"`
	Id          *string    `json:"id,omitempty"`
	IsCancelled *bool      `json:"isCancelled,omitempty"`

	// JoinURL Maps roughly to [MSFT OnlineMeetingInfo->joinURL](https://learn.microsoft.com/en-us/graph/api/resources/onlinemeetinginfo?view=graph-rest-1.0#json-representation)
	JoinURL   *string    `json:"joinURL"`
	Locations []Location `json:"locations"`

	// Organizer Maps roughly to [MSFT Recipient->emailAddress](https://learn.microsoft.com/en-us/graph/api/resources/recipient?view=graph-rest-1.0)
	Organizer *openapi_types.Email `json:"organizer,omitempty"`
	StartTime *string              `json:"startTime"`
	Subject   *string              `json:"subject,omitempty"`
	WebLink   *string              `json:"webLink,omitempty"`
}

// EmailAddress directly maps to MSFT Email Address, see info here:[MSFT EmailAddress Struct Docs](https://learn.microsoft.com/en-us/graph/api/resources/emailaddress?view=graph-rest-1.0)
type EmailAddress struct {
	Address openapi_types.Email `json:"address"`
	Name    string              `json:"name"`
}

// EmptySuggestionsReason Maps directly to [MSFT emptySuggestionsReason](https://learn.microsoft.com/en-us/graph/api/resources/meetingtimesuggestionsresult?view=graph-rest-1.0)
type EmptySuggestionsReason string

// FreeBusyStatus Maps directly to [MSFT freebusyStatus](https://learn.microsoft.com/en-us/graph/api/resources/attendeeavailability?view=graph-rest-1.0)
type FreeBusyStatus string

// InviteCreate Invite create request body
type InviteCreate struct {
	CreatedAt      time.Time          `json:"createdAt"`
	ExpiryDate     openapi_types.Date `json:"expiryDate"`
	Message        string             `json:"message"`
	SlotifyGroupID uint32             `json:"slotifyGroupID"`
	ToUserID       uint32             `json:"toUserID"`
}

// InviteStatus Invite status
type InviteStatus string

// InvitesGroup References a Slotify Invite For a Group
type InvitesGroup struct {
	CreatedAt         time.Time           `json:"createdAt"`
	ExpiryDate        openapi_types.Date  `json:"expiryDate"`
	FromUserEmail     openapi_types.Email `json:"fromUserEmail"`
	FromUserFirstName string              `json:"fromUserFirstName"`
	FromUserLastName  string              `json:"fromUserLastName"`
	InviteID          uint32              `json:"inviteID"`
	Message           string              `json:"message"`

	// Status Invite status
	Status          InviteStatus        `json:"status"`
	ToUserEmail     openapi_types.Email `json:"toUserEmail"`
	ToUserFirstName string              `json:"toUserFirstName"`
	ToUserLastName  string              `json:"toUserLastName"`
}

// InvitesMe References a Slotify Invite
type InvitesMe struct {
	CreatedAt  time.Time          `json:"createdAt"`
	ExpiryDate openapi_types.Date `json:"expiryDate"`

	// FromUserEmail from user email
	FromUserEmail openapi_types.Email `json:"fromUserEmail"`

	// FromUserFirstName from user first name
	FromUserFirstName string `json:"fromUserFirstName"`

	// FromUserLastName from user last name
	FromUserLastName string `json:"fromUserLastName"`
	InviteID         uint32 `json:"inviteID"`

	// Message invite message
	Message string `json:"message"`

	// SlotifyGroupName slotify group name
	SlotifyGroupName string `json:"slotifyGroupName"`

	// Status Invite status
	Status InviteStatus `json:"status"`
}

// Location Maps roughly to [MSFT Location](https://learn.microsoft.com/en-us/graph/api/resources/location?view=graph-rest-1.0)
type Location struct {
	Id       *string           `json:"id,omitempty"`
	Name     *string           `json:"name,omitempty"`
	RoomType *LocationRoomType `json:"roomType"`
	Street   *string           `json:"street"`
}

// LocationRoomType defines model for Location.RoomType.
type LocationRoomType string

// LocationConstraint Maps directly to [MSFT locationConstraint](https://learn.microsoft.com/en-us/graph/api/resources/locationconstraint?view=graph-rest-1.0)
type LocationConstraint struct {
	IsRequired      *bool                     `json:"isRequired,omitempty"`
	Locations       *[]LocationConstraintItem `json:"locations,omitempty"`
	SuggestLocation *bool                     `json:"suggestLocation,omitempty"`
}

// LocationConstraintItem Maps roughly to [MSFT locationConstraintItem](https://learn.microsoft.com/en-us/graph/api/resources/locationconstraintitem?view=graph-rest-1.0)
type LocationConstraintItem struct {
	// Address Maps directly to [MSFT physicalAddress](https://learn.microsoft.com/en-us/graph/api/resources/locationconstraintitem?view=graph-rest-1.0)
	Address              PhysicalAddress `json:"address"`
	DisplayName          string          `json:"displayName"`
	LocationEmailAddress *string         `json:"locationEmailAddress,omitempty"`
	ResolveAvailability  bool            `json:"resolveAvailability"`
}

// MSFTGroup defines model for MSFTGroup.
type MSFTGroup struct {
	Id   uint32 `json:"id"`
	Name string `json:"name"`
}

// MSFTUser defines model for MSFTUser.
type MSFTUser struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	LastName  string              `json:"lastName"`
}

// MeetingTimeSlot Maps directly to [MSFT meetingTimeSlot](https://learn.microsoft.com/en-us/graph/api/resources/timeslot?view=graph-rest-1.0)
type MeetingTimeSlot struct {
	End   time.Time `json:"end"`
	Start time.Time `json:"start"`
}

// MeetingTimeSuggestion Maps roughly to [MSFT meetingTimeSuggestion](https://learn.microsoft.com/en-us/graph/api/resources/meetingtimesuggestion?view=graph-rest-1.0)
type MeetingTimeSuggestion struct {
	AttendeeAvailability *[]AttendeeAvailability `json:"attendeeAvailability,omitempty"`
	Confidence           *float64                `json:"confidence,omitempty"`
	Locations            *[]Location             `json:"locations,omitempty"`

	// MeetingTimeSlot Maps directly to [MSFT meetingTimeSlot](https://learn.microsoft.com/en-us/graph/api/resources/timeslot?view=graph-rest-1.0)
	MeetingTimeSlot       *MeetingTimeSlot `json:"meetingTimeSlot,omitempty"`
	Order                 *int32           `json:"order,omitempty"`
	OrganizerAvailability *string          `json:"organizerAvailability,omitempty"`
	SuggestionReason      *string          `json:"suggestionReason,omitempty"`
}

// Notification defines model for Notification.
type Notification struct {
	Created time.Time `json:"created"`
	Id      uint32    `json:"id"`
	Message string    `json:"message"`
}

// PhysicalAddress Maps directly to [MSFT physicalAddress](https://learn.microsoft.com/en-us/graph/api/resources/locationconstraintitem?view=graph-rest-1.0)
type PhysicalAddress struct {
	// City The city.
	City *string `json:"city,omitempty"`

	// CountryOrRegion The country or region. It's a free-format string value, for example, "United States".
	CountryOrRegion *string `json:"countryOrRegion,omitempty"`

	// PostalCode The postal code.
	PostalCode *string `json:"postalCode,omitempty"`

	// State The state.
	State *string `json:"state,omitempty"`

	// Street The street.
	Street *string `json:"street,omitempty"`
}

// ReschedulingCheckBodySchema Request body of the details of the two meetings
type ReschedulingCheckBodySchema struct {
	NewMeeting *struct {
		// Attendees Array of all the attendees
		Attendees *[]AttendeeBase `json:"attendees,omitempty"`

		// MeetingDuration The length of the meeting, denoted in **ISO 8601** format. - Example:
		//   - **1 hour** → `'PT1H'`
		//   - **2 hours, 30 minutes** → `'PT2H30M'`
		// - `'P'` is the duration designator. - `'T'` separates date and time components. - `'H'` (hours) and `'M'` (minutes) specify the time duration. - If omitted, the default duration is **30 minutes** (`'PT30M'`).
		MeetingDuration *string `json:"meetingDuration,omitempty"`

		// Title name of the meeting
		Title *string `json:"title,omitempty"`
	} `json:"newMeeting,omitempty"`
	OldMeeting *struct {
		// Attendees Array of all the attendees
		Attendees           *[]AttendeeBase `json:"attendees,omitempty"`
		IsOrganizerOptional *bool           `json:"isOrganizerOptional,omitempty"`

		// LocationConstraint Maps directly to [MSFT locationConstraint](https://learn.microsoft.com/en-us/graph/api/resources/locationconstraint?view=graph-rest-1.0)
		LocationConstraint *LocationConstraint `json:"locationConstraint,omitempty"`

		// MeetingDuration The length of the meeting, denoted in **ISO 8601** format. - Example:
		//   - **1 hour** → `'PT1H'`
		//   - **2 hours, 30 minutes** → `'PT2H30M'`
		// - `'P'` is the duration designator. - `'T'` separates date and time components. - `'H'` (hours) and `'M'` (minutes) specify the time duration. - If omitted, the default duration is **30 minutes** (`'PT30M'`).
		MeetingDuration *string `json:"meetingDuration,omitempty"`

		// MeetingID The meeting ID of the old meeting if it exists
		MeetingID *int `json:"meetingID,omitempty"`

		// StartTime The start of the meeting denoted in *ISO 8601* format
		StartTime *time.Time `json:"startTime,omitempty"`

		// Title name of the meeting
		Title *string `json:"title,omitempty"`
	} `json:"oldMeeting,omitempty"`
}

// ReschedulingRequestBodySchema Request body of the details of the two meetings
type ReschedulingRequestBodySchema struct {
	NewMeeting *struct {
		// Attendees Array of all the attendees user id
		Attendees *[]int `json:"attendees,omitempty"`

		// EndRangeTime The end of the range of the meeting denoted in *ISO 8601* format
		EndRangeTime *time.Time `json:"endRangeTime,omitempty"`

		// EndTime The end of the meeting denoted in *ISO 8601* format
		EndTime *time.Time `json:"endTime,omitempty"`

		// Location The location of the meeting
		Location *string `json:"location,omitempty"`

		// MeetingDuration The length of the meeting, denoted in **ISO 8601** format. - Example:
		//   - **1 hour** → `'PT1H'`
		//   - **2 hours, 30 minutes** → `'PT2H30M'`
		// - `'P'` is the duration designator. - `'T'` separates date and time components. - `'H'` (hours) and `'M'` (minutes) specify the time duration. - If omitted, the default duration is **30 minutes** (`'PT30M'`).
		MeetingDuration *string `json:"meetingDuration,omitempty"`

		// StartRangeTime The start of the range of the meeting denoted in *ISO 8601* format
		StartRangeTime *time.Time `json:"startRangeTime,omitempty"`

		// StartTime The start of the meeting denoted in *ISO 8601* format
		StartTime *time.Time `json:"startTime,omitempty"`

		// Title name of the meeting
		Title *string `json:"title,omitempty"`
	} `json:"newMeeting,omitempty"`
	OldMeeting *struct {
		// MeetingID The microsoft meeting ID of the old meeting
		MeetingID *string `json:"meetingID,omitempty"`

		// MeetingOwner Meeting owner ID
		MeetingOwner *int `json:"meetingOwner,omitempty"`

		// MeetingStartTime The start of the meeting denoted in *ISO 8601* format
		MeetingStartTime *time.Time `json:"meetingStartTime,omitempty"`
	} `json:"oldMeeting,omitempty"`
}

// SchedulingSlotsBodySchema Roughly maps to [MSFT Find Meeting Schema](https://learn.microsoft.com/en-us/graph/api/user-findmeetingtimes?view=graph-rest-1.0&tabs=http#request-body)
type SchedulingSlotsBodySchema struct {
	Attendees           []AttendeeBase `json:"attendees"`
	IsOrganizerOptional bool           `json:"isOrganizerOptional"`

	// LocationConstraint Maps directly to [MSFT locationConstraint](https://learn.microsoft.com/en-us/graph/api/resources/locationconstraint?view=graph-rest-1.0)
	LocationConstraint LocationConstraint `json:"locationConstraint"`
	MaxCandidates      *int32             `json:"maxCandidates,omitempty"`

	// MeetingDuration The length of the meeting, denoted in **ISO 8601** format. - Example:
	//   - **1 hour** → `'PT1H'`
	//   - **2 hours, 30 minutes** → `'PT2H30M'`
	// - `'P'` is the duration designator. - `'T'` separates date and time components. - `'H'` (hours) and `'M'` (minutes) specify the time duration. - If omitted, the default duration is **30 minutes** (`'PT30M'`).
	MeetingDuration string `json:"meetingDuration"`

	// MeetingName custom field, this is used for the AI model
	MeetingName               string   `json:"meetingName"`
	MinimumAttendeePercentage *float64 `json:"minimumAttendeePercentage,omitempty"`

	// TimeConstraint Maps directly to [MSFT timeConstraint](https://learn.microsoft.com/en-us/graph/api/resources/timeconstraint?view=graph-rest-1.0)
	TimeConstraint TimeConstraint `json:"timeConstraint"`
}

// SchedulingSlotsSuccessResponseBody Maps roughly to [MSFT meetingTimeSuggestionsResult](https://learn.microsoft.com/en-us/graph/api/resources/meetingtimesuggestionsresult?view=graph-rest-1.0)
type SchedulingSlotsSuccessResponseBody struct {
	// EmptySuggestionsReason Maps directly to [MSFT emptySuggestionsReason](https://learn.microsoft.com/en-us/graph/api/resources/meetingtimesuggestionsresult?view=graph-rest-1.0)
	EmptySuggestionsReason *EmptySuggestionsReason  `json:"emptySuggestionsReason,omitempty"`
	MeetingTimeSuggestions *[]MeetingTimeSuggestion `json:"meetingTimeSuggestions,omitempty"`
}

// SlotifyGroup defines model for SlotifyGroup.
type SlotifyGroup struct {
	Id   uint32 `json:"id"`
	Name string `json:"name"`
}

// SlotifyGroupCreate defines model for SlotifyGroupCreate.
type SlotifyGroupCreate struct {
	Name string `json:"name"`
}

// TimeConstraint Maps directly to [MSFT timeConstraint](https://learn.microsoft.com/en-us/graph/api/resources/timeconstraint?view=graph-rest-1.0)
type TimeConstraint struct {
	ActivityDomain *string           `json:"activityDomain,omitempty"`
	TimeSlots      []MeetingTimeSlot `json:"timeSlots"`
}

// User defines model for User.
type User struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	Id        uint32              `json:"id"`
	LastName  string              `json:"lastName"`
}

// UserCreate defines model for UserCreate.
type UserCreate struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	LastName  string              `json:"lastName"`
}

// SchedulingSlotsSuccessResponse Maps roughly to [MSFT meetingTimeSuggestionsResult](https://learn.microsoft.com/en-us/graph/api/resources/meetingtimesuggestionsresult?view=graph-rest-1.0)
type SchedulingSlotsSuccessResponse = SchedulingSlotsSuccessResponseBody

// GetAPIAuthCallbackParams defines parameters for GetAPIAuthCallback.
type GetAPIAuthCallbackParams struct {
	Code  string `form:"code" json:"code"`
	State string `form:"state" json:"state"`
}

// GetAPICalendarMeParams defines parameters for GetAPICalendarMe.
type GetAPICalendarMeParams struct {
	Start time.Time `form:"start" json:"start"`
	End   time.Time `form:"end" json:"end"`
}

// GetAPICalendarUserIDParams defines parameters for GetAPICalendarUserID.
type GetAPICalendarUserIDParams struct {
	Start time.Time `form:"start" json:"start"`
	End   time.Time `form:"end" json:"end"`
}

// GetAPIInvitesMeParams defines parameters for GetAPIInvitesMe.
type GetAPIInvitesMeParams struct {
	// Status Invite status
	Status *InviteStatus `form:"status,omitempty" json:"status,omitempty"`
}

// PatchAPIInvitesInviteIDJSONBody defines parameters for PatchAPIInvitesInviteID.
type PatchAPIInvitesInviteIDJSONBody struct {
	Message string `json:"message"`
}

// GetAPIMSFTGroupsParams defines parameters for GetAPIMSFTGroups.
type GetAPIMSFTGroupsParams struct {
	// Name Microsoft group name
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// GetAPIMSFTUsersSearchParams defines parameters for GetAPIMSFTUsersSearch.
type GetAPIMSFTUsersSearchParams struct {
	// Search Search parameter for Microsoft users, can be first name, surname, or email
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// GetAPISlotifyGroupsSlotifyGroupIDInvitesParams defines parameters for GetAPISlotifyGroupsSlotifyGroupIDInvites.
type GetAPISlotifyGroupsSlotifyGroupIDInvitesParams struct {
	// Status Invite status
	Status *InviteStatus `form:"status,omitempty" json:"status,omitempty"`
}

// GetAPIUsersParams defines parameters for GetAPIUsers.
type GetAPIUsersParams struct {
	// Email Email of user to search for
	Email *openapi_types.Email `form:"email,omitempty" json:"email,omitempty"`

	// Name Name of user to search for
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// PostAPICalendarMeJSONRequestBody defines body for PostAPICalendarMe for application/json ContentType.
type PostAPICalendarMeJSONRequestBody = CalendarEvent

// PostAPIInvitesJSONRequestBody defines body for PostAPIInvites for application/json ContentType.
type PostAPIInvitesJSONRequestBody = InviteCreate

// PatchAPIInvitesInviteIDJSONRequestBody defines body for PatchAPIInvitesInviteID for application/json ContentType.
type PatchAPIInvitesInviteIDJSONRequestBody PatchAPIInvitesInviteIDJSONBody

// PostAPIRescheduleCheckJSONRequestBody defines body for PostAPIRescheduleCheck for application/json ContentType.
type PostAPIRescheduleCheckJSONRequestBody = ReschedulingCheckBodySchema

// PostAPIRescheduleRequestReplaceJSONRequestBody defines body for PostAPIRescheduleRequestReplace for application/json ContentType.
type PostAPIRescheduleRequestReplaceJSONRequestBody = ReschedulingRequestBodySchema

// PostAPISchedulingSlotsJSONRequestBody defines body for PostAPISchedulingSlots for application/json ContentType.
type PostAPISchedulingSlotsJSONRequestBody = SchedulingSlotsBodySchema

// PostAPISlotifyGroupsJSONRequestBody defines body for PostAPISlotifyGroups for application/json ContentType.
type PostAPISlotifyGroupsJSONRequestBody = SlotifyGroupCreate

// PostAPIUsersJSONRequestBody defines body for PostAPIUsers for application/json ContentType.
type PostAPIUsersJSONRequestBody = UserCreate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Auth route for authorisation code flow.
	// (GET /api/auth/callback)
	GetAPIAuthCallback(w http.ResponseWriter, r *http.Request, params GetAPIAuthCallbackParams)
	// Get a user's calendar events for a given time range.
	// (GET /api/calendar/me)
	GetAPICalendarMe(w http.ResponseWriter, r *http.Request, params GetAPICalendarMeParams)
	// Create a new calendar event.
	// (POST /api/calendar/me)
	PostAPICalendarMe(w http.ResponseWriter, r *http.Request)
	// Get a specific user's calendar events for a given time range.
	// (GET /api/calendar/{userID})
	GetAPICalendarUserID(w http.ResponseWriter, r *http.Request, userID uint32, params GetAPICalendarUserIDParams)
	// Subscribe to notifications eventstream.
	// (GET /api/events)
	RenderEvent(w http.ResponseWriter, r *http.Request)
	// Healthcheck route.
	// (GET /api/healthcheck)
	GetAPIHealthcheck(w http.ResponseWriter, r *http.Request)
	// Create a new invite
	// (POST /api/invites)
	PostAPIInvites(w http.ResponseWriter, r *http.Request)
	// Get all invites for logged in user.
	// (GET /api/invites/me)
	GetAPIInvitesMe(w http.ResponseWriter, r *http.Request, params GetAPIInvitesMeParams)
	// Delete an invite
	// (DELETE /api/invites/{inviteID})
	DeleteAPIInvitesInviteID(w http.ResponseWriter, r *http.Request, inviteID uint32)
	// Update an invite with a new message
	// (PATCH /api/invites/{inviteID})
	PatchAPIInvitesInviteID(w http.ResponseWriter, r *http.Request, inviteID uint32)
	// Accept a new group invite and add member to slotify group.
	// (PATCH /api/invites/{inviteID}/accept)
	PatchAPIInvitesInviteIDAccept(w http.ResponseWriter, r *http.Request, inviteID uint32)
	// Decline an invite
	// (PATCH /api/invites/{inviteID}/decline)
	PatchAPIInvitesInviteIDDecline(w http.ResponseWriter, r *http.Request, inviteID uint32)
	// Get a Microsoft group by query params.
	// (GET /api/msft-groups)
	GetAPIMSFTGroups(w http.ResponseWriter, r *http.Request, params GetAPIMSFTGroupsParams)
	// Get all Microsoft groups for current user.
	// (GET /api/msft-groups/me)
	GetAPIMSFTGroupsMe(w http.ResponseWriter, r *http.Request)
	// Get a Microsoft group by id.
	// (GET /api/msft-groups/{groupID})
	GetAPIMSFTGroupsGroupID(w http.ResponseWriter, r *http.Request, groupID uint32)
	// Get all members of a Microsoft group.
	// (GET /api/msft-groups/{groupID}/users)
	GetAPIMSFTGroupsGroupIDUsers(w http.ResponseWriter, r *http.Request, groupID uint32)
	// Get all users from Microsoft
	// (GET /api/msft-users)
	GetAPIMSFTUsers(w http.ResponseWriter, r *http.Request)
	// Get users from Microsoft based on name and email
	// (GET /api/msft-users/search)
	GetAPIMSFTUsersSearch(w http.ResponseWriter, r *http.Request, params GetAPIMSFTUsersSearchParams)
	// Mark a notification as being read.
	// (PATCH /api/notifications/{notificationID}/read)
	PatchAPINotificationsNotificationIDRead(w http.ResponseWriter, r *http.Request, notificationID uint32)
	// Refresh Slotify access token and refresh token.
	// (POST /api/refresh)
	PostAPIRefresh(w http.ResponseWriter, r *http.Request)
	// Check if the old meeting can be rescheduled
	// (POST /api/reschedule/check)
	PostAPIRescheduleCheck(w http.ResponseWriter, r *http.Request)
	// Request to reschedule the old meeting
	// (POST /api/reschedule/request/replace)
	PostAPIRescheduleRequestReplace(w http.ResponseWriter, r *http.Request)
	// Idempotent route, just returns appropriate time slots along with their respective ratings.
	// (POST /api/scheduling/slots)
	PostAPISchedulingSlots(w http.ResponseWriter, r *http.Request)
	// Create a new slotifyGroup.
	// (POST /api/slotify-groups)
	PostAPISlotifyGroups(w http.ResponseWriter, r *http.Request)
	// Get all slotify-groups for current user.
	// (GET /api/slotify-groups/me)
	GetAPISlotifyGroupsMe(w http.ResponseWriter, r *http.Request)
	// Delete a slotifyGroup by id.
	// (DELETE /api/slotify-groups/{slotifyGroupID})
	DeleteAPISlotifyGroupsSlotifyGroupID(w http.ResponseWriter, r *http.Request, slotifyGroupID uint32)
	// Get a slotifyGroup by id.
	// (GET /api/slotify-groups/{slotifyGroupID})
	GetAPISlotifyGroupsSlotifyGroupID(w http.ResponseWriter, r *http.Request, slotifyGroupID uint32)
	// Get all invites for a slotify group
	// (GET /api/slotify-groups/{slotifyGroupID}/invites)
	GetAPISlotifyGroupsSlotifyGroupIDInvites(w http.ResponseWriter, r *http.Request, slotifyGroupID uint32, params GetAPISlotifyGroupsSlotifyGroupIDInvitesParams)
	// Have a member leave from a slotify group
	// (DELETE /api/slotify-groups/{slotifyGroupID}/leave/me)
	DeleteSlotifyGroupsSlotifyGroupIDLeaveMe(w http.ResponseWriter, r *http.Request, slotifyGroupID uint32)
	// Get all members of a slotifyGroup.
	// (GET /api/slotify-groups/{slotifyGroupID}/users)
	GetAPISlotifyGroupsSlotifyGroupIDUsers(w http.ResponseWriter, r *http.Request, slotifyGroupID uint32)
	// Search for users with by email and name. Only provide one of the query params or none.
	// (GET /api/users)
	GetAPIUsers(w http.ResponseWriter, r *http.Request, params GetAPIUsersParams)
	// Create a new user.
	// (POST /api/users)
	PostAPIUsers(w http.ResponseWriter, r *http.Request)
	// Get current user's details.
	// (GET /api/users/me)
	GetAPIUsersMe(w http.ResponseWriter, r *http.Request)
	// Logout user.
	// (POST /api/users/me/logout)
	PostAPIUsersMeLogout(w http.ResponseWriter, r *http.Request)
	// Get user's unread notifications.
	// (GET /api/users/me/notifications)
	GetAPIUsersMeNotifications(w http.ResponseWriter, r *http.Request)
	// Delete a user by id.
	// (DELETE /api/users/{userID})
	DeleteAPIUsersUserID(w http.ResponseWriter, r *http.Request, userID uint32)
	// Get a user by id.
	// (GET /api/users/{userID})
	GetAPIUsersUserID(w http.ResponseWriter, r *http.Request, userID uint32)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAPIAuthCallback operation middleware
func (siw *ServerInterfaceWrapper) GetAPIAuthCallback(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIAuthCallbackParams

	// ------------- Required query parameter "code" -------------

	if paramValue := r.URL.Query().Get("code"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "code"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "code", r.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Required query parameter "state" -------------

	if paramValue := r.URL.Query().Get("state"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "state"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "state", r.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIAuthCallback(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPICalendarMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPICalendarMe(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPICalendarMeParams

	// ------------- Required query parameter "start" -------------

	if paramValue := r.URL.Query().Get("start"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "start"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "start", r.URL.Query(), &params.Start)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start", Err: err})
		return
	}

	// ------------- Required query parameter "end" -------------

	if paramValue := r.URL.Query().Get("end"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "end"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "end", r.URL.Query(), &params.End)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "end", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPICalendarMe(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPICalendarMe operation middleware
func (siw *ServerInterfaceWrapper) PostAPICalendarMe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPICalendarMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPICalendarUserID operation middleware
func (siw *ServerInterfaceWrapper) GetAPICalendarUserID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userID" -------------
	var userID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "userID", mux.Vars(r)["userID"], &userID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userID", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPICalendarUserIDParams

	// ------------- Required query parameter "start" -------------

	if paramValue := r.URL.Query().Get("start"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "start"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "start", r.URL.Query(), &params.Start)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start", Err: err})
		return
	}

	// ------------- Required query parameter "end" -------------

	if paramValue := r.URL.Query().Get("end"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "end"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "end", r.URL.Query(), &params.End)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "end", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPICalendarUserID(w, r, userID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RenderEvent operation middleware
func (siw *ServerInterfaceWrapper) RenderEvent(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RenderEvent(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIHealthcheck operation middleware
func (siw *ServerInterfaceWrapper) GetAPIHealthcheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIHealthcheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIInvites operation middleware
func (siw *ServerInterfaceWrapper) PostAPIInvites(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIInvites(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIInvitesMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPIInvitesMe(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIInvitesMeParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIInvitesMe(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAPIInvitesInviteID operation middleware
func (siw *ServerInterfaceWrapper) DeleteAPIInvitesInviteID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "inviteID" -------------
	var inviteID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "inviteID", mux.Vars(r)["inviteID"], &inviteID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inviteID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAPIInvitesInviteID(w, r, inviteID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchAPIInvitesInviteID operation middleware
func (siw *ServerInterfaceWrapper) PatchAPIInvitesInviteID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "inviteID" -------------
	var inviteID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "inviteID", mux.Vars(r)["inviteID"], &inviteID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inviteID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAPIInvitesInviteID(w, r, inviteID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchAPIInvitesInviteIDAccept operation middleware
func (siw *ServerInterfaceWrapper) PatchAPIInvitesInviteIDAccept(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "inviteID" -------------
	var inviteID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "inviteID", mux.Vars(r)["inviteID"], &inviteID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inviteID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAPIInvitesInviteIDAccept(w, r, inviteID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchAPIInvitesInviteIDDecline operation middleware
func (siw *ServerInterfaceWrapper) PatchAPIInvitesInviteIDDecline(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "inviteID" -------------
	var inviteID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "inviteID", mux.Vars(r)["inviteID"], &inviteID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inviteID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAPIInvitesInviteIDDecline(w, r, inviteID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIMSFTGroups operation middleware
func (siw *ServerInterfaceWrapper) GetAPIMSFTGroups(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIMSFTGroupsParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIMSFTGroups(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIMSFTGroupsMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPIMSFTGroupsMe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIMSFTGroupsMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIMSFTGroupsGroupID operation middleware
func (siw *ServerInterfaceWrapper) GetAPIMSFTGroupsGroupID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "groupID" -------------
	var groupID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "groupID", mux.Vars(r)["groupID"], &groupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIMSFTGroupsGroupID(w, r, groupID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIMSFTGroupsGroupIDUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAPIMSFTGroupsGroupIDUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "groupID" -------------
	var groupID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "groupID", mux.Vars(r)["groupID"], &groupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIMSFTGroupsGroupIDUsers(w, r, groupID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIMSFTUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAPIMSFTUsers(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIMSFTUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIMSFTUsersSearch operation middleware
func (siw *ServerInterfaceWrapper) GetAPIMSFTUsersSearch(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIMSFTUsersSearchParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIMSFTUsersSearch(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchAPINotificationsNotificationIDRead operation middleware
func (siw *ServerInterfaceWrapper) PatchAPINotificationsNotificationIDRead(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "notificationID" -------------
	var notificationID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "notificationID", mux.Vars(r)["notificationID"], &notificationID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "notificationID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAPINotificationsNotificationIDRead(w, r, notificationID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIRefresh operation middleware
func (siw *ServerInterfaceWrapper) PostAPIRefresh(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIRefresh(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIRescheduleCheck operation middleware
func (siw *ServerInterfaceWrapper) PostAPIRescheduleCheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIRescheduleCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIRescheduleRequestReplace operation middleware
func (siw *ServerInterfaceWrapper) PostAPIRescheduleRequestReplace(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIRescheduleRequestReplace(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPISchedulingSlots operation middleware
func (siw *ServerInterfaceWrapper) PostAPISchedulingSlots(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPISchedulingSlots(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPISlotifyGroups operation middleware
func (siw *ServerInterfaceWrapper) PostAPISlotifyGroups(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPISlotifyGroups(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPISlotifyGroupsMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPISlotifyGroupsMe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPISlotifyGroupsMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAPISlotifyGroupsSlotifyGroupID operation middleware
func (siw *ServerInterfaceWrapper) DeleteAPISlotifyGroupsSlotifyGroupID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "slotifyGroupID" -------------
	var slotifyGroupID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "slotifyGroupID", mux.Vars(r)["slotifyGroupID"], &slotifyGroupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slotifyGroupID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAPISlotifyGroupsSlotifyGroupID(w, r, slotifyGroupID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPISlotifyGroupsSlotifyGroupID operation middleware
func (siw *ServerInterfaceWrapper) GetAPISlotifyGroupsSlotifyGroupID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "slotifyGroupID" -------------
	var slotifyGroupID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "slotifyGroupID", mux.Vars(r)["slotifyGroupID"], &slotifyGroupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slotifyGroupID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPISlotifyGroupsSlotifyGroupID(w, r, slotifyGroupID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPISlotifyGroupsSlotifyGroupIDInvites operation middleware
func (siw *ServerInterfaceWrapper) GetAPISlotifyGroupsSlotifyGroupIDInvites(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "slotifyGroupID" -------------
	var slotifyGroupID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "slotifyGroupID", mux.Vars(r)["slotifyGroupID"], &slotifyGroupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slotifyGroupID", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPISlotifyGroupsSlotifyGroupIDInvitesParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPISlotifyGroupsSlotifyGroupIDInvites(w, r, slotifyGroupID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteSlotifyGroupsSlotifyGroupIDLeaveMe operation middleware
func (siw *ServerInterfaceWrapper) DeleteSlotifyGroupsSlotifyGroupIDLeaveMe(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "slotifyGroupID" -------------
	var slotifyGroupID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "slotifyGroupID", mux.Vars(r)["slotifyGroupID"], &slotifyGroupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slotifyGroupID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSlotifyGroupsSlotifyGroupIDLeaveMe(w, r, slotifyGroupID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPISlotifyGroupsSlotifyGroupIDUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAPISlotifyGroupsSlotifyGroupIDUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "slotifyGroupID" -------------
	var slotifyGroupID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "slotifyGroupID", mux.Vars(r)["slotifyGroupID"], &slotifyGroupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slotifyGroupID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPISlotifyGroupsSlotifyGroupIDUsers(w, r, slotifyGroupID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAPIUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIUsersParams

	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", r.URL.Query(), &params.Email)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "email", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIUsers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIUsers operation middleware
func (siw *ServerInterfaceWrapper) PostAPIUsers(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIUsersMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPIUsersMe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIUsersMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIUsersMeLogout operation middleware
func (siw *ServerInterfaceWrapper) PostAPIUsersMeLogout(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIUsersMeLogout(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIUsersMeNotifications operation middleware
func (siw *ServerInterfaceWrapper) GetAPIUsersMeNotifications(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIUsersMeNotifications(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAPIUsersUserID operation middleware
func (siw *ServerInterfaceWrapper) DeleteAPIUsersUserID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userID" -------------
	var userID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "userID", mux.Vars(r)["userID"], &userID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAPIUsersUserID(w, r, userID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIUsersUserID operation middleware
func (siw *ServerInterfaceWrapper) GetAPIUsersUserID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userID" -------------
	var userID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "userID", mux.Vars(r)["userID"], &userID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIUsersUserID(w, r, userID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/api/auth/callback", wrapper.GetAPIAuthCallback).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/calendar/me", wrapper.GetAPICalendarMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/calendar/me", wrapper.PostAPICalendarMe).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/calendar/{userID}", wrapper.GetAPICalendarUserID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/events", wrapper.RenderEvent).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/healthcheck", wrapper.GetAPIHealthcheck).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/invites", wrapper.PostAPIInvites).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/invites/me", wrapper.GetAPIInvitesMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/invites/{inviteID}", wrapper.DeleteAPIInvitesInviteID).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/invites/{inviteID}", wrapper.PatchAPIInvitesInviteID).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/api/invites/{inviteID}/accept", wrapper.PatchAPIInvitesInviteIDAccept).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/api/invites/{inviteID}/decline", wrapper.PatchAPIInvitesInviteIDDecline).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/api/msft-groups", wrapper.GetAPIMSFTGroups).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/msft-groups/me", wrapper.GetAPIMSFTGroupsMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/msft-groups/{groupID}", wrapper.GetAPIMSFTGroupsGroupID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/msft-groups/{groupID}/users", wrapper.GetAPIMSFTGroupsGroupIDUsers).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/msft-users", wrapper.GetAPIMSFTUsers).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/msft-users/search", wrapper.GetAPIMSFTUsersSearch).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/notifications/{notificationID}/read", wrapper.PatchAPINotificationsNotificationIDRead).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/api/refresh", wrapper.PostAPIRefresh).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/reschedule/check", wrapper.PostAPIRescheduleCheck).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/reschedule/request/replace", wrapper.PostAPIRescheduleRequestReplace).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/scheduling/slots", wrapper.PostAPISchedulingSlots).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups", wrapper.PostAPISlotifyGroups).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups/me", wrapper.GetAPISlotifyGroupsMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups/{slotifyGroupID}", wrapper.DeleteAPISlotifyGroupsSlotifyGroupID).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups/{slotifyGroupID}", wrapper.GetAPISlotifyGroupsSlotifyGroupID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups/{slotifyGroupID}/invites", wrapper.GetAPISlotifyGroupsSlotifyGroupIDInvites).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups/{slotifyGroupID}/leave/me", wrapper.DeleteSlotifyGroupsSlotifyGroupIDLeaveMe).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups/{slotifyGroupID}/users", wrapper.GetAPISlotifyGroupsSlotifyGroupIDUsers).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/users", wrapper.GetAPIUsers).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/users", wrapper.PostAPIUsers).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/users/me", wrapper.GetAPIUsersMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/users/me/logout", wrapper.PostAPIUsersMeLogout).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/users/me/notifications", wrapper.GetAPIUsersMeNotifications).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/users/{userID}", wrapper.DeleteAPIUsersUserID).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/users/{userID}", wrapper.GetAPIUsersUserID).Methods("GET")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"MU7gIrr+ev2fAAAA//8mwLC2pZIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
