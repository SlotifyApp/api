// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AttendeeResponseStatus.
const (
	AttendeeResponseStatusAccepted           AttendeeResponseStatus = "accepted"
	AttendeeResponseStatusDeclined           AttendeeResponseStatus = "declined"
	AttendeeResponseStatusEntativelyAccepted AttendeeResponseStatus = "entativelyAccepted"
	AttendeeResponseStatusNone               AttendeeResponseStatus = "none"
	AttendeeResponseStatusNotResponded       AttendeeResponseStatus = "notResponded"
	AttendeeResponseStatusOrganizer          AttendeeResponseStatus = "organizer"
)

// Defines values for AttendeeType.
const (
	Optional AttendeeType = "optional"
	Required AttendeeType = "required"
	Resource AttendeeType = "resource"
)

// Defines values for EmptySuggestionsReason.
const (
	EmptySuggestionsReasonAttendeesUnavailable          EmptySuggestionsReason = "attendeesUnavailable"
	EmptySuggestionsReasonAttendeesUnavailableOrUnknown EmptySuggestionsReason = "attendeesUnavailableOrUnknown"
	EmptySuggestionsReasonLocationsUnavailable          EmptySuggestionsReason = "locationsUnavailable"
	EmptySuggestionsReasonOrganizerUnavailable          EmptySuggestionsReason = "organizerUnavailable"
	EmptySuggestionsReasonUnknown                       EmptySuggestionsReason = "unknown"
)

// Defines values for FreeBusyStatus.
const (
	FreeBusyStatusBusy             FreeBusyStatus = "busy"
	FreeBusyStatusFree             FreeBusyStatus = "free"
	FreeBusyStatusOof              FreeBusyStatus = "oof"
	FreeBusyStatusTentative        FreeBusyStatus = "tentative"
	FreeBusyStatusUnknown          FreeBusyStatus = "unknown"
	FreeBusyStatusWorkingElsewhere FreeBusyStatus = "workingElsewhere"
)

// Defines values for InviteStatus.
const (
	InviteStatusAccepted InviteStatus = "accepted"
	InviteStatusDeclined InviteStatus = "declined"
	InviteStatusExpired  InviteStatus = "expired"
	InviteStatusPending  InviteStatus = "pending"
)

// Defines values for LocationRoomType.
const (
	BusinessAddress LocationRoomType = "businessAddress"
	ConferenceRoom  LocationRoomType = "conferenceRoom"
	Default         LocationRoomType = "default"
	GeoCoordinates  LocationRoomType = "geoCoordinates"
	HomeAddress     LocationRoomType = "homeAddress"
	Hotel           LocationRoomType = "hotel"
	LocalBusiness   LocationRoomType = "localBusiness"
	PostalAddress   LocationRoomType = "postalAddress"
	Restaurant      LocationRoomType = "restaurant"
	StreetAddress   LocationRoomType = "streetAddress"
)

// Attendee Maps roughly to [MSFT Attendee](https://learn.microsoft.com/en-us/graph/api/resources/attendee?view=graph-rest-1.0#properties)
type Attendee struct {
	// AttendeeType Maps directly to [MSFT Attendee->type](https://learn.microsoft.com/en-us/graph/api/resources/attendee?view=graph-rest-1.0)
	AttendeeType   *AttendeeType           `json:"attendeeType,omitempty"`
	Email          openapi_types.Email     `json:"email"`
	ResponseStatus *AttendeeResponseStatus `json:"responseStatus"`
}

// AttendeeResponseStatus defines model for Attendee.ResponseStatus.
type AttendeeResponseStatus string

// AttendeeAvailability Maps roughly to [MSFT attendeeAvailability](https://learn.microsoft.com/en-us/graph/api/resources/attendeeavailability?view=graph-rest-1.0)
type AttendeeAvailability struct {
	// Attendee directly maps to [MSFT attendeeBase](https://learn.microsoft.com/en-us/graph/api/resources/attendeebase?view=graph-rest-1.0)
	Attendee AttendeeBase `json:"attendee"`

	// Availability Maps directly to [MSFT freebusyStatus](https://learn.microsoft.com/en-us/graph/api/resources/attendeeavailability?view=graph-rest-1.0)
	Availability FreeBusyStatus `json:"availability"`
}

// AttendeeBase directly maps to [MSFT attendeeBase](https://learn.microsoft.com/en-us/graph/api/resources/attendeebase?view=graph-rest-1.0)
type AttendeeBase struct {
	// AttendeeType Maps directly to [MSFT Attendee->type](https://learn.microsoft.com/en-us/graph/api/resources/attendee?view=graph-rest-1.0)
	AttendeeType AttendeeType `json:"attendeeType"`

	// EmailAddress directly maps to MSFT Email Address, see info here:[MSFT EmailAddress Struct Docs](https://learn.microsoft.com/en-us/graph/api/resources/emailaddress?view=graph-rest-1.0)
	EmailAddress EmailAddress `json:"emailAddress"`
}

// AttendeeType Maps directly to [MSFT Attendee->type](https://learn.microsoft.com/en-us/graph/api/resources/attendee?view=graph-rest-1.0)
type AttendeeType string

// CalendarEvent Maps roughly to [MSFT event](https://learn.microsoft.com/en-us/graph/api/resources/event?view=graph-rest-1.0#properties)
type CalendarEvent struct {
	Attendees   []Attendee `json:"attendees"`
	Body        *string    `json:"body,omitempty"`
	Created     *time.Time `json:"created,omitempty"`
	EndTime     *string    `json:"endTime"`
	Id          *string    `json:"id,omitempty"`
	IsCancelled *bool      `json:"isCancelled,omitempty"`

	// JoinURL Maps roughly to [MSFT OnlineMeetingInfo->joinURL](https://learn.microsoft.com/en-us/graph/api/resources/onlinemeetinginfo?view=graph-rest-1.0#json-representation)
	JoinURL   *string    `json:"joinURL"`
	Locations []Location `json:"locations"`

	// Organizer Maps roughly to [MSFT Recipient->emailAddress](https://learn.microsoft.com/en-us/graph/api/resources/recipient?view=graph-rest-1.0)
	Organizer *openapi_types.Email `json:"organizer,omitempty"`
	StartTime *string              `json:"startTime"`
	Subject   *string              `json:"subject,omitempty"`
	WebLink   *string              `json:"webLink,omitempty"`
}

// EmailAddress directly maps to MSFT Email Address, see info here:[MSFT EmailAddress Struct Docs](https://learn.microsoft.com/en-us/graph/api/resources/emailaddress?view=graph-rest-1.0)
type EmailAddress struct {
	Address openapi_types.Email `json:"address"`
	Name    string              `json:"name"`
}

// EmptySuggestionsReason Maps directly to [MSFT emptySuggestionsReason](https://learn.microsoft.com/en-us/graph/api/resources/meetingtimesuggestionsresult?view=graph-rest-1.0)
type EmptySuggestionsReason string

// FreeBusyStatus Maps directly to [MSFT freebusyStatus](https://learn.microsoft.com/en-us/graph/api/resources/attendeeavailability?view=graph-rest-1.0)
type FreeBusyStatus string

// InviteCreate Invite create request body
type InviteCreate struct {
	CreatedAt      time.Time          `json:"createdAt"`
	ExpiryDate     openapi_types.Date `json:"expiryDate"`
	Message        string             `json:"message"`
	SlotifyGroupID uint32             `json:"slotifyGroupID"`
	ToUserID       uint32             `json:"toUserID"`
}

// InviteStatus Invite status
type InviteStatus string

// InvitesGroup References a Slotify Invite For a Group
type InvitesGroup struct {
	CreatedAt         time.Time           `json:"createdAt"`
	ExpiryDate        openapi_types.Date  `json:"expiryDate"`
	FromUserEmail     openapi_types.Email `json:"fromUserEmail"`
	FromUserFirstName string              `json:"fromUserFirstName"`
	FromUserLastName  string              `json:"fromUserLastName"`
	InviteID          uint32              `json:"inviteID"`
	Message           string              `json:"message"`

	// Status Invite status
	Status          InviteStatus        `json:"status"`
	ToUserEmail     openapi_types.Email `json:"toUserEmail"`
	ToUserFirstName string              `json:"toUserFirstName"`
	ToUserLastName  string              `json:"toUserLastName"`
}

// InvitesMe References a Slotify Invite
type InvitesMe struct {
	CreatedAt  time.Time          `json:"createdAt"`
	ExpiryDate openapi_types.Date `json:"expiryDate"`

	// FromUserEmail from user email
	FromUserEmail openapi_types.Email `json:"fromUserEmail"`

	// FromUserFirstName from user first name
	FromUserFirstName string `json:"fromUserFirstName"`

	// FromUserLastName from user last name
	FromUserLastName string `json:"fromUserLastName"`
	InviteID         uint32 `json:"inviteID"`

	// Message invite message
	Message string `json:"message"`

	// SlotifyGroupName slotify group name
	SlotifyGroupName string `json:"slotifyGroupName"`

	// Status Invite status
	Status InviteStatus `json:"status"`
}

// Location Maps roughly to [MSFT Location](https://learn.microsoft.com/en-us/graph/api/resources/location?view=graph-rest-1.0)
type Location struct {
	Id       *string           `json:"id,omitempty"`
	Name     *string           `json:"name,omitempty"`
	RoomType *LocationRoomType `json:"roomType"`
	Street   *string           `json:"street"`
}

// LocationRoomType defines model for Location.RoomType.
type LocationRoomType string

// LocationConstraint Maps directly to [MSFT locationConstraint](https://learn.microsoft.com/en-us/graph/api/resources/locationconstraint?view=graph-rest-1.0)
type LocationConstraint struct {
	IsRequired      *bool                     `json:"isRequired,omitempty"`
	Locations       *[]LocationConstraintItem `json:"locations,omitempty"`
	SuggestLocation *bool                     `json:"suggestLocation,omitempty"`
}

// LocationConstraintItem Maps roughly to [MSFT locationConstraintItem](https://learn.microsoft.com/en-us/graph/api/resources/locationconstraintitem?view=graph-rest-1.0)
type LocationConstraintItem struct {
	// Address Maps directly to [MSFT physicalAddress](https://learn.microsoft.com/en-us/graph/api/resources/locationconstraintitem?view=graph-rest-1.0)
	Address              PhysicalAddress `json:"address"`
	DisplayName          string          `json:"displayName"`
	LocationEmailAddress *string         `json:"locationEmailAddress,omitempty"`
	ResolveAvailability  bool            `json:"resolveAvailability"`
}

// MSFTGroup defines model for MSFTGroup.
type MSFTGroup struct {
	Id   uint32 `json:"id"`
	Name string `json:"name"`
}

// MSFTUser defines model for MSFTUser.
type MSFTUser struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	LastName  string              `json:"lastName"`
}

// MeetingTimeSlot Maps directly to [MSFT meetingTimeSlot](https://learn.microsoft.com/en-us/graph/api/resources/timeslot?view=graph-rest-1.0)
type MeetingTimeSlot struct {
	End   time.Time `json:"end"`
	Start time.Time `json:"start"`
}

// MeetingTimeSuggestion Maps roughly to [MSFT meetingTimeSuggestion](https://learn.microsoft.com/en-us/graph/api/resources/meetingtimesuggestion?view=graph-rest-1.0)
type MeetingTimeSuggestion struct {
	AttendeeAvailability *[]AttendeeAvailability `json:"attendeeAvailability,omitempty"`
	Confidence           *float64                `json:"confidence,omitempty"`
	Locations            *[]Location             `json:"locations,omitempty"`

	// MeetingTimeSlot Maps directly to [MSFT meetingTimeSlot](https://learn.microsoft.com/en-us/graph/api/resources/timeslot?view=graph-rest-1.0)
	MeetingTimeSlot       *MeetingTimeSlot `json:"meetingTimeSlot,omitempty"`
	Order                 *int32           `json:"order,omitempty"`
	OrganizerAvailability *string          `json:"organizerAvailability,omitempty"`
	SuggestionReason      *string          `json:"suggestionReason,omitempty"`
}

// Notification defines model for Notification.
type Notification struct {
	Created time.Time `json:"created"`
	Id      uint32    `json:"id"`
	Message string    `json:"message"`
}

// PhysicalAddress Maps directly to [MSFT physicalAddress](https://learn.microsoft.com/en-us/graph/api/resources/locationconstraintitem?view=graph-rest-1.0)
type PhysicalAddress struct {
	// City The city.
	City *string `json:"city,omitempty"`

	// CountryOrRegion The country or region. It's a free-format string value, for example, "United States".
	CountryOrRegion *string `json:"countryOrRegion,omitempty"`

	// PostalCode The postal code.
	PostalCode *string `json:"postalCode,omitempty"`

	// State The state.
	State *string `json:"state,omitempty"`

	// Street The street.
	Street *string `json:"street,omitempty"`
}

// RescheduleRequest Reschedule request object
type RescheduleRequest struct {
	NewMeeting *ReschedulingRequestNewMeeting `json:"newMeeting,omitempty"`
	OldMeeting ReschedulingRequestOldMeeting  `json:"oldMeeting"`

	// RequestId The request ID
	RequestId uint32 `json:"request_id"`

	// RequestedAt The time the request was made
	RequestedAt time.Time `json:"requested_at"`

	// RequestedBy The user ID of the person who requested the reschedule
	RequestedBy uint32 `json:"requested_by"`

	// Status The status of the reschedule request
	Status string `json:"status"`
}

// ReschedulingCheckBodySchema Request body of the details of the two meetings
type ReschedulingCheckBodySchema struct {
	NewMeeting struct {
		// Attendees Array of all the attendees
		Attendees []AttendeeBase `json:"attendees"`

		// MeetingDuration The length of the meeting, denoted in **ISO 8601** format. - Example:
		//   - **1 hour** → `'PT1H'`
		//   - **2 hours, 30 minutes** → `'PT2H30M'`
		// - `'P'` is the duration designator. - `'T'` separates date and time components. - `'H'` (hours) and `'M'` (minutes) specify the time duration. - If omitted, the default duration is **30 minutes** (`'PT30M'`).
		MeetingDuration string `json:"meetingDuration"`

		// Title name of the meeting
		Title string `json:"title"`
	} `json:"newMeeting"`
	OldMeeting struct {
		// IsOrganizerOptional if organizer does not need to be there, then set true. If the organizer is the only person in the meeting, keep false
		IsOrganizerOptional *bool `json:"isOrganizerOptional,omitempty"`

		// MsftMeetingID The microsoft meeting ID of the old meeting if it exists
		MsftMeetingID string `json:"msftMeetingID"`
	} `json:"oldMeeting"`
}

// ReschedulingRequestAcceptBodySchema defines model for ReschedulingRequestAcceptBodySchema.
type ReschedulingRequestAcceptBodySchema struct {
	// NewEndTime The start of the meeting denoted in *ISO 8601* format In the format: yyyy-mm-ddThh:mm:ssZ Where lowercase letters are replaced by their numerical values
	NewEndTime time.Time `json:"newEndTime"`

	// NewStartTime The start of the meeting denoted in *ISO 8601* format In the format: yyyy-mm-ddThh:mm:ssZ Where lowercase letters are replaced by their numerical values
	NewStartTime time.Time `json:"newStartTime"`
}

// ReschedulingRequestBodySchema Request body of the details of the two meetings
type ReschedulingRequestBodySchema struct {
	NewMeeting struct {
		// Attendees Array of all the attendees user id
		Attendees []int `json:"attendees"`

		// EndRangeTime The start of the meeting denoted in *ISO 8601* format In the format: yyyy-mm-ddThh:mm:ssZ Where lowercase letters are replaced by their numerical values
		EndRangeTime time.Time `json:"endRangeTime"`

		// EndTime The start of the meeting denoted in *ISO 8601* format In the format: yyyy-mm-ddThh:mm:ssZ Where lowercase letters are replaced by their numerical values
		EndTime time.Time `json:"endTime"`

		// Location The location of the meeting
		Location string `json:"location"`

		// MeetingDuration The length of the meeting, denoted in **ISO 8601** format. - Example:
		//   - **1 hour** → `'PT1H'`
		//   - **2 hours, 30 minutes** → `'PT2H30M'`
		// - `'P'` is the duration designator. - `'T'` separates date and time components. - `'H'` (hours) and `'M'` (minutes) specify the time duration. - If omitted, the default duration is **30 minutes** (`'PT30M'`).
		MeetingDuration string `json:"meetingDuration"`

		// StartRangeTime The start of the meeting denoted in *ISO 8601* format In the format: yyyy-mm-ddThh:mm:ssZ Where lowercase letters are replaced by their numerical values
		StartRangeTime time.Time `json:"startRangeTime"`

		// StartTime The start of the meeting denoted in *ISO 8601* format In the format: yyyy-mm-ddThh:mm:ssZ Where lowercase letters are replaced by their numerical values
		StartTime time.Time `json:"startTime"`

		// Title name of the meeting
		Title string `json:"title"`
	} `json:"newMeeting"`
	OldMeeting struct {
		// MeetingOwner Meeting owner ID
		MeetingOwner int `json:"meetingOwner"`

		// MeetingStartTime The start of the meeting denoted in *ISO 8601* format
		MeetingStartTime time.Time `json:"meetingStartTime"`

		// MsftMeetingID The microsoft meeting ID of the old meeting
		MsftMeetingID string `json:"msftMeetingID"`
	} `json:"oldMeeting"`
}

// ReschedulingRequestNewMeeting defines model for ReschedulingRequestNewMeeting.
type ReschedulingRequestNewMeeting struct {
	// EndTime The start of the meeting denoted in *ISO 8601* format In the format: yyyy-mm-ddThh:mm:ssZ Where lowercase letters are replaced by their numerical values
	EndTime time.Time `json:"endTime"`

	// Location The location of the meeting
	Location string `json:"location"`

	// MeetingDuration The length of the meeting, denoted in **ISO 8601** format. - Example:
	//   - **1 hour** → `'PT1H'`
	//   - **2 hours, 30 minutes** → `'PT2H30M'`
	// - `'P'` is the duration designator. - `'T'` separates date and time components. - `'H'` (hours) and `'M'` (minutes) specify the time duration. - If omitted, the default duration is **30 minutes** (`'PT30M'`).
	MeetingDuration string `json:"meetingDuration"`

	// StartTime The start of the meeting denoted in *ISO 8601* format In the format: yyyy-mm-ddThh:mm:ssZ Where lowercase letters are replaced by their numerical values
	StartTime time.Time `json:"startTime"`

	// Title name of the meeting
	Title string `json:"title"`
}

// ReschedulingRequestOldMeeting defines model for ReschedulingRequestOldMeeting.
type ReschedulingRequestOldMeeting struct {
	// MeetingId The meeting ID of the old meeting
	MeetingId uint32 `json:"meetingId"`

	// MsftMeetingID The microsoft meeting ID of the old meeting
	MsftMeetingID string `json:"msftMeetingID"`
}

// ReschedulingRequestSingleBodySchema Request body of the details of the old meeting
type ReschedulingRequestSingleBodySchema struct {
	// MsftMeetingID The microsoft meeting ID of the old meeting
	MsftMeetingID string `json:"msftMeetingID"`
}

// Room defines model for Room.
type Room struct {
	Email openapi_types.Email `json:"email"`
	Name  string              `json:"name"`
}

// SchedulingSlotsBodySchema Roughly maps to [MSFT Find Meeting Schema](https://learn.microsoft.com/en-us/graph/api/user-findmeetingtimes?view=graph-rest-1.0&tabs=http#request-body)
type SchedulingSlotsBodySchema struct {
	Attendees           []AttendeeBase `json:"attendees"`
	IsOrganizerOptional bool           `json:"isOrganizerOptional"`

	// LocationConstraint Maps directly to [MSFT locationConstraint](https://learn.microsoft.com/en-us/graph/api/resources/locationconstraint?view=graph-rest-1.0)
	LocationConstraint LocationConstraint `json:"locationConstraint"`
	MaxCandidates      *int32             `json:"maxCandidates,omitempty"`

	// MeetingDuration The length of the meeting, denoted in **ISO 8601** format. - Example:
	//   - **1 hour** → `'PT1H'`
	//   - **2 hours, 30 minutes** → `'PT2H30M'`
	// - `'P'` is the duration designator. - `'T'` separates date and time components. - `'H'` (hours) and `'M'` (minutes) specify the time duration. - If omitted, the default duration is **30 minutes** (`'PT30M'`).
	MeetingDuration string `json:"meetingDuration"`

	// MeetingName custom field, this is used for the AI model
	MeetingName               string   `json:"meetingName"`
	MinimumAttendeePercentage *float64 `json:"minimumAttendeePercentage,omitempty"`

	// TimeConstraint Maps directly to [MSFT timeConstraint](https://learn.microsoft.com/en-us/graph/api/resources/timeconstraint?view=graph-rest-1.0)
	TimeConstraint TimeConstraint `json:"timeConstraint"`
}

// SchedulingSlotsSuccessResponseBody Maps roughly to [MSFT meetingTimeSuggestionsResult](https://learn.microsoft.com/en-us/graph/api/resources/meetingtimesuggestionsresult?view=graph-rest-1.0)
type SchedulingSlotsSuccessResponseBody struct {
	// EmptySuggestionsReason Maps directly to [MSFT emptySuggestionsReason](https://learn.microsoft.com/en-us/graph/api/resources/meetingtimesuggestionsresult?view=graph-rest-1.0)
	EmptySuggestionsReason *EmptySuggestionsReason  `json:"emptySuggestionsReason,omitempty"`
	MeetingTimeSuggestions *[]MeetingTimeSuggestion `json:"meetingTimeSuggestions,omitempty"`
}

// SlotifyGroup defines model for SlotifyGroup.
type SlotifyGroup struct {
	Id   uint32 `json:"id"`
	Name string `json:"name"`
}

// SlotifyGroupCreate defines model for SlotifyGroupCreate.
type SlotifyGroupCreate struct {
	Name string `json:"name"`
}

// TimeConstraint Maps directly to [MSFT timeConstraint](https://learn.microsoft.com/en-us/graph/api/resources/timeconstraint?view=graph-rest-1.0)
type TimeConstraint struct {
	ActivityDomain *string           `json:"activityDomain,omitempty"`
	TimeSlots      []MeetingTimeSlot `json:"timeSlots"`
}

// User defines model for User.
type User struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	Id        uint32              `json:"id"`
	LastName  string              `json:"lastName"`
}

// UserCreate defines model for UserCreate.
type UserCreate struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	LastName  string              `json:"lastName"`
}

// RescheduleRequests defines model for RescheduleRequests.
type RescheduleRequests = []RescheduleRequest

// SchedulingSlotsSuccessResponse Maps roughly to [MSFT meetingTimeSuggestionsResult](https://learn.microsoft.com/en-us/graph/api/resources/meetingtimesuggestionsresult?view=graph-rest-1.0)
type SchedulingSlotsSuccessResponse = SchedulingSlotsSuccessResponseBody

// GetAPIAuthCallbackParams defines parameters for GetAPIAuthCallback.
type GetAPIAuthCallbackParams struct {
	Code  string `form:"code" json:"code"`
	State string `form:"state" json:"state"`
}

// GetAPICalendarEventParams defines parameters for GetAPICalendarEvent.
type GetAPICalendarEventParams struct {
	MsftID string `form:"msftID" json:"msftID"`
}

// GetAPICalendarMeParams defines parameters for GetAPICalendarMe.
type GetAPICalendarMeParams struct {
	Start time.Time `form:"start" json:"start"`
	End   time.Time `form:"end" json:"end"`
}

// GetAPICalendarUserIDParams defines parameters for GetAPICalendarUserID.
type GetAPICalendarUserIDParams struct {
	Start time.Time `form:"start" json:"start"`
	End   time.Time `form:"end" json:"end"`
}

// GetAPIInvitesMeParams defines parameters for GetAPIInvitesMe.
type GetAPIInvitesMeParams struct {
	// Status Invite status
	Status *InviteStatus `form:"status,omitempty" json:"status,omitempty"`
}

// PatchAPIInvitesInviteIDJSONBody defines parameters for PatchAPIInvitesInviteID.
type PatchAPIInvitesInviteIDJSONBody struct {
	Message string `json:"message"`
}

// GetAPIMSFTGroupsParams defines parameters for GetAPIMSFTGroups.
type GetAPIMSFTGroupsParams struct {
	// Name Microsoft group name
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// GetAPIMSFTUsersSearchParams defines parameters for GetAPIMSFTUsersSearch.
type GetAPIMSFTUsersSearchParams struct {
	// Search Search parameter for Microsoft users, can be first name, surname, or email
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// GetAPISlotifyGroupsSlotifyGroupIDInvitesParams defines parameters for GetAPISlotifyGroupsSlotifyGroupIDInvites.
type GetAPISlotifyGroupsSlotifyGroupIDInvitesParams struct {
	// Status Invite status
	Status *InviteStatus `form:"status,omitempty" json:"status,omitempty"`
}

// GetAPIUsersParams defines parameters for GetAPIUsers.
type GetAPIUsersParams struct {
	// Email Email of user to search for
	Email *openapi_types.Email `form:"email,omitempty" json:"email,omitempty"`

	// Name Name of user to search for
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// PostAPICalendarMeJSONRequestBody defines body for PostAPICalendarMe for application/json ContentType.
type PostAPICalendarMeJSONRequestBody = CalendarEvent

// PostAPIInvitesJSONRequestBody defines body for PostAPIInvites for application/json ContentType.
type PostAPIInvitesJSONRequestBody = InviteCreate

// PatchAPIInvitesInviteIDJSONRequestBody defines body for PatchAPIInvitesInviteID for application/json ContentType.
type PatchAPIInvitesInviteIDJSONRequestBody PatchAPIInvitesInviteIDJSONBody

// PostAPIRescheduleCheckJSONRequestBody defines body for PostAPIRescheduleCheck for application/json ContentType.
type PostAPIRescheduleCheckJSONRequestBody = ReschedulingCheckBodySchema

// PostAPIRescheduleRequestReplaceJSONRequestBody defines body for PostAPIRescheduleRequestReplace for application/json ContentType.
type PostAPIRescheduleRequestReplaceJSONRequestBody = ReschedulingRequestBodySchema

// PostAPIRescheduleRequestSingleJSONRequestBody defines body for PostAPIRescheduleRequestSingle for application/json ContentType.
type PostAPIRescheduleRequestSingleJSONRequestBody = ReschedulingRequestSingleBodySchema

// PatchAPIRescheduleRequestRequestIDAcceptJSONRequestBody defines body for PatchAPIRescheduleRequestRequestIDAccept for application/json ContentType.
type PatchAPIRescheduleRequestRequestIDAcceptJSONRequestBody = ReschedulingRequestAcceptBodySchema

// PostAPISchedulingSlotsJSONRequestBody defines body for PostAPISchedulingSlots for application/json ContentType.
type PostAPISchedulingSlotsJSONRequestBody = SchedulingSlotsBodySchema

// PostAPISlotifyGroupsJSONRequestBody defines body for PostAPISlotifyGroups for application/json ContentType.
type PostAPISlotifyGroupsJSONRequestBody = SlotifyGroupCreate

// PostAPIUsersJSONRequestBody defines body for PostAPIUsers for application/json ContentType.
type PostAPIUsersJSONRequestBody = UserCreate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Auth route for authorisation code flow.
	// (GET /api/auth/callback)
	GetAPIAuthCallback(w http.ResponseWriter, r *http.Request, params GetAPIAuthCallbackParams)
	// Get the users specific microsoft calendar event
	// (GET /api/calendar/event)
	GetAPICalendarEvent(w http.ResponseWriter, r *http.Request, params GetAPICalendarEventParams)
	// Get a user's calendar events for a given time range.
	// (GET /api/calendar/me)
	GetAPICalendarMe(w http.ResponseWriter, r *http.Request, params GetAPICalendarMeParams)
	// Create a new calendar event.
	// (POST /api/calendar/me)
	PostAPICalendarMe(w http.ResponseWriter, r *http.Request)
	// Get a specific user's calendar events for a given time range.
	// (GET /api/calendar/{userID})
	GetAPICalendarUserID(w http.ResponseWriter, r *http.Request, userID uint32, params GetAPICalendarUserIDParams)
	// Subscribe to notifications eventstream.
	// (GET /api/events)
	RenderEvent(w http.ResponseWriter, r *http.Request)
	// Healthcheck route.
	// (GET /api/healthcheck)
	GetAPIHealthcheck(w http.ResponseWriter, r *http.Request)
	// Create a new invite
	// (POST /api/invites)
	PostAPIInvites(w http.ResponseWriter, r *http.Request)
	// Get all invites for logged in user.
	// (GET /api/invites/me)
	GetAPIInvitesMe(w http.ResponseWriter, r *http.Request, params GetAPIInvitesMeParams)
	// Delete an invite
	// (DELETE /api/invites/{inviteID})
	DeleteAPIInvitesInviteID(w http.ResponseWriter, r *http.Request, inviteID uint32)
	// Update an invite with a new message
	// (PATCH /api/invites/{inviteID})
	PatchAPIInvitesInviteID(w http.ResponseWriter, r *http.Request, inviteID uint32)
	// Accept a new group invite and add member to slotify group.
	// (PATCH /api/invites/{inviteID}/accept)
	PatchAPIInvitesInviteIDAccept(w http.ResponseWriter, r *http.Request, inviteID uint32)
	// Decline an invite
	// (PATCH /api/invites/{inviteID}/decline)
	PatchAPIInvitesInviteIDDecline(w http.ResponseWriter, r *http.Request, inviteID uint32)
	// Get a Microsoft group by query params.
	// (GET /api/msft-groups)
	GetAPIMSFTGroups(w http.ResponseWriter, r *http.Request, params GetAPIMSFTGroupsParams)
	// Get all Microsoft groups for current user.
	// (GET /api/msft-groups/me)
	GetAPIMSFTGroupsMe(w http.ResponseWriter, r *http.Request)
	// Get a Microsoft group by id.
	// (GET /api/msft-groups/{groupID})
	GetAPIMSFTGroupsGroupID(w http.ResponseWriter, r *http.Request, groupID uint32)
	// Get all members of a Microsoft group.
	// (GET /api/msft-groups/{groupID}/users)
	GetAPIMSFTGroupsGroupIDUsers(w http.ResponseWriter, r *http.Request, groupID uint32)
	// Get all users from Microsoft
	// (GET /api/msft-users)
	GetAPIMSFTUsers(w http.ResponseWriter, r *http.Request)
	// Get users from Microsoft based on name and email
	// (GET /api/msft-users/search)
	GetAPIMSFTUsersSearch(w http.ResponseWriter, r *http.Request, params GetAPIMSFTUsersSearchParams)
	// Mark a notification as being read.
	// (PATCH /api/notifications/{notificationID}/read)
	PatchAPINotificationsNotificationIDRead(w http.ResponseWriter, r *http.Request, notificationID uint32)
	// Refresh Slotify access token and refresh token.
	// (POST /api/refresh)
	PostAPIRefresh(w http.ResponseWriter, r *http.Request)
	// Check if the old meeting can be rescheduled
	// (POST /api/reschedule/check)
	PostAPIRescheduleCheck(w http.ResponseWriter, r *http.Request)
	// Create a request to reschedule the old meeting for a new meeting.
	// (POST /api/reschedule/request/replace)
	PostAPIRescheduleRequestReplace(w http.ResponseWriter, r *http.Request)
	// Request to reschedule the old meeting by itself
	// (POST /api/reschedule/request/single)
	PostAPIRescheduleRequestSingle(w http.ResponseWriter, r *http.Request)
	// Get all reschedule requests by request id.
	// (GET /api/reschedule/request/{requestID})
	GetAPIRescheduleRequestRequestID(w http.ResponseWriter, r *http.Request, requestID uint32)
	// Accept a reschedule request by request id.
	// (PATCH /api/reschedule/request/{requestID}/accept)
	PatchAPIRescheduleRequestRequestIDAccept(w http.ResponseWriter, r *http.Request, requestID uint32)
	// Reject a reschedule request by id.
	// (PATCH /api/reschedule/request/{requestID}/reject)
	PatchAPIRescheduleRequestRequestIDReject(w http.ResponseWriter, r *http.Request, requestID uint32)
	// Get all reschedule requests for current user.
	// (GET /api/reschedule/requests/me)
	GetAPIRescheduleRequestsMe(w http.ResponseWriter, r *http.Request)
	// Get all possible rooms.
	// (GET /api/rooms/all)
	GetAPIRoomsAll(w http.ResponseWriter, r *http.Request)
	// Idempotent route, just returns appropriate time slots along with their respective ratings.
	// (POST /api/scheduling/slots)
	PostAPISchedulingSlots(w http.ResponseWriter, r *http.Request)
	// Create a new slotifyGroup.
	// (POST /api/slotify-groups)
	PostAPISlotifyGroups(w http.ResponseWriter, r *http.Request)
	// Get all slotify-groups for current user.
	// (GET /api/slotify-groups/me)
	GetAPISlotifyGroupsMe(w http.ResponseWriter, r *http.Request)
	// Delete a slotifyGroup by id.
	// (DELETE /api/slotify-groups/{slotifyGroupID})
	DeleteAPISlotifyGroupsSlotifyGroupID(w http.ResponseWriter, r *http.Request, slotifyGroupID uint32)
	// Get a slotifyGroup by id.
	// (GET /api/slotify-groups/{slotifyGroupID})
	GetAPISlotifyGroupsSlotifyGroupID(w http.ResponseWriter, r *http.Request, slotifyGroupID uint32)
	// Get all invites for a slotify group
	// (GET /api/slotify-groups/{slotifyGroupID}/invites)
	GetAPISlotifyGroupsSlotifyGroupIDInvites(w http.ResponseWriter, r *http.Request, slotifyGroupID uint32, params GetAPISlotifyGroupsSlotifyGroupIDInvitesParams)
	// Have a member leave from a slotify group
	// (DELETE /api/slotify-groups/{slotifyGroupID}/leave/me)
	DeleteSlotifyGroupsSlotifyGroupIDLeaveMe(w http.ResponseWriter, r *http.Request, slotifyGroupID uint32)
	// Get all members of a slotifyGroup.
	// (GET /api/slotify-groups/{slotifyGroupID}/users)
	GetAPISlotifyGroupsSlotifyGroupIDUsers(w http.ResponseWriter, r *http.Request, slotifyGroupID uint32)
	// Search for users with by email and name. Only provide one of the query params or none.
	// (GET /api/users)
	GetAPIUsers(w http.ResponseWriter, r *http.Request, params GetAPIUsersParams)
	// Create a new user.
	// (POST /api/users)
	PostAPIUsers(w http.ResponseWriter, r *http.Request)
	// Get current user's details.
	// (GET /api/users/me)
	GetAPIUsersMe(w http.ResponseWriter, r *http.Request)
	// Logout user.
	// (POST /api/users/me/logout)
	PostAPIUsersMeLogout(w http.ResponseWriter, r *http.Request)
	// Get user's unread notifications.
	// (GET /api/users/me/notifications)
	GetAPIUsersMeNotifications(w http.ResponseWriter, r *http.Request)
	// Delete a user by id.
	// (DELETE /api/users/{userID})
	DeleteAPIUsersUserID(w http.ResponseWriter, r *http.Request, userID uint32)
	// Get a user by id.
	// (GET /api/users/{userID})
	GetAPIUsersUserID(w http.ResponseWriter, r *http.Request, userID uint32)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAPIAuthCallback operation middleware
func (siw *ServerInterfaceWrapper) GetAPIAuthCallback(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIAuthCallbackParams

	// ------------- Required query parameter "code" -------------

	if paramValue := r.URL.Query().Get("code"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "code"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "code", r.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Required query parameter "state" -------------

	if paramValue := r.URL.Query().Get("state"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "state"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "state", r.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIAuthCallback(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPICalendarEvent operation middleware
func (siw *ServerInterfaceWrapper) GetAPICalendarEvent(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPICalendarEventParams

	// ------------- Required query parameter "msftID" -------------

	if paramValue := r.URL.Query().Get("msftID"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "msftID"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "msftID", r.URL.Query(), &params.MsftID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "msftID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPICalendarEvent(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPICalendarMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPICalendarMe(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPICalendarMeParams

	// ------------- Required query parameter "start" -------------

	if paramValue := r.URL.Query().Get("start"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "start"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "start", r.URL.Query(), &params.Start)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start", Err: err})
		return
	}

	// ------------- Required query parameter "end" -------------

	if paramValue := r.URL.Query().Get("end"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "end"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "end", r.URL.Query(), &params.End)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "end", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPICalendarMe(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPICalendarMe operation middleware
func (siw *ServerInterfaceWrapper) PostAPICalendarMe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPICalendarMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPICalendarUserID operation middleware
func (siw *ServerInterfaceWrapper) GetAPICalendarUserID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userID" -------------
	var userID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "userID", mux.Vars(r)["userID"], &userID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userID", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPICalendarUserIDParams

	// ------------- Required query parameter "start" -------------

	if paramValue := r.URL.Query().Get("start"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "start"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "start", r.URL.Query(), &params.Start)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start", Err: err})
		return
	}

	// ------------- Required query parameter "end" -------------

	if paramValue := r.URL.Query().Get("end"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "end"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "end", r.URL.Query(), &params.End)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "end", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPICalendarUserID(w, r, userID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RenderEvent operation middleware
func (siw *ServerInterfaceWrapper) RenderEvent(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RenderEvent(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIHealthcheck operation middleware
func (siw *ServerInterfaceWrapper) GetAPIHealthcheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIHealthcheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIInvites operation middleware
func (siw *ServerInterfaceWrapper) PostAPIInvites(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIInvites(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIInvitesMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPIInvitesMe(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIInvitesMeParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIInvitesMe(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAPIInvitesInviteID operation middleware
func (siw *ServerInterfaceWrapper) DeleteAPIInvitesInviteID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "inviteID" -------------
	var inviteID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "inviteID", mux.Vars(r)["inviteID"], &inviteID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inviteID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAPIInvitesInviteID(w, r, inviteID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchAPIInvitesInviteID operation middleware
func (siw *ServerInterfaceWrapper) PatchAPIInvitesInviteID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "inviteID" -------------
	var inviteID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "inviteID", mux.Vars(r)["inviteID"], &inviteID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inviteID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAPIInvitesInviteID(w, r, inviteID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchAPIInvitesInviteIDAccept operation middleware
func (siw *ServerInterfaceWrapper) PatchAPIInvitesInviteIDAccept(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "inviteID" -------------
	var inviteID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "inviteID", mux.Vars(r)["inviteID"], &inviteID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inviteID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAPIInvitesInviteIDAccept(w, r, inviteID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchAPIInvitesInviteIDDecline operation middleware
func (siw *ServerInterfaceWrapper) PatchAPIInvitesInviteIDDecline(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "inviteID" -------------
	var inviteID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "inviteID", mux.Vars(r)["inviteID"], &inviteID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inviteID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAPIInvitesInviteIDDecline(w, r, inviteID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIMSFTGroups operation middleware
func (siw *ServerInterfaceWrapper) GetAPIMSFTGroups(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIMSFTGroupsParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIMSFTGroups(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIMSFTGroupsMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPIMSFTGroupsMe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIMSFTGroupsMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIMSFTGroupsGroupID operation middleware
func (siw *ServerInterfaceWrapper) GetAPIMSFTGroupsGroupID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "groupID" -------------
	var groupID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "groupID", mux.Vars(r)["groupID"], &groupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIMSFTGroupsGroupID(w, r, groupID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIMSFTGroupsGroupIDUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAPIMSFTGroupsGroupIDUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "groupID" -------------
	var groupID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "groupID", mux.Vars(r)["groupID"], &groupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIMSFTGroupsGroupIDUsers(w, r, groupID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIMSFTUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAPIMSFTUsers(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIMSFTUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIMSFTUsersSearch operation middleware
func (siw *ServerInterfaceWrapper) GetAPIMSFTUsersSearch(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIMSFTUsersSearchParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIMSFTUsersSearch(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchAPINotificationsNotificationIDRead operation middleware
func (siw *ServerInterfaceWrapper) PatchAPINotificationsNotificationIDRead(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "notificationID" -------------
	var notificationID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "notificationID", mux.Vars(r)["notificationID"], &notificationID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "notificationID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAPINotificationsNotificationIDRead(w, r, notificationID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIRefresh operation middleware
func (siw *ServerInterfaceWrapper) PostAPIRefresh(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIRefresh(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIRescheduleCheck operation middleware
func (siw *ServerInterfaceWrapper) PostAPIRescheduleCheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIRescheduleCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIRescheduleRequestReplace operation middleware
func (siw *ServerInterfaceWrapper) PostAPIRescheduleRequestReplace(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIRescheduleRequestReplace(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIRescheduleRequestSingle operation middleware
func (siw *ServerInterfaceWrapper) PostAPIRescheduleRequestSingle(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIRescheduleRequestSingle(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIRescheduleRequestRequestID operation middleware
func (siw *ServerInterfaceWrapper) GetAPIRescheduleRequestRequestID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "requestID" -------------
	var requestID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "requestID", mux.Vars(r)["requestID"], &requestID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIRescheduleRequestRequestID(w, r, requestID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchAPIRescheduleRequestRequestIDAccept operation middleware
func (siw *ServerInterfaceWrapper) PatchAPIRescheduleRequestRequestIDAccept(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "requestID" -------------
	var requestID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "requestID", mux.Vars(r)["requestID"], &requestID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAPIRescheduleRequestRequestIDAccept(w, r, requestID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchAPIRescheduleRequestRequestIDReject operation middleware
func (siw *ServerInterfaceWrapper) PatchAPIRescheduleRequestRequestIDReject(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "requestID" -------------
	var requestID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "requestID", mux.Vars(r)["requestID"], &requestID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAPIRescheduleRequestRequestIDReject(w, r, requestID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIRescheduleRequestsMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPIRescheduleRequestsMe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIRescheduleRequestsMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIRoomsAll operation middleware
func (siw *ServerInterfaceWrapper) GetAPIRoomsAll(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIRoomsAll(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPISchedulingSlots operation middleware
func (siw *ServerInterfaceWrapper) PostAPISchedulingSlots(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPISchedulingSlots(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPISlotifyGroups operation middleware
func (siw *ServerInterfaceWrapper) PostAPISlotifyGroups(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPISlotifyGroups(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPISlotifyGroupsMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPISlotifyGroupsMe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPISlotifyGroupsMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAPISlotifyGroupsSlotifyGroupID operation middleware
func (siw *ServerInterfaceWrapper) DeleteAPISlotifyGroupsSlotifyGroupID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "slotifyGroupID" -------------
	var slotifyGroupID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "slotifyGroupID", mux.Vars(r)["slotifyGroupID"], &slotifyGroupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slotifyGroupID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAPISlotifyGroupsSlotifyGroupID(w, r, slotifyGroupID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPISlotifyGroupsSlotifyGroupID operation middleware
func (siw *ServerInterfaceWrapper) GetAPISlotifyGroupsSlotifyGroupID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "slotifyGroupID" -------------
	var slotifyGroupID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "slotifyGroupID", mux.Vars(r)["slotifyGroupID"], &slotifyGroupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slotifyGroupID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPISlotifyGroupsSlotifyGroupID(w, r, slotifyGroupID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPISlotifyGroupsSlotifyGroupIDInvites operation middleware
func (siw *ServerInterfaceWrapper) GetAPISlotifyGroupsSlotifyGroupIDInvites(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "slotifyGroupID" -------------
	var slotifyGroupID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "slotifyGroupID", mux.Vars(r)["slotifyGroupID"], &slotifyGroupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slotifyGroupID", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPISlotifyGroupsSlotifyGroupIDInvitesParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPISlotifyGroupsSlotifyGroupIDInvites(w, r, slotifyGroupID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteSlotifyGroupsSlotifyGroupIDLeaveMe operation middleware
func (siw *ServerInterfaceWrapper) DeleteSlotifyGroupsSlotifyGroupIDLeaveMe(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "slotifyGroupID" -------------
	var slotifyGroupID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "slotifyGroupID", mux.Vars(r)["slotifyGroupID"], &slotifyGroupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slotifyGroupID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSlotifyGroupsSlotifyGroupIDLeaveMe(w, r, slotifyGroupID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPISlotifyGroupsSlotifyGroupIDUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAPISlotifyGroupsSlotifyGroupIDUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "slotifyGroupID" -------------
	var slotifyGroupID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "slotifyGroupID", mux.Vars(r)["slotifyGroupID"], &slotifyGroupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slotifyGroupID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPISlotifyGroupsSlotifyGroupIDUsers(w, r, slotifyGroupID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAPIUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIUsersParams

	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", r.URL.Query(), &params.Email)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "email", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIUsers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIUsers operation middleware
func (siw *ServerInterfaceWrapper) PostAPIUsers(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIUsersMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPIUsersMe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIUsersMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIUsersMeLogout operation middleware
func (siw *ServerInterfaceWrapper) PostAPIUsersMeLogout(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIUsersMeLogout(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIUsersMeNotifications operation middleware
func (siw *ServerInterfaceWrapper) GetAPIUsersMeNotifications(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIUsersMeNotifications(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAPIUsersUserID operation middleware
func (siw *ServerInterfaceWrapper) DeleteAPIUsersUserID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userID" -------------
	var userID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "userID", mux.Vars(r)["userID"], &userID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAPIUsersUserID(w, r, userID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIUsersUserID operation middleware
func (siw *ServerInterfaceWrapper) GetAPIUsersUserID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userID" -------------
	var userID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "userID", mux.Vars(r)["userID"], &userID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIUsersUserID(w, r, userID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/api/auth/callback", wrapper.GetAPIAuthCallback).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/calendar/event", wrapper.GetAPICalendarEvent).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/calendar/me", wrapper.GetAPICalendarMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/calendar/me", wrapper.PostAPICalendarMe).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/calendar/{userID}", wrapper.GetAPICalendarUserID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/events", wrapper.RenderEvent).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/healthcheck", wrapper.GetAPIHealthcheck).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/invites", wrapper.PostAPIInvites).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/invites/me", wrapper.GetAPIInvitesMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/invites/{inviteID}", wrapper.DeleteAPIInvitesInviteID).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/invites/{inviteID}", wrapper.PatchAPIInvitesInviteID).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/api/invites/{inviteID}/accept", wrapper.PatchAPIInvitesInviteIDAccept).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/api/invites/{inviteID}/decline", wrapper.PatchAPIInvitesInviteIDDecline).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/api/msft-groups", wrapper.GetAPIMSFTGroups).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/msft-groups/me", wrapper.GetAPIMSFTGroupsMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/msft-groups/{groupID}", wrapper.GetAPIMSFTGroupsGroupID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/msft-groups/{groupID}/users", wrapper.GetAPIMSFTGroupsGroupIDUsers).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/msft-users", wrapper.GetAPIMSFTUsers).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/msft-users/search", wrapper.GetAPIMSFTUsersSearch).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/notifications/{notificationID}/read", wrapper.PatchAPINotificationsNotificationIDRead).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/api/refresh", wrapper.PostAPIRefresh).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/reschedule/check", wrapper.PostAPIRescheduleCheck).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/reschedule/request/replace", wrapper.PostAPIRescheduleRequestReplace).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/reschedule/request/single", wrapper.PostAPIRescheduleRequestSingle).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/reschedule/request/{requestID}", wrapper.GetAPIRescheduleRequestRequestID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/reschedule/request/{requestID}/accept", wrapper.PatchAPIRescheduleRequestRequestIDAccept).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/api/reschedule/request/{requestID}/reject", wrapper.PatchAPIRescheduleRequestRequestIDReject).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/api/reschedule/requests/me", wrapper.GetAPIRescheduleRequestsMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/rooms/all", wrapper.GetAPIRoomsAll).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/scheduling/slots", wrapper.PostAPISchedulingSlots).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups", wrapper.PostAPISlotifyGroups).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups/me", wrapper.GetAPISlotifyGroupsMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups/{slotifyGroupID}", wrapper.DeleteAPISlotifyGroupsSlotifyGroupID).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups/{slotifyGroupID}", wrapper.GetAPISlotifyGroupsSlotifyGroupID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups/{slotifyGroupID}/invites", wrapper.GetAPISlotifyGroupsSlotifyGroupIDInvites).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups/{slotifyGroupID}/leave/me", wrapper.DeleteSlotifyGroupsSlotifyGroupIDLeaveMe).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups/{slotifyGroupID}/users", wrapper.GetAPISlotifyGroupsSlotifyGroupIDUsers).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/users", wrapper.GetAPIUsers).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/users", wrapper.PostAPIUsers).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/users/me", wrapper.GetAPIUsersMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/users/me/logout", wrapper.PostAPIUsersMeLogout).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/users/me/notifications", wrapper.GetAPIUsersMeNotifications).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/users/{userID}", wrapper.DeleteAPIUsersUserID).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/users/{userID}", wrapper.GetAPIUsersUserID).Methods("GET")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/l8AAAD//xhu0V0xsAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
