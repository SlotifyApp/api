// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Team defines model for Team.
type Team struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

// TeamCreate defines model for TeamCreate.
type TeamCreate struct {
	Name string `json:"name"`
}

// User defines model for User.
type User struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	Id        int                 `json:"id"`
	LastName  string              `json:"lastName"`
}

// UserCreate defines model for UserCreate.
type UserCreate struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	LastName  string              `json:"lastName"`
}

// GetTeamsParams defines parameters for GetTeams.
type GetTeamsParams struct {
	// Name Team name
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// Email Email of user
	Email *openapi_types.Email `form:"email,omitempty" json:"email,omitempty"`

	// FirstName First name of user
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty"`

	// LastName Last name of user
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty"`
}

// PostTeamsJSONRequestBody defines body for PostTeams for application/json ContentType.
type PostTeamsJSONRequestBody = TeamCreate

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = UserCreate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Healthcheck route
	// (GET /healthcheck)
	GetHealthcheck(w http.ResponseWriter, r *http.Request)
	// Get a team by query params
	// (GET /teams)
	GetTeams(w http.ResponseWriter, r *http.Request, params GetTeamsParams)
	// Create a new team
	// (POST /teams)
	PostTeams(w http.ResponseWriter, r *http.Request)
	// Delete a team by id
	// (DELETE /teams/{teamID})
	DeleteTeamsTeamID(w http.ResponseWriter, r *http.Request, teamID int)
	// Get a team by id
	// (GET /teams/{teamID})
	GetTeamsTeamID(w http.ResponseWriter, r *http.Request, teamID int)
	// Get all members of a team
	// (GET /teams/{teamID}/users)
	GetTeamsTeamIDUsers(w http.ResponseWriter, r *http.Request, teamID int)
	// Add a user to a team
	// (POST /teams/{teamID}/users/{userID})
	PostTeamsTeamIDUsersUserID(w http.ResponseWriter, r *http.Request, teamID int, userID int)
	// Get a user by query params
	// (GET /users)
	GetUsers(w http.ResponseWriter, r *http.Request, params GetUsersParams)
	// Create a new user
	// (POST /users)
	PostUsers(w http.ResponseWriter, r *http.Request)
	// Delete a user by id
	// (DELETE /users/{userID})
	DeleteUsersUserID(w http.ResponseWriter, r *http.Request, userID int)
	// Get a user by id
	// (GET /users/{userID})
	GetUsersUserID(w http.ResponseWriter, r *http.Request, userID int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetHealthcheck operation middleware
func (siw *ServerInterfaceWrapper) GetHealthcheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealthcheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTeams operation middleware
func (siw *ServerInterfaceWrapper) GetTeams(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTeamsParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTeams(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostTeams operation middleware
func (siw *ServerInterfaceWrapper) PostTeams(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostTeams(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteTeamsTeamID operation middleware
func (siw *ServerInterfaceWrapper) DeleteTeamsTeamID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "teamID" -------------
	var teamID int

	err = runtime.BindStyledParameterWithOptions("simple", "teamID", mux.Vars(r)["teamID"], &teamID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "teamID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTeamsTeamID(w, r, teamID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTeamsTeamID operation middleware
func (siw *ServerInterfaceWrapper) GetTeamsTeamID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "teamID" -------------
	var teamID int

	err = runtime.BindStyledParameterWithOptions("simple", "teamID", mux.Vars(r)["teamID"], &teamID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "teamID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTeamsTeamID(w, r, teamID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTeamsTeamIDUsers operation middleware
func (siw *ServerInterfaceWrapper) GetTeamsTeamIDUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "teamID" -------------
	var teamID int

	err = runtime.BindStyledParameterWithOptions("simple", "teamID", mux.Vars(r)["teamID"], &teamID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "teamID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTeamsTeamIDUsers(w, r, teamID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostTeamsTeamIDUsersUserID operation middleware
func (siw *ServerInterfaceWrapper) PostTeamsTeamIDUsersUserID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "teamID" -------------
	var teamID int

	err = runtime.BindStyledParameterWithOptions("simple", "teamID", mux.Vars(r)["teamID"], &teamID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "teamID", Err: err})
		return
	}

	// ------------- Path parameter "userID" -------------
	var userID int

	err = runtime.BindStyledParameterWithOptions("simple", "userID", mux.Vars(r)["userID"], &userID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostTeamsTeamIDUsersUserID(w, r, teamID, userID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams

	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", r.URL.Query(), &params.Email)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "email", Err: err})
		return
	}

	// ------------- Optional query parameter "firstName" -------------

	err = runtime.BindQueryParameter("form", true, false, "firstName", r.URL.Query(), &params.FirstName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "firstName", Err: err})
		return
	}

	// ------------- Optional query parameter "lastName" -------------

	err = runtime.BindQueryParameter("form", true, false, "lastName", r.URL.Query(), &params.LastName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "lastName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostUsers operation middleware
func (siw *ServerInterfaceWrapper) PostUsers(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUsersUserID operation middleware
func (siw *ServerInterfaceWrapper) DeleteUsersUserID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userID" -------------
	var userID int

	err = runtime.BindStyledParameterWithOptions("simple", "userID", mux.Vars(r)["userID"], &userID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUsersUserID(w, r, userID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUsersUserID operation middleware
func (siw *ServerInterfaceWrapper) GetUsersUserID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userID" -------------
	var userID int

	err = runtime.BindStyledParameterWithOptions("simple", "userID", mux.Vars(r)["userID"], &userID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsersUserID(w, r, userID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/healthcheck", wrapper.GetHealthcheck).Methods("GET")

	r.HandleFunc(options.BaseURL+"/teams", wrapper.GetTeams).Methods("GET")

	r.HandleFunc(options.BaseURL+"/teams", wrapper.PostTeams).Methods("POST")

	r.HandleFunc(options.BaseURL+"/teams/{teamID}", wrapper.DeleteTeamsTeamID).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/teams/{teamID}", wrapper.GetTeamsTeamID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/teams/{teamID}/users", wrapper.GetTeamsTeamIDUsers).Methods("GET")

	r.HandleFunc(options.BaseURL+"/teams/{teamID}/users/{userID}", wrapper.PostTeamsTeamIDUsersUserID).Methods("POST")

	r.HandleFunc(options.BaseURL+"/users", wrapper.GetUsers).Methods("GET")

	r.HandleFunc(options.BaseURL+"/users", wrapper.PostUsers).Methods("POST")

	r.HandleFunc(options.BaseURL+"/users/{userID}", wrapper.DeleteUsersUserID).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/users/{userID}", wrapper.GetUsersUserID).Methods("GET")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RYTW/cNhD9KwTbQwMIK7vNSbe4bt0FiiBA7VOQAy2NdumIpEJSaRcL/fdiRpJXWkkr",
	"7Udi5xJtJHK+3pshn7c8Nio3GrR3PNpyF69BCfp5D0LhM7cmB+sl0FuZ4L9KaqkKxaPrgPtNDjziUntY",
	"geVlwLVQgKvqL85bqVe8LANu4UshLSQ8+oiW6qWfno2YxyeIPdpA779bEB76McyzP2r6wYHtGwUlZIY/",
	"UmOV8Dyq3wT7bgKeSuv8++EgglkVysSogaEqNZHsHLdMjKU4Vr2LJTo/iSPjx+1Sp4YMS5/ht38y42W6",
	"YTci/gw6Ye8+LHnAv4J10mge8evF1eIKozI5aJFLHvHf6FXAc+HXlHm4BpH5dbyG+DP+fwUeH1gc4aXR",
	"y4RH/A78X61lmIjLjXZV8X69usJHbLQHTbtFnmcypv3hk8NYmi4aqksZ8ARcbGXuq7hbvpgr4hicS4uM",
	"KugKpYTd7C2ypvBA30MPQrlDidzTAqyAFQo8WMejj9u9CHAR0xUoEl98KcBumt6MeP1pPKdPZ9ZIeqjS",
	"+NlCyiP+U7ibSWE9kEKaRuUzVYS1YjNUT0qZKeHjtdQr5tfAKB/WqkEZ8LdVjN29NyJhSFtwnv0Ci9Ui",
	"YFJ/FZlMmG+K9GYPmjvwTFSfHzdtV+QmN24AmQ/GPUNT+7sxyeaook3Vqu7+stuK3hZQ9uC6vqjnMVRY",
	"TCElLZpnm4tiUeXMBNPwL61qtUm4xcfytqxcZVCNxi4wt/SeoLmn1VO9875QYGXMlrfMpEQ2Cs4bVruo",
	"WwpH0K6jfGO7C0y7xw4dH2c33ORQqupQV/oicMnkTbX3bX9vNYCMZ6kpdLKHaRVKq8VkgoYOTrxzsUPj",
	"rxK4U1rvzvjXgGN3TspkqDXDwhFU2znwPtDaCYy72L5OUGcdf3RnnXH8UVU6UDdonAj48nYccHTGjK0H",
	"8iHgs4wpUI8Ym0lrHowzINzio57VE0doiwwPtGk+JdDJMCWKxtKJlAh+RB52VYIC58SKzkj4T6icLuEE",
	"eIdcT0ZqPCjqzBZ9FVEOXu8HiNSxK5IEzZpdzU4gMMJI491eiMvvkoSJyqw3HRpPTq5Z4+oP1EnIlDY1",
	"967jjZbaATel4/p0/BN1GF2hJpy1Bdv4/aFn/28xz/yzBnxxeXHcfP028oLoOXBoEt+OEhcN2b6FuGj9",
	"aeE7i4sKo5HpcVFx0UeiIy2KKpCm7TvH1WFpccQ51b+eNnPnkLQ49+T6btKi2B/5Zwz4iak+KS2aBjss",
	"LS6C3ai0eGngTmk8lBYXwXHe6XxYWrRBLMvy/wAAAP///E7OG9kWAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
