// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AttendeeResponseStatus.
const (
	AttendeeResponseStatusAccepted           AttendeeResponseStatus = "accepted"
	AttendeeResponseStatusDeclined           AttendeeResponseStatus = "declined"
	AttendeeResponseStatusEntativelyAccepted AttendeeResponseStatus = "entativelyAccepted"
	AttendeeResponseStatusNone               AttendeeResponseStatus = "none"
	AttendeeResponseStatusNotResponded       AttendeeResponseStatus = "notResponded"
	AttendeeResponseStatusOrganizer          AttendeeResponseStatus = "organizer"
)

// Defines values for AttendeeType.
const (
	Optional AttendeeType = "optional"
	Required AttendeeType = "required"
	Resource AttendeeType = "resource"
)

// Defines values for EmptySuggestionsReason.
const (
	EmptySuggestionsReasonAttendeesUnavailable          EmptySuggestionsReason = "attendeesUnavailable"
	EmptySuggestionsReasonAttendeesUnavailableOrUnknown EmptySuggestionsReason = "attendeesUnavailableOrUnknown"
	EmptySuggestionsReasonLocationsUnavailable          EmptySuggestionsReason = "locationsUnavailable"
	EmptySuggestionsReasonOrganizerUnavailable          EmptySuggestionsReason = "organizerUnavailable"
	EmptySuggestionsReasonUnknown                       EmptySuggestionsReason = "unknown"
)

// Defines values for FreeBusyStatus.
const (
	FreeBusyStatusBusy             FreeBusyStatus = "busy"
	FreeBusyStatusFree             FreeBusyStatus = "free"
	FreeBusyStatusOof              FreeBusyStatus = "oof"
	FreeBusyStatusTentative        FreeBusyStatus = "tentative"
	FreeBusyStatusUnknown          FreeBusyStatus = "unknown"
	FreeBusyStatusWorkingElsewhere FreeBusyStatus = "workingElsewhere"
)

// Defines values for InviteStatus.
const (
	InviteStatusAccepted InviteStatus = "accepted"
	InviteStatusDeclined InviteStatus = "declined"
	InviteStatusExpired  InviteStatus = "expired"
	InviteStatusPending  InviteStatus = "pending"
)

// Defines values for LocationRoomType.
const (
	BusinessAddress LocationRoomType = "businessAddress"
	ConferenceRoom  LocationRoomType = "conferenceRoom"
	Default         LocationRoomType = "default"
	GeoCoordinates  LocationRoomType = "geoCoordinates"
	HomeAddress     LocationRoomType = "homeAddress"
	Hotel           LocationRoomType = "hotel"
	LocalBusiness   LocationRoomType = "localBusiness"
	PostalAddress   LocationRoomType = "postalAddress"
	Restaurant      LocationRoomType = "restaurant"
	StreetAddress   LocationRoomType = "streetAddress"
)

// Attendee Maps roughly to [MSFT Attendee](https://learn.microsoft.com/en-us/graph/api/resources/attendee?view=graph-rest-1.0#properties)
type Attendee struct {
	// AttendeeType Maps directly to [MSFT Attendee->type](https://learn.microsoft.com/en-us/graph/api/resources/attendee?view=graph-rest-1.0)
	AttendeeType   *AttendeeType           `json:"attendeeType,omitempty"`
	Email          *openapi_types.Email    `json:"email"`
	ResponseStatus *AttendeeResponseStatus `json:"responseStatus"`
}

// AttendeeResponseStatus defines model for Attendee.ResponseStatus.
type AttendeeResponseStatus string

// AttendeeAvailability Maps roughly to [MSFT attendeeAvailability](https://learn.microsoft.com/en-us/graph/api/resources/attendeeavailability?view=graph-rest-1.0)
type AttendeeAvailability struct {
	// Attendee directly maps to [MSFT attendeeBase](https://learn.microsoft.com/en-us/graph/api/resources/attendeebase?view=graph-rest-1.0)
	Attendee AttendeeBase `json:"attendee"`

	// Availability Maps directly to [MSFT freebusyStatus](https://learn.microsoft.com/en-us/graph/api/resources/attendeeavailability?view=graph-rest-1.0)
	Availability FreeBusyStatus `json:"availability"`
}

// AttendeeBase directly maps to [MSFT attendeeBase](https://learn.microsoft.com/en-us/graph/api/resources/attendeebase?view=graph-rest-1.0)
type AttendeeBase struct {
	// AttendeeType Maps directly to [MSFT Attendee->type](https://learn.microsoft.com/en-us/graph/api/resources/attendee?view=graph-rest-1.0)
	AttendeeType AttendeeType `json:"attendeeType"`

	// EmailAddress directly maps to MSFT Email Address, see info here:[MSFT EmailAddress Struct Docs](https://learn.microsoft.com/en-us/graph/api/resources/emailaddress?view=graph-rest-1.0)
	EmailAddress EmailAddress `json:"emailAddress"`
}

// AttendeeType Maps directly to [MSFT Attendee->type](https://learn.microsoft.com/en-us/graph/api/resources/attendee?view=graph-rest-1.0)
type AttendeeType string

// CalendarEvent Maps roughly to [MSFT event](https://learn.microsoft.com/en-us/graph/api/resources/event?view=graph-rest-1.0#properties)
type CalendarEvent struct {
	Attendees   []Attendee `json:"attendees"`
	Body        *string    `json:"body,omitempty"`
	Created     *time.Time `json:"created,omitempty"`
	EndTime     *string    `json:"endTime"`
	Id          *string    `json:"id,omitempty"`
	IsCancelled *bool      `json:"isCancelled,omitempty"`

	// JoinURL Maps roughly to [MSFT OnlineMeetingInfo->joinURL](https://learn.microsoft.com/en-us/graph/api/resources/onlinemeetinginfo?view=graph-rest-1.0#json-representation)
	JoinURL   *string    `json:"joinURL"`
	Locations []Location `json:"locations"`

	// Organizer Maps roughly to [MSFT Recipient->emailAddress](https://learn.microsoft.com/en-us/graph/api/resources/recipient?view=graph-rest-1.0)
	Organizer *openapi_types.Email `json:"organizer,omitempty"`
	StartTime *string              `json:"startTime"`
	Subject   *string              `json:"subject,omitempty"`
	WebLink   *string              `json:"webLink,omitempty"`
}

// EmailAddress directly maps to MSFT Email Address, see info here:[MSFT EmailAddress Struct Docs](https://learn.microsoft.com/en-us/graph/api/resources/emailaddress?view=graph-rest-1.0)
type EmailAddress struct {
	Address openapi_types.Email `json:"address"`
	Name    string              `json:"name"`
}

// EmptySuggestionsReason Maps directly to [MSFT emptySuggestionsReason](https://learn.microsoft.com/en-us/graph/api/resources/meetingtimesuggestionsresult?view=graph-rest-1.0)
type EmptySuggestionsReason string

// FreeBusyStatus Maps directly to [MSFT freebusyStatus](https://learn.microsoft.com/en-us/graph/api/resources/attendeeavailability?view=graph-rest-1.0)
type FreeBusyStatus string

// InviteCreate Invite create request body
type InviteCreate struct {
	CreatedAt      time.Time           `json:"createdAt"`
	ExpiryDate     *openapi_types.Date `json:"expiryDate,omitempty"`
	Message        string              `json:"message"`
	SlotifyGroupID uint32              `json:"slotifyGroupID"`
	ToUserID       uint32              `json:"toUserID"`
}

// InviteStatus Invite status
type InviteStatus string

// InvitesGroup References a Slotify Invite For a Group
type InvitesGroup struct {
	CreatedAt         time.Time           `json:"createdAt"`
	ExpiryDate        *openapi_types.Date `json:"expiryDate,omitempty"`
	FromUserEmail     openapi_types.Email `json:"fromUserEmail"`
	FromUserFirstName string              `json:"fromUserFirstName"`
	FromUserLastName  string              `json:"fromUserLastName"`
	InviteID          uint32              `json:"inviteID"`
	Message           string              `json:"message"`

	// Status Invite status
	Status          InviteStatus        `json:"status"`
	ToUserEmail     openapi_types.Email `json:"toUserEmail"`
	ToUserFirstName string              `json:"toUserFirstName"`
	ToUserLastName  string              `json:"toUserLastName"`
}

// InvitesMe References a Slotify Invite
type InvitesMe struct {
	CreatedAt  time.Time           `json:"createdAt"`
	ExpiryDate *openapi_types.Date `json:"expiryDate,omitempty"`

	// FromUserEmail from user email
	FromUserEmail openapi_types.Email `json:"fromUserEmail"`

	// FromUserFirstName from user first name
	FromUserFirstName string `json:"fromUserFirstName"`

	// FromUserLastName from user last name
	FromUserLastName string `json:"fromUserLastName"`
	InviteID         uint32 `json:"inviteID"`

	// Message invite message
	Message string `json:"message"`

	// SlotifyGroupName slotify group name
	SlotifyGroupName string `json:"slotifyGroupName"`

	// Status Invite status
	Status InviteStatus `json:"status"`
}

// Location Maps roughly to [MSFT Location](https://learn.microsoft.com/en-us/graph/api/resources/location?view=graph-rest-1.0)
type Location struct {
	Id       *string           `json:"id,omitempty"`
	Name     *string           `json:"name,omitempty"`
	RoomType *LocationRoomType `json:"roomType"`
	Street   *string           `json:"street"`
}

// LocationRoomType defines model for Location.RoomType.
type LocationRoomType string

// LocationConstraint Maps directly to [MSFT locationConstraint](https://learn.microsoft.com/en-us/graph/api/resources/locationconstraint?view=graph-rest-1.0)
type LocationConstraint struct {
	IsRequired      *bool                     `json:"isRequired,omitempty"`
	Locations       *[]LocationConstraintItem `json:"locations,omitempty"`
	SuggestLocation *bool                     `json:"suggestLocation,omitempty"`
}

// LocationConstraintItem Maps roughly to [MSFT locationConstraintItem](https://learn.microsoft.com/en-us/graph/api/resources/locationconstraintitem?view=graph-rest-1.0)
type LocationConstraintItem struct {
	// Address Maps directly to [MSFT physicalAddress](https://learn.microsoft.com/en-us/graph/api/resources/locationconstraintitem?view=graph-rest-1.0)
	Address              PhysicalAddress `json:"address"`
	DisplayName          string          `json:"displayName"`
	LocationEmailAddress *string         `json:"locationEmailAddress,omitempty"`
	ResolveAvailability  bool            `json:"resolveAvailability"`
}

// MeetingTimeSlot Maps directly to [MSFT meetingTimeSlot](https://learn.microsoft.com/en-us/graph/api/resources/timeslot?view=graph-rest-1.0)
type MeetingTimeSlot struct {
	End   time.Time `json:"end"`
	Start time.Time `json:"start"`
}

// MeetingTimeSuggestion Maps roughly to [MSFT meetingTimeSuggestion](https://learn.microsoft.com/en-us/graph/api/resources/meetingtimesuggestion?view=graph-rest-1.0)
type MeetingTimeSuggestion struct {
	AttendeeAvailability *[]AttendeeAvailability `json:"attendeeAvailability,omitempty"`
	Confidence           *float64                `json:"confidence,omitempty"`
	Locations            *[]Location             `json:"locations,omitempty"`

	// MeetingTimeSlot Maps directly to [MSFT meetingTimeSlot](https://learn.microsoft.com/en-us/graph/api/resources/timeslot?view=graph-rest-1.0)
	MeetingTimeSlot       *MeetingTimeSlot `json:"meetingTimeSlot,omitempty"`
	Order                 *int32           `json:"order,omitempty"`
	OrganizerAvailability *string          `json:"organizerAvailability,omitempty"`
	SuggestionReason      *string          `json:"suggestionReason,omitempty"`
}

// Notification defines model for Notification.
type Notification struct {
	Created time.Time `json:"created"`
	Id      uint32    `json:"id"`
	Message string    `json:"message"`
}

// PhysicalAddress Maps directly to [MSFT physicalAddress](https://learn.microsoft.com/en-us/graph/api/resources/locationconstraintitem?view=graph-rest-1.0)
type PhysicalAddress struct {
	// City The city.
	City *string `json:"city,omitempty"`

	// CountryOrRegion The country or region. It's a free-format string value, for example, "United States".
	CountryOrRegion *string `json:"countryOrRegion,omitempty"`

	// PostalCode The postal code.
	PostalCode *string `json:"postalCode,omitempty"`

	// State The state.
	State *string `json:"state,omitempty"`

	// Street The street.
	Street *string `json:"street,omitempty"`
}

// SchedulingSlotsBodySchema Roughly maps to [MSFT Find Meeting Schema](https://learn.microsoft.com/en-us/graph/api/user-findmeetingtimes?view=graph-rest-1.0&tabs=http#request-body)
type SchedulingSlotsBodySchema struct {
	Attendees           []AttendeeBase `json:"attendees"`
	IsOrganizerOptional bool           `json:"isOrganizerOptional"`

	// LocationConstraint Maps directly to [MSFT locationConstraint](https://learn.microsoft.com/en-us/graph/api/resources/locationconstraint?view=graph-rest-1.0)
	LocationConstraint LocationConstraint `json:"locationConstraint"`
	MaxCandidates      *int32             `json:"maxCandidates,omitempty"`

	// MeetingDuration The length of the meeting, denoted in **ISO 8601** format. - Example:
	//   - **1 hour** → `'PT1H'`
	//   - **2 hours, 30 minutes** → `'PT2H30M'`
	// - `'P'` is the duration designator. - `'T'` separates date and time components. - `'H'` (hours) and `'M'` (minutes) specify the time duration. - If omitted, the default duration is **30 minutes** (`'PT30M'`).
	MeetingDuration string `json:"meetingDuration"`

	// MeetingName custom field, this is used for the AI model
	MeetingName               string   `json:"meetingName"`
	MinimumAttendeePercentage *float64 `json:"minimumAttendeePercentage,omitempty"`

	// TimeConstraint Maps directly to [MSFT timeConstraint](https://learn.microsoft.com/en-us/graph/api/resources/timeconstraint?view=graph-rest-1.0)
	TimeConstraint TimeConstraint `json:"timeConstraint"`
}

// SchedulingSlotsSuccessResponseBody Maps roughly to [MSFT meetingTimeSuggestionsResult](https://learn.microsoft.com/en-us/graph/api/resources/meetingtimesuggestionsresult?view=graph-rest-1.0)
type SchedulingSlotsSuccessResponseBody struct {
	// EmptySuggestionsReason Maps directly to [MSFT emptySuggestionsReason](https://learn.microsoft.com/en-us/graph/api/resources/meetingtimesuggestionsresult?view=graph-rest-1.0)
	EmptySuggestionsReason *EmptySuggestionsReason  `json:"emptySuggestionsReason,omitempty"`
	MeetingTimeSuggestions *[]MeetingTimeSuggestion `json:"meetingTimeSuggestions,omitempty"`
}

// SlotifyGroup defines model for SlotifyGroup.
type SlotifyGroup struct {
	Id   uint32 `json:"id"`
	Name string `json:"name"`
}

// SlotifyGroupCreate defines model for SlotifyGroupCreate.
type SlotifyGroupCreate struct {
	Name string `json:"name"`
}

// TimeConstraint Maps directly to [MSFT timeConstraint](https://learn.microsoft.com/en-us/graph/api/resources/timeconstraint?view=graph-rest-1.0)
type TimeConstraint struct {
	ActivityDomain *string           `json:"activityDomain,omitempty"`
	TimeSlots      []MeetingTimeSlot `json:"timeSlots"`
}

// User defines model for User.
type User struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	Id        uint32              `json:"id"`
	LastName  string              `json:"lastName"`
}

// UserCreate defines model for UserCreate.
type UserCreate struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	LastName  string              `json:"lastName"`
}

// SchedulingSlotsSuccessResponse Maps roughly to [MSFT meetingTimeSuggestionsResult](https://learn.microsoft.com/en-us/graph/api/resources/meetingtimesuggestionsresult?view=graph-rest-1.0)
type SchedulingSlotsSuccessResponse = SchedulingSlotsSuccessResponseBody

// GetAPIAuthCallbackParams defines parameters for GetAPIAuthCallback.
type GetAPIAuthCallbackParams struct {
	Code  string `form:"code" json:"code"`
	State string `form:"state" json:"state"`
}

// GetAPICalendarMeParams defines parameters for GetAPICalendarMe.
type GetAPICalendarMeParams struct {
	Start time.Time `form:"start" json:"start"`
	End   time.Time `form:"end" json:"end"`
}

// GetAPIInvitesMeParams defines parameters for GetAPIInvitesMe.
type GetAPIInvitesMeParams struct {
	// Status Invite status
	Status *InviteStatus `form:"status,omitempty" json:"status,omitempty"`
}

// PatchAPIInvitesInviteIDJSONBody defines parameters for PatchAPIInvitesInviteID.
type PatchAPIInvitesInviteIDJSONBody struct {
	Message string `json:"message"`
}

// GetAPISlotifyGroupsParams defines parameters for GetAPISlotifyGroups.
type GetAPISlotifyGroupsParams struct {
	// Name SlotifyGroup name
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// GetAPISlotifyGroupsSlotifyGroupIDInvitesParams defines parameters for GetAPISlotifyGroupsSlotifyGroupIDInvites.
type GetAPISlotifyGroupsSlotifyGroupIDInvitesParams struct {
	// Status Invite status
	Status *InviteStatus `form:"status,omitempty" json:"status,omitempty"`
}

// GetAPIUsersParams defines parameters for GetAPIUsers.
type GetAPIUsersParams struct {
	// Email Email of user
	Email *openapi_types.Email `form:"email,omitempty" json:"email,omitempty"`

	// FirstName First name of user
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty"`

	// LastName Last name of user
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty"`
}

// PostAPICalendarMeJSONRequestBody defines body for PostAPICalendarMe for application/json ContentType.
type PostAPICalendarMeJSONRequestBody = CalendarEvent

// PostAPIInvitesJSONRequestBody defines body for PostAPIInvites for application/json ContentType.
type PostAPIInvitesJSONRequestBody = InviteCreate

// PatchAPIInvitesInviteIDJSONRequestBody defines body for PatchAPIInvitesInviteID for application/json ContentType.
type PatchAPIInvitesInviteIDJSONRequestBody PatchAPIInvitesInviteIDJSONBody

// PostAPISchedulingFreeJSONRequestBody defines body for PostAPISchedulingFree for application/json ContentType.
type PostAPISchedulingFreeJSONRequestBody = SchedulingSlotsBodySchema

// PostAPISlotifyGroupsJSONRequestBody defines body for PostAPISlotifyGroups for application/json ContentType.
type PostAPISlotifyGroupsJSONRequestBody = SlotifyGroupCreate

// PostAPIUsersJSONRequestBody defines body for PostAPIUsers for application/json ContentType.
type PostAPIUsersJSONRequestBody = UserCreate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Auth route for authorisation code flow.
	// (GET /api/auth/callback)
	GetAPIAuthCallback(w http.ResponseWriter, r *http.Request, params GetAPIAuthCallbackParams)
	// Get a user's calendar events for a given time range.
	// (GET /api/calendar/me)
	GetAPICalendarMe(w http.ResponseWriter, r *http.Request, params GetAPICalendarMeParams)
	// CORS preflight for creating an event
	// (OPTIONS /api/calendar/me)
	OptionsAPICalendarMe(w http.ResponseWriter, r *http.Request)
	// Create a new calendar event.
	// (POST /api/calendar/me)
	PostAPICalendarMe(w http.ResponseWriter, r *http.Request)
	// Subscribe to notifications eventstream.
	// (GET /api/events)
	RenderEvent(w http.ResponseWriter, r *http.Request)
	// Healthcheck route.
	// (GET /api/healthcheck)
	GetAPIHealthcheck(w http.ResponseWriter, r *http.Request)
	// Satisfy CORS preflight for creating invites.
	// (OPTIONS /api/invites)
	OptionsAPIInvites(w http.ResponseWriter, r *http.Request)
	// Create a new invite
	// (POST /api/invites)
	PostAPIInvites(w http.ResponseWriter, r *http.Request)
	// Get all invites for logged in user.
	// (GET /api/invites/me)
	GetAPIInvitesMe(w http.ResponseWriter, r *http.Request, params GetAPIInvitesMeParams)
	// Delete an invite
	// (DELETE /api/invites/{inviteID})
	DeleteAPIInvitesInviteID(w http.ResponseWriter, r *http.Request, inviteID uint32)
	// Satisfy CORS preflight for invites.
	// (OPTIONS /api/invites/{inviteID})
	OptionsAPIInvitesInviteID(w http.ResponseWriter, r *http.Request, inviteID uint32)
	// update a new invite with a new message
	// (PATCH /api/invites/{inviteID})
	PatchAPIInvitesInviteID(w http.ResponseWriter, r *http.Request, inviteID uint32)
	// Satisfy CORS preflight for creating invites.
	// (OPTIONS /api/invites/{inviteID}/status/{newStatus})
	OptionsAPIInvitesInviteIDStatusNewStatus(w http.ResponseWriter, r *http.Request, inviteID uint32, newStatus InviteStatus)
	// Update a new invite
	// (PATCH /api/invites/{inviteID}/status/{newStatus})
	PatchAPIInvitesInviteIDStatusNewStatus(w http.ResponseWriter, r *http.Request, inviteID uint32, newStatus InviteStatus)
	// Satisfy CORS preflight for marking a notification as read.
	// (OPTIONS /api/notifications/{notificationID}/read)
	OptionsAPINotificationsNotificationIDRead(w http.ResponseWriter, r *http.Request, notificationID uint32)
	// Mark a notification as being read.
	// (PATCH /api/notifications/{notificationID}/read)
	PatchAPINotificationsNotificationIDRead(w http.ResponseWriter, r *http.Request, notificationID uint32)
	// Refresh Slotify access token and refresh token.
	// (POST /api/refresh)
	PostAPIRefresh(w http.ResponseWriter, r *http.Request)
	// Idempotent route, just returns appropriate time slots along with their respective ratings.
	// (POST /api/scheduling/slots)
	PostAPISchedulingFree(w http.ResponseWriter, r *http.Request)
	// Get a slotifyGroup by query params.
	// (GET /api/slotify-groups)
	GetAPISlotifyGroups(w http.ResponseWriter, r *http.Request, params GetAPISlotifyGroupsParams)
	// Satisfy CORS preflight for creatingslotify-groups.
	// (OPTIONS /api/slotify-groups)
	OptionsAPISlotifyGroups(w http.ResponseWriter, r *http.Request)
	// Create a new slotifyGroup.
	// (POST /api/slotify-groups)
	PostAPISlotifyGroups(w http.ResponseWriter, r *http.Request)
	// Get all joinable slotify-groups for a user excluding slotify-groups they are already a part of.
	// (GET /api/slotify-groups/joinable/me)
	GetAPISlotifyGroupsJoinableMe(w http.ResponseWriter, r *http.Request)
	// Get all slotify-groups for current user.
	// (GET /api/slotify-groups/me)
	GetAPISlotifyGroupsMe(w http.ResponseWriter, r *http.Request)
	// Delete a slotifyGroup by id.
	// (DELETE /api/slotify-groups/{slotifyGroupID})
	DeleteAPISlotifyGroupsSlotifyGroupID(w http.ResponseWriter, r *http.Request, slotifyGroupID uint32)
	// Get a slotifyGroup by id.
	// (GET /api/slotify-groups/{slotifyGroupID})
	GetAPISlotifyGroupsSlotifyGroupID(w http.ResponseWriter, r *http.Request, slotifyGroupID uint32)
	// Get all invites for a slotify group
	// (GET /api/slotify-groups/{slotifyGroupID}/invites)
	GetAPISlotifyGroupsSlotifyGroupIDInvites(w http.ResponseWriter, r *http.Request, slotifyGroupID uint32, params GetAPISlotifyGroupsSlotifyGroupIDInvitesParams)
	// Get all members of a slotifyGroup.
	// (GET /api/slotify-groups/{slotifyGroupID}/users)
	GetAPISlotifyGroupsSlotifyGroupIDUsers(w http.ResponseWriter, r *http.Request, slotifyGroupID uint32)
	// Add current user to a slotifyGroup.
	// (POST /api/slotify-groups/{slotifyGroupID}/users/me)
	PostAPISlotifyGroupsSlotifyGroupIDUsersMe(w http.ResponseWriter, r *http.Request, slotifyGroupID uint32)
	// Add a user to a slotifyGroup.
	// (POST /api/slotify-groups/{slotifyGroupID}/users/{userID})
	PostAPISlotifyGroupsSlotifyGroupIDUsersUserID(w http.ResponseWriter, r *http.Request, slotifyGroupID uint32, userID uint32)
	// Get users by query params.
	// (GET /api/users)
	GetAPIUsers(w http.ResponseWriter, r *http.Request, params GetAPIUsersParams)
	// Create a new user.
	// (POST /api/users)
	PostAPIUsers(w http.ResponseWriter, r *http.Request)
	// Get current user's details.
	// (GET /api/users/me)
	GetAPIUsersMe(w http.ResponseWriter, r *http.Request)
	// Logout user.
	// (POST /api/users/me/logout)
	PostAPIUsersMeLogout(w http.ResponseWriter, r *http.Request)
	// Get user's unread notifications.
	// (GET /api/users/me/notifications)
	GetAPIUsersMeNotifications(w http.ResponseWriter, r *http.Request)
	// Delete a user by id.
	// (DELETE /api/users/{userID})
	DeleteAPIUsersUserID(w http.ResponseWriter, r *http.Request, userID uint32)
	// Get a user by id.
	// (GET /api/users/{userID})
	GetAPIUsersUserID(w http.ResponseWriter, r *http.Request, userID uint32)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAPIAuthCallback operation middleware
func (siw *ServerInterfaceWrapper) GetAPIAuthCallback(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIAuthCallbackParams

	// ------------- Required query parameter "code" -------------

	if paramValue := r.URL.Query().Get("code"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "code"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "code", r.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Required query parameter "state" -------------

	if paramValue := r.URL.Query().Get("state"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "state"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "state", r.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIAuthCallback(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPICalendarMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPICalendarMe(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPICalendarMeParams

	// ------------- Required query parameter "start" -------------

	if paramValue := r.URL.Query().Get("start"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "start"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "start", r.URL.Query(), &params.Start)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start", Err: err})
		return
	}

	// ------------- Required query parameter "end" -------------

	if paramValue := r.URL.Query().Get("end"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "end"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "end", r.URL.Query(), &params.End)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "end", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPICalendarMe(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OptionsAPICalendarMe operation middleware
func (siw *ServerInterfaceWrapper) OptionsAPICalendarMe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OptionsAPICalendarMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPICalendarMe operation middleware
func (siw *ServerInterfaceWrapper) PostAPICalendarMe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPICalendarMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RenderEvent operation middleware
func (siw *ServerInterfaceWrapper) RenderEvent(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RenderEvent(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIHealthcheck operation middleware
func (siw *ServerInterfaceWrapper) GetAPIHealthcheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIHealthcheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OptionsAPIInvites operation middleware
func (siw *ServerInterfaceWrapper) OptionsAPIInvites(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OptionsAPIInvites(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIInvites operation middleware
func (siw *ServerInterfaceWrapper) PostAPIInvites(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIInvites(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIInvitesMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPIInvitesMe(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIInvitesMeParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIInvitesMe(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAPIInvitesInviteID operation middleware
func (siw *ServerInterfaceWrapper) DeleteAPIInvitesInviteID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "inviteID" -------------
	var inviteID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "inviteID", mux.Vars(r)["inviteID"], &inviteID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inviteID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAPIInvitesInviteID(w, r, inviteID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OptionsAPIInvitesInviteID operation middleware
func (siw *ServerInterfaceWrapper) OptionsAPIInvitesInviteID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "inviteID" -------------
	var inviteID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "inviteID", mux.Vars(r)["inviteID"], &inviteID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inviteID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OptionsAPIInvitesInviteID(w, r, inviteID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchAPIInvitesInviteID operation middleware
func (siw *ServerInterfaceWrapper) PatchAPIInvitesInviteID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "inviteID" -------------
	var inviteID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "inviteID", mux.Vars(r)["inviteID"], &inviteID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inviteID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAPIInvitesInviteID(w, r, inviteID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OptionsAPIInvitesInviteIDStatusNewStatus operation middleware
func (siw *ServerInterfaceWrapper) OptionsAPIInvitesInviteIDStatusNewStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "inviteID" -------------
	var inviteID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "inviteID", mux.Vars(r)["inviteID"], &inviteID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inviteID", Err: err})
		return
	}

	// ------------- Path parameter "newStatus" -------------
	var newStatus InviteStatus

	err = runtime.BindStyledParameterWithOptions("simple", "newStatus", mux.Vars(r)["newStatus"], &newStatus, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "newStatus", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OptionsAPIInvitesInviteIDStatusNewStatus(w, r, inviteID, newStatus)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchAPIInvitesInviteIDStatusNewStatus operation middleware
func (siw *ServerInterfaceWrapper) PatchAPIInvitesInviteIDStatusNewStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "inviteID" -------------
	var inviteID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "inviteID", mux.Vars(r)["inviteID"], &inviteID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inviteID", Err: err})
		return
	}

	// ------------- Path parameter "newStatus" -------------
	var newStatus InviteStatus

	err = runtime.BindStyledParameterWithOptions("simple", "newStatus", mux.Vars(r)["newStatus"], &newStatus, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "newStatus", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAPIInvitesInviteIDStatusNewStatus(w, r, inviteID, newStatus)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OptionsAPINotificationsNotificationIDRead operation middleware
func (siw *ServerInterfaceWrapper) OptionsAPINotificationsNotificationIDRead(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "notificationID" -------------
	var notificationID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "notificationID", mux.Vars(r)["notificationID"], &notificationID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "notificationID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OptionsAPINotificationsNotificationIDRead(w, r, notificationID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchAPINotificationsNotificationIDRead operation middleware
func (siw *ServerInterfaceWrapper) PatchAPINotificationsNotificationIDRead(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "notificationID" -------------
	var notificationID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "notificationID", mux.Vars(r)["notificationID"], &notificationID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "notificationID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAPINotificationsNotificationIDRead(w, r, notificationID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIRefresh operation middleware
func (siw *ServerInterfaceWrapper) PostAPIRefresh(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIRefresh(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPISchedulingFree operation middleware
func (siw *ServerInterfaceWrapper) PostAPISchedulingFree(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPISchedulingFree(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPISlotifyGroups operation middleware
func (siw *ServerInterfaceWrapper) GetAPISlotifyGroups(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPISlotifyGroupsParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPISlotifyGroups(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OptionsAPISlotifyGroups operation middleware
func (siw *ServerInterfaceWrapper) OptionsAPISlotifyGroups(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OptionsAPISlotifyGroups(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPISlotifyGroups operation middleware
func (siw *ServerInterfaceWrapper) PostAPISlotifyGroups(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPISlotifyGroups(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPISlotifyGroupsJoinableMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPISlotifyGroupsJoinableMe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPISlotifyGroupsJoinableMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPISlotifyGroupsMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPISlotifyGroupsMe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPISlotifyGroupsMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAPISlotifyGroupsSlotifyGroupID operation middleware
func (siw *ServerInterfaceWrapper) DeleteAPISlotifyGroupsSlotifyGroupID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "slotifyGroupID" -------------
	var slotifyGroupID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "slotifyGroupID", mux.Vars(r)["slotifyGroupID"], &slotifyGroupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slotifyGroupID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAPISlotifyGroupsSlotifyGroupID(w, r, slotifyGroupID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPISlotifyGroupsSlotifyGroupID operation middleware
func (siw *ServerInterfaceWrapper) GetAPISlotifyGroupsSlotifyGroupID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "slotifyGroupID" -------------
	var slotifyGroupID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "slotifyGroupID", mux.Vars(r)["slotifyGroupID"], &slotifyGroupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slotifyGroupID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPISlotifyGroupsSlotifyGroupID(w, r, slotifyGroupID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPISlotifyGroupsSlotifyGroupIDInvites operation middleware
func (siw *ServerInterfaceWrapper) GetAPISlotifyGroupsSlotifyGroupIDInvites(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "slotifyGroupID" -------------
	var slotifyGroupID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "slotifyGroupID", mux.Vars(r)["slotifyGroupID"], &slotifyGroupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slotifyGroupID", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPISlotifyGroupsSlotifyGroupIDInvitesParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPISlotifyGroupsSlotifyGroupIDInvites(w, r, slotifyGroupID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPISlotifyGroupsSlotifyGroupIDUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAPISlotifyGroupsSlotifyGroupIDUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "slotifyGroupID" -------------
	var slotifyGroupID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "slotifyGroupID", mux.Vars(r)["slotifyGroupID"], &slotifyGroupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slotifyGroupID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPISlotifyGroupsSlotifyGroupIDUsers(w, r, slotifyGroupID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPISlotifyGroupsSlotifyGroupIDUsersMe operation middleware
func (siw *ServerInterfaceWrapper) PostAPISlotifyGroupsSlotifyGroupIDUsersMe(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "slotifyGroupID" -------------
	var slotifyGroupID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "slotifyGroupID", mux.Vars(r)["slotifyGroupID"], &slotifyGroupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slotifyGroupID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPISlotifyGroupsSlotifyGroupIDUsersMe(w, r, slotifyGroupID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPISlotifyGroupsSlotifyGroupIDUsersUserID operation middleware
func (siw *ServerInterfaceWrapper) PostAPISlotifyGroupsSlotifyGroupIDUsersUserID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "slotifyGroupID" -------------
	var slotifyGroupID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "slotifyGroupID", mux.Vars(r)["slotifyGroupID"], &slotifyGroupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slotifyGroupID", Err: err})
		return
	}

	// ------------- Path parameter "userID" -------------
	var userID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "userID", mux.Vars(r)["userID"], &userID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPISlotifyGroupsSlotifyGroupIDUsersUserID(w, r, slotifyGroupID, userID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAPIUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIUsersParams

	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", r.URL.Query(), &params.Email)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "email", Err: err})
		return
	}

	// ------------- Optional query parameter "firstName" -------------

	err = runtime.BindQueryParameter("form", true, false, "firstName", r.URL.Query(), &params.FirstName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "firstName", Err: err})
		return
	}

	// ------------- Optional query parameter "lastName" -------------

	err = runtime.BindQueryParameter("form", true, false, "lastName", r.URL.Query(), &params.LastName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "lastName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIUsers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIUsers operation middleware
func (siw *ServerInterfaceWrapper) PostAPIUsers(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIUsersMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPIUsersMe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIUsersMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIUsersMeLogout operation middleware
func (siw *ServerInterfaceWrapper) PostAPIUsersMeLogout(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIUsersMeLogout(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIUsersMeNotifications operation middleware
func (siw *ServerInterfaceWrapper) GetAPIUsersMeNotifications(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIUsersMeNotifications(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAPIUsersUserID operation middleware
func (siw *ServerInterfaceWrapper) DeleteAPIUsersUserID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userID" -------------
	var userID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "userID", mux.Vars(r)["userID"], &userID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAPIUsersUserID(w, r, userID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIUsersUserID operation middleware
func (siw *ServerInterfaceWrapper) GetAPIUsersUserID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userID" -------------
	var userID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "userID", mux.Vars(r)["userID"], &userID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIUsersUserID(w, r, userID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/api/auth/callback", wrapper.GetAPIAuthCallback).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/calendar/me", wrapper.GetAPICalendarMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/calendar/me", wrapper.OptionsAPICalendarMe).Methods("OPTIONS")

	r.HandleFunc(options.BaseURL+"/api/calendar/me", wrapper.PostAPICalendarMe).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/events", wrapper.RenderEvent).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/healthcheck", wrapper.GetAPIHealthcheck).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/invites", wrapper.OptionsAPIInvites).Methods("OPTIONS")

	r.HandleFunc(options.BaseURL+"/api/invites", wrapper.PostAPIInvites).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/invites/me", wrapper.GetAPIInvitesMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/invites/{inviteID}", wrapper.DeleteAPIInvitesInviteID).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/invites/{inviteID}", wrapper.OptionsAPIInvitesInviteID).Methods("OPTIONS")

	r.HandleFunc(options.BaseURL+"/api/invites/{inviteID}", wrapper.PatchAPIInvitesInviteID).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/api/invites/{inviteID}/status/{newStatus}", wrapper.OptionsAPIInvitesInviteIDStatusNewStatus).Methods("OPTIONS")

	r.HandleFunc(options.BaseURL+"/api/invites/{inviteID}/status/{newStatus}", wrapper.PatchAPIInvitesInviteIDStatusNewStatus).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/api/notifications/{notificationID}/read", wrapper.OptionsAPINotificationsNotificationIDRead).Methods("OPTIONS")

	r.HandleFunc(options.BaseURL+"/api/notifications/{notificationID}/read", wrapper.PatchAPINotificationsNotificationIDRead).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/api/refresh", wrapper.PostAPIRefresh).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/scheduling/slots", wrapper.PostAPISchedulingFree).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups", wrapper.GetAPISlotifyGroups).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups", wrapper.OptionsAPISlotifyGroups).Methods("OPTIONS")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups", wrapper.PostAPISlotifyGroups).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups/joinable/me", wrapper.GetAPISlotifyGroupsJoinableMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups/me", wrapper.GetAPISlotifyGroupsMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups/{slotifyGroupID}", wrapper.DeleteAPISlotifyGroupsSlotifyGroupID).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups/{slotifyGroupID}", wrapper.GetAPISlotifyGroupsSlotifyGroupID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups/{slotifyGroupID}/invites", wrapper.GetAPISlotifyGroupsSlotifyGroupIDInvites).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups/{slotifyGroupID}/users", wrapper.GetAPISlotifyGroupsSlotifyGroupIDUsers).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups/{slotifyGroupID}/users/me", wrapper.PostAPISlotifyGroupsSlotifyGroupIDUsersMe).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups/{slotifyGroupID}/users/{userID}", wrapper.PostAPISlotifyGroupsSlotifyGroupIDUsersUserID).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/users", wrapper.GetAPIUsers).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/users", wrapper.PostAPIUsers).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/users/me", wrapper.GetAPIUsersMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/users/me/logout", wrapper.PostAPIUsersMeLogout).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/users/me/notifications", wrapper.GetAPIUsersMeNotifications).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/users/{userID}", wrapper.DeleteAPIUsersUserID).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/users/{userID}", wrapper.GetAPIUsersUserID).Methods("GET")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
