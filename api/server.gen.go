// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AttendeeResponseStatus.
const (
	AttendeeResponseStatusAccepted           AttendeeResponseStatus = "accepted"
	AttendeeResponseStatusDeclined           AttendeeResponseStatus = "declined"
	AttendeeResponseStatusEntativelyAccepted AttendeeResponseStatus = "entativelyAccepted"
	AttendeeResponseStatusNone               AttendeeResponseStatus = "none"
	AttendeeResponseStatusNotResponded       AttendeeResponseStatus = "notResponded"
	AttendeeResponseStatusOrganizer          AttendeeResponseStatus = "organizer"
)

// Defines values for AttendeeType.
const (
	Optional AttendeeType = "optional"
	Required AttendeeType = "required"
	Resource AttendeeType = "resource"
)

// Defines values for EmptySuggestionsReason.
const (
	EmptySuggestionsReasonAttendeesUnavailable          EmptySuggestionsReason = "attendeesUnavailable"
	EmptySuggestionsReasonAttendeesUnavailableOrUnknown EmptySuggestionsReason = "attendeesUnavailableOrUnknown"
	EmptySuggestionsReasonLocationsUnavailable          EmptySuggestionsReason = "locationsUnavailable"
	EmptySuggestionsReasonOrganizerUnavailable          EmptySuggestionsReason = "organizerUnavailable"
	EmptySuggestionsReasonUnknown                       EmptySuggestionsReason = "unknown"
)

// Defines values for FreeBusyStatus.
const (
	FreeBusyStatusBusy             FreeBusyStatus = "busy"
	FreeBusyStatusFree             FreeBusyStatus = "free"
	FreeBusyStatusOof              FreeBusyStatus = "oof"
	FreeBusyStatusTentative        FreeBusyStatus = "tentative"
	FreeBusyStatusUnknown          FreeBusyStatus = "unknown"
	FreeBusyStatusWorkingElsewhere FreeBusyStatus = "workingElsewhere"
)

// Defines values for InviteStatus.
const (
	InviteStatusAccepted InviteStatus = "accepted"
	InviteStatusDeclined InviteStatus = "declined"
	InviteStatusExpired  InviteStatus = "expired"
	InviteStatusPending  InviteStatus = "pending"
)

// Defines values for LocationRoomType.
const (
	BusinessAddress LocationRoomType = "businessAddress"
	ConferenceRoom  LocationRoomType = "conferenceRoom"
	Default         LocationRoomType = "default"
	GeoCoordinates  LocationRoomType = "geoCoordinates"
	HomeAddress     LocationRoomType = "homeAddress"
	Hotel           LocationRoomType = "hotel"
	LocalBusiness   LocationRoomType = "localBusiness"
	PostalAddress   LocationRoomType = "postalAddress"
	Restaurant      LocationRoomType = "restaurant"
	StreetAddress   LocationRoomType = "streetAddress"
)

// Attendee Maps roughly to [MSFT Attendee](https://learn.microsoft.com/en-us/graph/api/resources/attendee?view=graph-rest-1.0#properties)
type Attendee struct {
	// AttendeeType Maps directly to [MSFT Attendee->type](https://learn.microsoft.com/en-us/graph/api/resources/attendee?view=graph-rest-1.0)
	AttendeeType   *AttendeeType           `json:"attendeeType,omitempty"`
	Email          openapi_types.Email     `json:"email"`
	ResponseStatus *AttendeeResponseStatus `json:"responseStatus"`
}

// AttendeeResponseStatus defines model for Attendee.ResponseStatus.
type AttendeeResponseStatus string

// AttendeeAvailability Maps roughly to [MSFT attendeeAvailability](https://learn.microsoft.com/en-us/graph/api/resources/attendeeavailability?view=graph-rest-1.0)
type AttendeeAvailability struct {
	// Attendee directly maps to [MSFT attendeeBase](https://learn.microsoft.com/en-us/graph/api/resources/attendeebase?view=graph-rest-1.0)
	Attendee AttendeeBase `json:"attendee"`

	// Availability Maps directly to [MSFT freebusyStatus](https://learn.microsoft.com/en-us/graph/api/resources/attendeeavailability?view=graph-rest-1.0)
	Availability FreeBusyStatus `json:"availability"`
}

// AttendeeBase directly maps to [MSFT attendeeBase](https://learn.microsoft.com/en-us/graph/api/resources/attendeebase?view=graph-rest-1.0)
type AttendeeBase struct {
	// AttendeeType Maps directly to [MSFT Attendee->type](https://learn.microsoft.com/en-us/graph/api/resources/attendee?view=graph-rest-1.0)
	AttendeeType AttendeeType `json:"attendeeType"`

	// EmailAddress directly maps to MSFT Email Address, see info here:[MSFT EmailAddress Struct Docs](https://learn.microsoft.com/en-us/graph/api/resources/emailaddress?view=graph-rest-1.0)
	EmailAddress EmailAddress `json:"emailAddress"`
}

// AttendeeType Maps directly to [MSFT Attendee->type](https://learn.microsoft.com/en-us/graph/api/resources/attendee?view=graph-rest-1.0)
type AttendeeType string

// CalendarEvent Maps roughly to [MSFT event](https://learn.microsoft.com/en-us/graph/api/resources/event?view=graph-rest-1.0#properties)
type CalendarEvent struct {
	Attendees   []Attendee `json:"attendees"`
	Body        *string    `json:"body,omitempty"`
	Created     *time.Time `json:"created,omitempty"`
	EndTime     *string    `json:"endTime"`
	Id          *string    `json:"id,omitempty"`
	IsCancelled *bool      `json:"isCancelled,omitempty"`

	// JoinURL Maps roughly to [MSFT OnlineMeetingInfo->joinURL](https://learn.microsoft.com/en-us/graph/api/resources/onlinemeetinginfo?view=graph-rest-1.0#json-representation)
	JoinURL   *string    `json:"joinURL"`
	Locations []Location `json:"locations"`

	// Organizer Maps roughly to [MSFT Recipient->emailAddress](https://learn.microsoft.com/en-us/graph/api/resources/recipient?view=graph-rest-1.0)
	Organizer *openapi_types.Email `json:"organizer,omitempty"`
	StartTime *string              `json:"startTime"`
	Subject   *string              `json:"subject,omitempty"`
	WebLink   *string              `json:"webLink,omitempty"`
}

// EmailAddress directly maps to MSFT Email Address, see info here:[MSFT EmailAddress Struct Docs](https://learn.microsoft.com/en-us/graph/api/resources/emailaddress?view=graph-rest-1.0)
type EmailAddress struct {
	Address openapi_types.Email `json:"address"`
	Name    string              `json:"name"`
}

// EmptySuggestionsReason Maps directly to [MSFT emptySuggestionsReason](https://learn.microsoft.com/en-us/graph/api/resources/meetingtimesuggestionsresult?view=graph-rest-1.0)
type EmptySuggestionsReason string

// FreeBusyStatus Maps directly to [MSFT freebusyStatus](https://learn.microsoft.com/en-us/graph/api/resources/attendeeavailability?view=graph-rest-1.0)
type FreeBusyStatus string

// InviteCreate Invite create request body
type InviteCreate struct {
	CreatedAt      time.Time          `json:"createdAt"`
	ExpiryDate     openapi_types.Date `json:"expiryDate"`
	Message        string             `json:"message"`
	SlotifyGroupID uint32             `json:"slotifyGroupID"`
	ToUserID       uint32             `json:"toUserID"`
}

// InviteStatus Invite status
type InviteStatus string

// InvitesGroup References a Slotify Invite For a Group
type InvitesGroup struct {
	CreatedAt         time.Time           `json:"createdAt"`
	ExpiryDate        openapi_types.Date  `json:"expiryDate"`
	FromUserEmail     openapi_types.Email `json:"fromUserEmail"`
	FromUserFirstName string              `json:"fromUserFirstName"`
	FromUserLastName  string              `json:"fromUserLastName"`
	InviteID          uint32              `json:"inviteID"`
	Message           string              `json:"message"`

	// Status Invite status
	Status          InviteStatus        `json:"status"`
	ToUserEmail     openapi_types.Email `json:"toUserEmail"`
	ToUserFirstName string              `json:"toUserFirstName"`
	ToUserLastName  string              `json:"toUserLastName"`
}

// InvitesMe References a Slotify Invite
type InvitesMe struct {
	CreatedAt  time.Time          `json:"createdAt"`
	ExpiryDate openapi_types.Date `json:"expiryDate"`

	// FromUserEmail from user email
	FromUserEmail openapi_types.Email `json:"fromUserEmail"`

	// FromUserFirstName from user first name
	FromUserFirstName string `json:"fromUserFirstName"`

	// FromUserLastName from user last name
	FromUserLastName string `json:"fromUserLastName"`
	InviteID         uint32 `json:"inviteID"`

	// Message invite message
	Message string `json:"message"`

	// SlotifyGroupName slotify group name
	SlotifyGroupName string `json:"slotifyGroupName"`

	// Status Invite status
	Status InviteStatus `json:"status"`
}

// Location Maps roughly to [MSFT Location](https://learn.microsoft.com/en-us/graph/api/resources/location?view=graph-rest-1.0)
type Location struct {
	Id       *string           `json:"id,omitempty"`
	Name     *string           `json:"name,omitempty"`
	RoomType *LocationRoomType `json:"roomType"`
	Street   *string           `json:"street"`
}

// LocationRoomType defines model for Location.RoomType.
type LocationRoomType string

// LocationConstraint Maps directly to [MSFT locationConstraint](https://learn.microsoft.com/en-us/graph/api/resources/locationconstraint?view=graph-rest-1.0)
type LocationConstraint struct {
	IsRequired      *bool                     `json:"isRequired,omitempty"`
	Locations       *[]LocationConstraintItem `json:"locations,omitempty"`
	SuggestLocation *bool                     `json:"suggestLocation,omitempty"`
}

// LocationConstraintItem Maps roughly to [MSFT locationConstraintItem](https://learn.microsoft.com/en-us/graph/api/resources/locationconstraintitem?view=graph-rest-1.0)
type LocationConstraintItem struct {
	// Address Maps directly to [MSFT physicalAddress](https://learn.microsoft.com/en-us/graph/api/resources/locationconstraintitem?view=graph-rest-1.0)
	Address              PhysicalAddress `json:"address"`
	DisplayName          string          `json:"displayName"`
	LocationEmailAddress *string         `json:"locationEmailAddress,omitempty"`
	ResolveAvailability  bool            `json:"resolveAvailability"`
}

// MSFTGroup defines model for MSFTGroup.
type MSFTGroup struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// MSFTUser defines model for MSFTUser.
type MSFTUser struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	LastName  string              `json:"lastName"`
}

// MeetingTimeSlot Maps directly to [MSFT meetingTimeSlot](https://learn.microsoft.com/en-us/graph/api/resources/timeslot?view=graph-rest-1.0)
type MeetingTimeSlot struct {
	End   time.Time `json:"end"`
	Start time.Time `json:"start"`
}

// MeetingTimeSuggestion Maps roughly to [MSFT meetingTimeSuggestion](https://learn.microsoft.com/en-us/graph/api/resources/meetingtimesuggestion?view=graph-rest-1.0)
type MeetingTimeSuggestion struct {
	AttendeeAvailability *[]AttendeeAvailability `json:"attendeeAvailability,omitempty"`
	Confidence           *float64                `json:"confidence,omitempty"`
	Locations            *[]Location             `json:"locations,omitempty"`

	// MeetingTimeSlot Maps directly to [MSFT meetingTimeSlot](https://learn.microsoft.com/en-us/graph/api/resources/timeslot?view=graph-rest-1.0)
	MeetingTimeSlot       *MeetingTimeSlot `json:"meetingTimeSlot,omitempty"`
	Order                 *int32           `json:"order,omitempty"`
	OrganizerAvailability *string          `json:"organizerAvailability,omitempty"`
	SuggestionReason      *string          `json:"suggestionReason,omitempty"`
}

// Notification defines model for Notification.
type Notification struct {
	Created time.Time `json:"created"`
	Id      uint32    `json:"id"`
	Message string    `json:"message"`
}

// PhysicalAddress Maps directly to [MSFT physicalAddress](https://learn.microsoft.com/en-us/graph/api/resources/locationconstraintitem?view=graph-rest-1.0)
type PhysicalAddress struct {
	// City The city.
	City *string `json:"city,omitempty"`

	// CountryOrRegion The country or region. It's a free-format string value, for example, "United States".
	CountryOrRegion *string `json:"countryOrRegion,omitempty"`

	// PostalCode The postal code.
	PostalCode *string `json:"postalCode,omitempty"`

	// State The state.
	State *string `json:"state,omitempty"`

	// Street The street.
	Street *string `json:"street,omitempty"`
}

// RescheduleRequest Reschedule request object
type RescheduleRequest struct {
	NewMeeting *ReschedulingRequestNewMeeting `json:"newMeeting,omitempty"`
	OldMeeting ReschedulingRequestOldMeeting  `json:"oldMeeting"`

	// RequestId The request ID
	RequestId uint32 `json:"request_id"`

	// RequestedAt The time the request was made
	RequestedAt time.Time `json:"requested_at"`

	// RequestedBy The user ID of the person who requested the reschedule
	RequestedBy uint32 `json:"requested_by"`

	// Status The status of the reschedule request
	Status string `json:"status"`
}

// ReschedulingCheckBodySchema Request body of the details of the two meetings
type ReschedulingCheckBodySchema struct {
	NewMeeting struct {
		// Attendees Array of all the attendees
		Attendees []AttendeeBase `json:"attendees"`

		// MeetingDuration The length of the meeting, denoted in **ISO 8601** format. - Example:
		//   - **1 hour** → `'PT1H'`
		//   - **2 hours, 30 minutes** → `'PT2H30M'`
		// - `'P'` is the duration designator. - `'T'` separates date and time components. - `'H'` (hours) and `'M'` (minutes) specify the time duration. - If omitted, the default duration is **30 minutes** (`'PT30M'`).
		MeetingDuration string `json:"meetingDuration"`

		// Title name of the meeting
		Title string `json:"title"`
	} `json:"newMeeting"`
	OldMeeting struct {
		// IsOrganizerOptional if organizer does not need to be there, then set true. If the organizer is the only person in the meeting, keep false
		IsOrganizerOptional *bool `json:"isOrganizerOptional,omitempty"`

		// MsftMeetingID The microsoft meeting ID of the old meeting if it exists
		MsftMeetingID string `json:"msftMeetingID"`
	} `json:"oldMeeting"`
}

// ReschedulingRequestAcceptBodySchema defines model for ReschedulingRequestAcceptBodySchema.
type ReschedulingRequestAcceptBodySchema struct {
	// NewEndTime The start of the meeting denoted in *ISO 8601* format In the format: yyyy-mm-ddThh:mm:ssZ Where lowercase letters are replaced by their numerical values
	NewEndTime time.Time `json:"newEndTime"`

	// NewStartTime The start of the meeting denoted in *ISO 8601* format In the format: yyyy-mm-ddThh:mm:ssZ Where lowercase letters are replaced by their numerical values
	NewStartTime time.Time `json:"newStartTime"`
}

// ReschedulingRequestBodySchema Request body of the details of the two meetings
type ReschedulingRequestBodySchema struct {
	NewMeeting struct {
		// Attendees Array of all the attendees user id
		Attendees []int `json:"attendees"`

		// EndRangeTime The start of the meeting denoted in *ISO 8601* format In the format: yyyy-mm-ddThh:mm:ssZ Where lowercase letters are replaced by their numerical values
		EndRangeTime time.Time `json:"endRangeTime"`

		// EndTime The start of the meeting denoted in *ISO 8601* format In the format: yyyy-mm-ddThh:mm:ssZ Where lowercase letters are replaced by their numerical values
		EndTime time.Time `json:"endTime"`

		// Location The location of the meeting
		Location string `json:"location"`

		// MeetingDuration The length of the meeting, denoted in **ISO 8601** format. - Example:
		//   - **1 hour** → `'PT1H'`
		//   - **2 hours, 30 minutes** → `'PT2H30M'`
		// - `'P'` is the duration designator. - `'T'` separates date and time components. - `'H'` (hours) and `'M'` (minutes) specify the time duration. - If omitted, the default duration is **30 minutes** (`'PT30M'`).
		MeetingDuration string `json:"meetingDuration"`

		// StartRangeTime The start of the meeting denoted in *ISO 8601* format In the format: yyyy-mm-ddThh:mm:ssZ Where lowercase letters are replaced by their numerical values
		StartRangeTime time.Time `json:"startRangeTime"`

		// StartTime The start of the meeting denoted in *ISO 8601* format In the format: yyyy-mm-ddThh:mm:ssZ Where lowercase letters are replaced by their numerical values
		StartTime time.Time `json:"startTime"`

		// Title name of the meeting
		Title string `json:"title"`
	} `json:"newMeeting"`
	OldMeeting struct {
		// MeetingOwner Meeting owner ID
		MeetingOwner int `json:"meetingOwner"`

		// MeetingStartTime The start of the meeting denoted in *ISO 8601* format
		MeetingStartTime time.Time `json:"meetingStartTime"`

		// MsftMeetingID The microsoft meeting ID of the old meeting
		MsftMeetingID string `json:"msftMeetingID"`
	} `json:"oldMeeting"`
}

// ReschedulingRequestNewMeeting defines model for ReschedulingRequestNewMeeting.
type ReschedulingRequestNewMeeting struct {
	// EndTime The start of the meeting denoted in *ISO 8601* format In the format: yyyy-mm-ddThh:mm:ssZ Where lowercase letters are replaced by their numerical values
	EndTime time.Time `json:"endTime"`

	// Location The location of the meeting
	Location string `json:"location"`

	// MeetingDuration The length of the meeting, denoted in **ISO 8601** format. - Example:
	//   - **1 hour** → `'PT1H'`
	//   - **2 hours, 30 minutes** → `'PT2H30M'`
	// - `'P'` is the duration designator. - `'T'` separates date and time components. - `'H'` (hours) and `'M'` (minutes) specify the time duration. - If omitted, the default duration is **30 minutes** (`'PT30M'`).
	MeetingDuration string `json:"meetingDuration"`

	// StartTime The start of the meeting denoted in *ISO 8601* format In the format: yyyy-mm-ddThh:mm:ssZ Where lowercase letters are replaced by their numerical values
	StartTime time.Time `json:"startTime"`

	// Title name of the meeting
	Title string `json:"title"`
}

// ReschedulingRequestOldMeeting defines model for ReschedulingRequestOldMeeting.
type ReschedulingRequestOldMeeting struct {
	// MeetingId The meeting ID of the old meeting
	MeetingId uint32 `json:"meetingId"`

	// MsftMeetingID The microsoft meeting ID of the old meeting
	MsftMeetingID string `json:"msftMeetingID"`
}

// ReschedulingRequestSingleBodySchema Request body of the details of the old meeting
type ReschedulingRequestSingleBodySchema struct {
	// MsftMeetingID The microsoft meeting ID of the old meeting
	MsftMeetingID string `json:"msftMeetingID"`
}

// Room defines model for Room.
type Room struct {
	Email openapi_types.Email `json:"email"`
	Name  string              `json:"name"`
}

// SchedulingSlotsBodySchema Roughly maps to [MSFT Find Meeting Schema](https://learn.microsoft.com/en-us/graph/api/user-findmeetingtimes?view=graph-rest-1.0&tabs=http#request-body)
type SchedulingSlotsBodySchema struct {
	Attendees           []AttendeeBase `json:"attendees"`
	IsOrganizerOptional bool           `json:"isOrganizerOptional"`

	// LocationConstraint Maps directly to [MSFT locationConstraint](https://learn.microsoft.com/en-us/graph/api/resources/locationconstraint?view=graph-rest-1.0)
	LocationConstraint LocationConstraint `json:"locationConstraint"`
	MaxCandidates      *int32             `json:"maxCandidates,omitempty"`

	// MeetingDuration The length of the meeting, denoted in **ISO 8601** format. - Example:
	//   - **1 hour** → `'PT1H'`
	//   - **2 hours, 30 minutes** → `'PT2H30M'`
	// - `'P'` is the duration designator. - `'T'` separates date and time components. - `'H'` (hours) and `'M'` (minutes) specify the time duration. - If omitted, the default duration is **30 minutes** (`'PT30M'`).
	MeetingDuration string `json:"meetingDuration"`

	// MeetingName custom field, this is used for the AI model
	MeetingName               string   `json:"meetingName"`
	MinimumAttendeePercentage *float64 `json:"minimumAttendeePercentage,omitempty"`

	// TimeConstraint Maps directly to [MSFT timeConstraint](https://learn.microsoft.com/en-us/graph/api/resources/timeconstraint?view=graph-rest-1.0)
	TimeConstraint TimeConstraint `json:"timeConstraint"`
}

// SchedulingSlotsSuccessResponseBody Maps roughly to [MSFT meetingTimeSuggestionsResult](https://learn.microsoft.com/en-us/graph/api/resources/meetingtimesuggestionsresult?view=graph-rest-1.0)
type SchedulingSlotsSuccessResponseBody struct {
	// EmptySuggestionsReason Maps directly to [MSFT emptySuggestionsReason](https://learn.microsoft.com/en-us/graph/api/resources/meetingtimesuggestionsresult?view=graph-rest-1.0)
	EmptySuggestionsReason *EmptySuggestionsReason  `json:"emptySuggestionsReason,omitempty"`
	MeetingTimeSuggestions *[]MeetingTimeSuggestion `json:"meetingTimeSuggestions,omitempty"`
}

// SlotifyGroup defines model for SlotifyGroup.
type SlotifyGroup struct {
	Id   uint32 `json:"id"`
	Name string `json:"name"`
}

// SlotifyGroupCreate defines model for SlotifyGroupCreate.
type SlotifyGroupCreate struct {
	Name string `json:"name"`
}

// TimeConstraint Maps directly to [MSFT timeConstraint](https://learn.microsoft.com/en-us/graph/api/resources/timeconstraint?view=graph-rest-1.0)
type TimeConstraint struct {
	ActivityDomain *string           `json:"activityDomain,omitempty"`
	TimeSlots      []MeetingTimeSlot `json:"timeSlots"`
}

// User defines model for User.
type User struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	Id        uint32              `json:"id"`
	LastName  string              `json:"lastName"`
}

// UserCreate defines model for UserCreate.
type UserCreate struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	LastName  string              `json:"lastName"`
}

// RescheduleRequests defines model for RescheduleRequests.
type RescheduleRequests = []RescheduleRequest

// SchedulingSlotsSuccessResponse Maps roughly to [MSFT meetingTimeSuggestionsResult](https://learn.microsoft.com/en-us/graph/api/resources/meetingtimesuggestionsresult?view=graph-rest-1.0)
type SchedulingSlotsSuccessResponse = SchedulingSlotsSuccessResponseBody

// GetAPIAuthCallbackParams defines parameters for GetAPIAuthCallback.
type GetAPIAuthCallbackParams struct {
	Code  string `form:"code" json:"code"`
	State string `form:"state" json:"state"`
}

// GetAPICalendarEventParams defines parameters for GetAPICalendarEvent.
type GetAPICalendarEventParams struct {
	MsftID string `form:"msftID" json:"msftID"`
}

// GetAPICalendarMeParams defines parameters for GetAPICalendarMe.
type GetAPICalendarMeParams struct {
	Start time.Time `form:"start" json:"start"`
	End   time.Time `form:"end" json:"end"`
}

// GetAPICalendarUserIDParams defines parameters for GetAPICalendarUserID.
type GetAPICalendarUserIDParams struct {
	Start time.Time `form:"start" json:"start"`
	End   time.Time `form:"end" json:"end"`
}

// GetAPIInvitesMeParams defines parameters for GetAPIInvitesMe.
type GetAPIInvitesMeParams struct {
	// Status Invite status
	Status *InviteStatus `form:"status,omitempty" json:"status,omitempty"`
}

// PatchAPIInvitesInviteIDJSONBody defines parameters for PatchAPIInvitesInviteID.
type PatchAPIInvitesInviteIDJSONBody struct {
	Message string `json:"message"`
}

// GetAPIMSFTGroupsParams defines parameters for GetAPIMSFTGroups.
type GetAPIMSFTGroupsParams struct {
	// Name Microsoft group name
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// GetAPIMSFTGroupsGroupIDUsersParams defines parameters for GetAPIMSFTGroupsGroupIDUsers.
type GetAPIMSFTGroupsGroupIDUsersParams struct {
	NextLink *string `form:"nextLink,omitempty" json:"nextLink,omitempty"`
	Limit    int32   `form:"limit" json:"limit"`
}

// GetAPIMSFTUsersParams defines parameters for GetAPIMSFTUsers.
type GetAPIMSFTUsersParams struct {
	NextLink *string `form:"nextLink,omitempty" json:"nextLink,omitempty"`
	Limit    int     `form:"limit" json:"limit"`
}

// GetAPIMSFTUsersSearchParams defines parameters for GetAPIMSFTUsersSearch.
type GetAPIMSFTUsersSearchParams struct {
	// Search Search parameter for Microsoft users, can be first name, surname, or email
	Search   *string `form:"search,omitempty" json:"search,omitempty"`
	NextLink *string `form:"nextLink,omitempty" json:"nextLink,omitempty"`
	Limit    int     `form:"limit" json:"limit"`
}

// GetAPISlotifyGroupsMeParams defines parameters for GetAPISlotifyGroupsMe.
type GetAPISlotifyGroupsMeParams struct {
	PageToken *uint32 `form:"pageToken,omitempty" json:"pageToken,omitempty"`
	Limit     int32   `form:"limit" json:"limit"`
}

// GetAPISlotifyGroupsSlotifyGroupIDInvitesParams defines parameters for GetAPISlotifyGroupsSlotifyGroupIDInvites.
type GetAPISlotifyGroupsSlotifyGroupIDInvitesParams struct {
	// Status Invite status
	Status    *InviteStatus `form:"status,omitempty" json:"status,omitempty"`
	PageToken *uint32       `form:"pageToken,omitempty" json:"pageToken,omitempty"`
	Limit     int32         `form:"limit" json:"limit"`
}

// GetAPISlotifyGroupsSlotifyGroupIDUsersParams defines parameters for GetAPISlotifyGroupsSlotifyGroupIDUsers.
type GetAPISlotifyGroupsSlotifyGroupIDUsersParams struct {
	PageToken *uint32 `form:"pageToken,omitempty" json:"pageToken,omitempty"`
	Limit     int32   `form:"limit" json:"limit"`
}

// GetAPIUsersParams defines parameters for GetAPIUsers.
type GetAPIUsersParams struct {
	// Email Partial email of user to search for
	Email *string `form:"email,omitempty" json:"email,omitempty"`

	// Name Partial name of user to search for
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// PostAPICalendarMeJSONRequestBody defines body for PostAPICalendarMe for application/json ContentType.
type PostAPICalendarMeJSONRequestBody = CalendarEvent

// PostAPIInvitesJSONRequestBody defines body for PostAPIInvites for application/json ContentType.
type PostAPIInvitesJSONRequestBody = InviteCreate

// PatchAPIInvitesInviteIDJSONRequestBody defines body for PatchAPIInvitesInviteID for application/json ContentType.
type PatchAPIInvitesInviteIDJSONRequestBody PatchAPIInvitesInviteIDJSONBody

// PostAPIRescheduleCheckJSONRequestBody defines body for PostAPIRescheduleCheck for application/json ContentType.
type PostAPIRescheduleCheckJSONRequestBody = ReschedulingCheckBodySchema

// PostAPIRescheduleRequestReplaceJSONRequestBody defines body for PostAPIRescheduleRequestReplace for application/json ContentType.
type PostAPIRescheduleRequestReplaceJSONRequestBody = ReschedulingRequestBodySchema

// PostAPIRescheduleRequestSingleJSONRequestBody defines body for PostAPIRescheduleRequestSingle for application/json ContentType.
type PostAPIRescheduleRequestSingleJSONRequestBody = ReschedulingRequestSingleBodySchema

// PatchAPIRescheduleRequestRequestIDAcceptJSONRequestBody defines body for PatchAPIRescheduleRequestRequestIDAccept for application/json ContentType.
type PatchAPIRescheduleRequestRequestIDAcceptJSONRequestBody = ReschedulingRequestAcceptBodySchema

// PostAPISchedulingSlotsJSONRequestBody defines body for PostAPISchedulingSlots for application/json ContentType.
type PostAPISchedulingSlotsJSONRequestBody = SchedulingSlotsBodySchema

// PostAPISlotifyGroupsJSONRequestBody defines body for PostAPISlotifyGroups for application/json ContentType.
type PostAPISlotifyGroupsJSONRequestBody = SlotifyGroupCreate

// PostAPIUsersJSONRequestBody defines body for PostAPIUsers for application/json ContentType.
type PostAPIUsersJSONRequestBody = UserCreate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Auth route for authorisation code flow.
	// (GET /api/auth/callback)
	GetAPIAuthCallback(w http.ResponseWriter, r *http.Request, params GetAPIAuthCallbackParams)
	// Get calendar event by microsoft id.
	// (GET /api/calendar/event)
	GetAPICalendarEvent(w http.ResponseWriter, r *http.Request, params GetAPICalendarEventParams)
	// Get a user's calendar events for a given time range.
	// (GET /api/calendar/me)
	GetAPICalendarMe(w http.ResponseWriter, r *http.Request, params GetAPICalendarMeParams)
	// Create a new calendar event.
	// (POST /api/calendar/me)
	PostAPICalendarMe(w http.ResponseWriter, r *http.Request)
	// Get a specific user's calendar events for a given time range.
	// (GET /api/calendar/{userID})
	GetAPICalendarUserID(w http.ResponseWriter, r *http.Request, userID uint32, params GetAPICalendarUserIDParams)
	// Subscribe to notifications eventstream.
	// (GET /api/events)
	RenderEvent(w http.ResponseWriter, r *http.Request)
	// Healthcheck route.
	// (GET /api/healthcheck)
	GetAPIHealthcheck(w http.ResponseWriter, r *http.Request)
	// Create a new invite
	// (POST /api/invites)
	PostAPIInvites(w http.ResponseWriter, r *http.Request)
	// Get all invites for logged in user、requires pageToken.
	// (GET /api/invites/me)
	GetAPIInvitesMe(w http.ResponseWriter, r *http.Request, params GetAPIInvitesMeParams)
	// Delete an invite
	// (DELETE /api/invites/{inviteID})
	DeleteAPIInvitesInviteID(w http.ResponseWriter, r *http.Request, inviteID uint32)
	// Update an invite with a new message
	// (PATCH /api/invites/{inviteID})
	PatchAPIInvitesInviteID(w http.ResponseWriter, r *http.Request, inviteID uint32)
	// Accept a new group invite and add member to slotify group.
	// (PATCH /api/invites/{inviteID}/accept)
	PatchAPIInvitesInviteIDAccept(w http.ResponseWriter, r *http.Request, inviteID uint32)
	// Decline an invite
	// (PATCH /api/invites/{inviteID}/decline)
	PatchAPIInvitesInviteIDDecline(w http.ResponseWriter, r *http.Request, inviteID uint32)
	// Get a Microsoft group by query params.
	// (GET /api/msft-groups)
	GetAPIMSFTGroups(w http.ResponseWriter, r *http.Request, params GetAPIMSFTGroupsParams)
	// Get all Microsoft groups's id for current user.
	// (GET /api/msft-groups/me)
	GetAPIMSFTGroupsMe(w http.ResponseWriter, r *http.Request)
	// Get a Microsoft group by id.
	// (GET /api/msft-groups/{groupID})
	GetAPIMSFTGroupsGroupID(w http.ResponseWriter, r *http.Request, groupID string)
	// Get all members of a Microsoft group.
	// (GET /api/msft-groups/{groupID}/users)
	GetAPIMSFTGroupsGroupIDUsers(w http.ResponseWriter, r *http.Request, groupID string, params GetAPIMSFTGroupsGroupIDUsersParams)
	// Get all users from Microsoft
	// (GET /api/msft-users)
	GetAPIMSFTUsers(w http.ResponseWriter, r *http.Request, params GetAPIMSFTUsersParams)
	// Get users from Microsoft based on name and email
	// (GET /api/msft-users/search)
	GetAPIMSFTUsersSearch(w http.ResponseWriter, r *http.Request, params GetAPIMSFTUsersSearchParams)
	// Mark a notification as being read.
	// (PATCH /api/notifications/{notificationID}/read)
	PatchAPINotificationsNotificationIDRead(w http.ResponseWriter, r *http.Request, notificationID uint32)
	// Refresh Slotify access token and refresh token.
	// (POST /api/refresh)
	PostAPIRefresh(w http.ResponseWriter, r *http.Request)
	// Check if the old meeting can be rescheduled
	// (POST /api/reschedule/check)
	PostAPIRescheduleCheck(w http.ResponseWriter, r *http.Request)
	// Create a request to reschedule the old meeting for a new meeting.
	// (POST /api/reschedule/request/replace)
	PostAPIRescheduleRequestReplace(w http.ResponseWriter, r *http.Request)
	// Request to reschedule the old meeting by itself
	// (POST /api/reschedule/request/single)
	PostAPIRescheduleRequestSingle(w http.ResponseWriter, r *http.Request)
	// Get all reschedule requests by request id.
	// (GET /api/reschedule/request/{requestID})
	GetAPIRescheduleRequestRequestID(w http.ResponseWriter, r *http.Request, requestID uint32)
	// Accept a reschedule request by request id.
	// (PATCH /api/reschedule/request/{requestID}/accept)
	PatchAPIRescheduleRequestRequestIDAccept(w http.ResponseWriter, r *http.Request, requestID uint32)
	// Reject a reschedule request by id.
	// (PATCH /api/reschedule/request/{requestID}/reject)
	PatchAPIRescheduleRequestRequestIDReject(w http.ResponseWriter, r *http.Request, requestID uint32)
	// Get all reschedule requests for current user.
	// (GET /api/reschedule/requests/me)
	GetAPIRescheduleRequestsMe(w http.ResponseWriter, r *http.Request)
	// Get all possible rooms.
	// (GET /api/rooms/all)
	GetAPIRoomsAll(w http.ResponseWriter, r *http.Request)
	// Idempotent route, just returns appropriate time slots along with their respective ratings.
	// (POST /api/scheduling/slots)
	PostAPISchedulingSlots(w http.ResponseWriter, r *http.Request)
	// Create a new slotifyGroup.
	// (POST /api/slotify-groups)
	PostAPISlotifyGroups(w http.ResponseWriter, r *http.Request)
	// Get all slotify-groups for current user.
	// (GET /api/slotify-groups/me)
	GetAPISlotifyGroupsMe(w http.ResponseWriter, r *http.Request, params GetAPISlotifyGroupsMeParams)
	// Delete a slotifyGroup by id.
	// (DELETE /api/slotify-groups/{slotifyGroupID})
	DeleteAPISlotifyGroupsSlotifyGroupID(w http.ResponseWriter, r *http.Request, slotifyGroupID uint32)
	// Get a slotifyGroup by id.
	// (GET /api/slotify-groups/{slotifyGroupID})
	GetAPISlotifyGroupsSlotifyGroupID(w http.ResponseWriter, r *http.Request, slotifyGroupID uint32)
	// Get all invites for a slotify group
	// (GET /api/slotify-groups/{slotifyGroupID}/invites)
	GetAPISlotifyGroupsSlotifyGroupIDInvites(w http.ResponseWriter, r *http.Request, slotifyGroupID uint32, params GetAPISlotifyGroupsSlotifyGroupIDInvitesParams)
	// Have a member leave from a slotify group
	// (DELETE /api/slotify-groups/{slotifyGroupID}/leave/me)
	DeleteSlotifyGroupsSlotifyGroupIDLeaveMe(w http.ResponseWriter, r *http.Request, slotifyGroupID uint32)
	// Get all members of a slotifyGroup.
	// (GET /api/slotify-groups/{slotifyGroupID}/users)
	GetAPISlotifyGroupsSlotifyGroupIDUsers(w http.ResponseWriter, r *http.Request, slotifyGroupID uint32, params GetAPISlotifyGroupsSlotifyGroupIDUsersParams)
	// Search for users with by email and name. MUST provide one of the query params. Returns a max of 10 searches.
	// (GET /api/users)
	GetAPIUsers(w http.ResponseWriter, r *http.Request, params GetAPIUsersParams)
	// Create a new user.
	// (POST /api/users)
	PostAPIUsers(w http.ResponseWriter, r *http.Request)
	// Get current user's details.
	// (GET /api/users/me)
	GetAPIUsersMe(w http.ResponseWriter, r *http.Request)
	// Logout user.
	// (POST /api/users/me/logout)
	PostAPIUsersMeLogout(w http.ResponseWriter, r *http.Request)
	// Get user's unread notifications.
	// (GET /api/users/me/notifications)
	GetAPIUsersMeNotifications(w http.ResponseWriter, r *http.Request)
	// Delete a user by id.
	// (DELETE /api/users/{userID})
	DeleteAPIUsersUserID(w http.ResponseWriter, r *http.Request, userID uint32)
	// Get a user by id.
	// (GET /api/users/{userID})
	GetAPIUsersUserID(w http.ResponseWriter, r *http.Request, userID uint32)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAPIAuthCallback operation middleware
func (siw *ServerInterfaceWrapper) GetAPIAuthCallback(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIAuthCallbackParams

	// ------------- Required query parameter "code" -------------

	if paramValue := r.URL.Query().Get("code"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "code"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "code", r.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Required query parameter "state" -------------

	if paramValue := r.URL.Query().Get("state"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "state"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "state", r.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIAuthCallback(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPICalendarEvent operation middleware
func (siw *ServerInterfaceWrapper) GetAPICalendarEvent(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPICalendarEventParams

	// ------------- Required query parameter "msftID" -------------

	if paramValue := r.URL.Query().Get("msftID"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "msftID"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "msftID", r.URL.Query(), &params.MsftID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "msftID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPICalendarEvent(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPICalendarMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPICalendarMe(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPICalendarMeParams

	// ------------- Required query parameter "start" -------------

	if paramValue := r.URL.Query().Get("start"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "start"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "start", r.URL.Query(), &params.Start)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start", Err: err})
		return
	}

	// ------------- Required query parameter "end" -------------

	if paramValue := r.URL.Query().Get("end"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "end"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "end", r.URL.Query(), &params.End)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "end", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPICalendarMe(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPICalendarMe operation middleware
func (siw *ServerInterfaceWrapper) PostAPICalendarMe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPICalendarMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPICalendarUserID operation middleware
func (siw *ServerInterfaceWrapper) GetAPICalendarUserID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userID" -------------
	var userID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "userID", mux.Vars(r)["userID"], &userID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userID", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPICalendarUserIDParams

	// ------------- Required query parameter "start" -------------

	if paramValue := r.URL.Query().Get("start"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "start"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "start", r.URL.Query(), &params.Start)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start", Err: err})
		return
	}

	// ------------- Required query parameter "end" -------------

	if paramValue := r.URL.Query().Get("end"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "end"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "end", r.URL.Query(), &params.End)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "end", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPICalendarUserID(w, r, userID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RenderEvent operation middleware
func (siw *ServerInterfaceWrapper) RenderEvent(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RenderEvent(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIHealthcheck operation middleware
func (siw *ServerInterfaceWrapper) GetAPIHealthcheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIHealthcheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIInvites operation middleware
func (siw *ServerInterfaceWrapper) PostAPIInvites(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIInvites(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIInvitesMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPIInvitesMe(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIInvitesMeParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIInvitesMe(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAPIInvitesInviteID operation middleware
func (siw *ServerInterfaceWrapper) DeleteAPIInvitesInviteID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "inviteID" -------------
	var inviteID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "inviteID", mux.Vars(r)["inviteID"], &inviteID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inviteID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAPIInvitesInviteID(w, r, inviteID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchAPIInvitesInviteID operation middleware
func (siw *ServerInterfaceWrapper) PatchAPIInvitesInviteID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "inviteID" -------------
	var inviteID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "inviteID", mux.Vars(r)["inviteID"], &inviteID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inviteID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAPIInvitesInviteID(w, r, inviteID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchAPIInvitesInviteIDAccept operation middleware
func (siw *ServerInterfaceWrapper) PatchAPIInvitesInviteIDAccept(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "inviteID" -------------
	var inviteID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "inviteID", mux.Vars(r)["inviteID"], &inviteID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inviteID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAPIInvitesInviteIDAccept(w, r, inviteID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchAPIInvitesInviteIDDecline operation middleware
func (siw *ServerInterfaceWrapper) PatchAPIInvitesInviteIDDecline(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "inviteID" -------------
	var inviteID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "inviteID", mux.Vars(r)["inviteID"], &inviteID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inviteID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAPIInvitesInviteIDDecline(w, r, inviteID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIMSFTGroups operation middleware
func (siw *ServerInterfaceWrapper) GetAPIMSFTGroups(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIMSFTGroupsParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIMSFTGroups(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIMSFTGroupsMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPIMSFTGroupsMe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIMSFTGroupsMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIMSFTGroupsGroupID operation middleware
func (siw *ServerInterfaceWrapper) GetAPIMSFTGroupsGroupID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "groupID" -------------
	var groupID string

	err = runtime.BindStyledParameterWithOptions("simple", "groupID", mux.Vars(r)["groupID"], &groupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIMSFTGroupsGroupID(w, r, groupID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIMSFTGroupsGroupIDUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAPIMSFTGroupsGroupIDUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "groupID" -------------
	var groupID string

	err = runtime.BindStyledParameterWithOptions("simple", "groupID", mux.Vars(r)["groupID"], &groupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupID", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIMSFTGroupsGroupIDUsersParams

	// ------------- Optional query parameter "nextLink" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextLink", r.URL.Query(), &params.NextLink)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextLink", Err: err})
		return
	}

	// ------------- Required query parameter "limit" -------------

	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIMSFTGroupsGroupIDUsers(w, r, groupID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIMSFTUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAPIMSFTUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIMSFTUsersParams

	// ------------- Optional query parameter "nextLink" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextLink", r.URL.Query(), &params.NextLink)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextLink", Err: err})
		return
	}

	// ------------- Required query parameter "limit" -------------

	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIMSFTUsers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIMSFTUsersSearch operation middleware
func (siw *ServerInterfaceWrapper) GetAPIMSFTUsersSearch(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIMSFTUsersSearchParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "nextLink" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextLink", r.URL.Query(), &params.NextLink)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextLink", Err: err})
		return
	}

	// ------------- Required query parameter "limit" -------------

	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIMSFTUsersSearch(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchAPINotificationsNotificationIDRead operation middleware
func (siw *ServerInterfaceWrapper) PatchAPINotificationsNotificationIDRead(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "notificationID" -------------
	var notificationID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "notificationID", mux.Vars(r)["notificationID"], &notificationID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "notificationID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAPINotificationsNotificationIDRead(w, r, notificationID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIRefresh operation middleware
func (siw *ServerInterfaceWrapper) PostAPIRefresh(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIRefresh(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIRescheduleCheck operation middleware
func (siw *ServerInterfaceWrapper) PostAPIRescheduleCheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIRescheduleCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIRescheduleRequestReplace operation middleware
func (siw *ServerInterfaceWrapper) PostAPIRescheduleRequestReplace(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIRescheduleRequestReplace(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIRescheduleRequestSingle operation middleware
func (siw *ServerInterfaceWrapper) PostAPIRescheduleRequestSingle(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIRescheduleRequestSingle(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIRescheduleRequestRequestID operation middleware
func (siw *ServerInterfaceWrapper) GetAPIRescheduleRequestRequestID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "requestID" -------------
	var requestID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "requestID", mux.Vars(r)["requestID"], &requestID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIRescheduleRequestRequestID(w, r, requestID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchAPIRescheduleRequestRequestIDAccept operation middleware
func (siw *ServerInterfaceWrapper) PatchAPIRescheduleRequestRequestIDAccept(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "requestID" -------------
	var requestID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "requestID", mux.Vars(r)["requestID"], &requestID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAPIRescheduleRequestRequestIDAccept(w, r, requestID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchAPIRescheduleRequestRequestIDReject operation middleware
func (siw *ServerInterfaceWrapper) PatchAPIRescheduleRequestRequestIDReject(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "requestID" -------------
	var requestID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "requestID", mux.Vars(r)["requestID"], &requestID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAPIRescheduleRequestRequestIDReject(w, r, requestID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIRescheduleRequestsMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPIRescheduleRequestsMe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIRescheduleRequestsMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIRoomsAll operation middleware
func (siw *ServerInterfaceWrapper) GetAPIRoomsAll(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIRoomsAll(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPISchedulingSlots operation middleware
func (siw *ServerInterfaceWrapper) PostAPISchedulingSlots(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPISchedulingSlots(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPISlotifyGroups operation middleware
func (siw *ServerInterfaceWrapper) PostAPISlotifyGroups(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPISlotifyGroups(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPISlotifyGroupsMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPISlotifyGroupsMe(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPISlotifyGroupsMeParams

	// ------------- Optional query parameter "pageToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageToken", r.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageToken", Err: err})
		return
	}

	// ------------- Required query parameter "limit" -------------

	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPISlotifyGroupsMe(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAPISlotifyGroupsSlotifyGroupID operation middleware
func (siw *ServerInterfaceWrapper) DeleteAPISlotifyGroupsSlotifyGroupID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "slotifyGroupID" -------------
	var slotifyGroupID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "slotifyGroupID", mux.Vars(r)["slotifyGroupID"], &slotifyGroupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slotifyGroupID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAPISlotifyGroupsSlotifyGroupID(w, r, slotifyGroupID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPISlotifyGroupsSlotifyGroupID operation middleware
func (siw *ServerInterfaceWrapper) GetAPISlotifyGroupsSlotifyGroupID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "slotifyGroupID" -------------
	var slotifyGroupID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "slotifyGroupID", mux.Vars(r)["slotifyGroupID"], &slotifyGroupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slotifyGroupID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPISlotifyGroupsSlotifyGroupID(w, r, slotifyGroupID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPISlotifyGroupsSlotifyGroupIDInvites operation middleware
func (siw *ServerInterfaceWrapper) GetAPISlotifyGroupsSlotifyGroupIDInvites(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "slotifyGroupID" -------------
	var slotifyGroupID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "slotifyGroupID", mux.Vars(r)["slotifyGroupID"], &slotifyGroupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slotifyGroupID", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPISlotifyGroupsSlotifyGroupIDInvitesParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "pageToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageToken", r.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageToken", Err: err})
		return
	}

	// ------------- Required query parameter "limit" -------------

	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPISlotifyGroupsSlotifyGroupIDInvites(w, r, slotifyGroupID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteSlotifyGroupsSlotifyGroupIDLeaveMe operation middleware
func (siw *ServerInterfaceWrapper) DeleteSlotifyGroupsSlotifyGroupIDLeaveMe(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "slotifyGroupID" -------------
	var slotifyGroupID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "slotifyGroupID", mux.Vars(r)["slotifyGroupID"], &slotifyGroupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slotifyGroupID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSlotifyGroupsSlotifyGroupIDLeaveMe(w, r, slotifyGroupID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPISlotifyGroupsSlotifyGroupIDUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAPISlotifyGroupsSlotifyGroupIDUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "slotifyGroupID" -------------
	var slotifyGroupID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "slotifyGroupID", mux.Vars(r)["slotifyGroupID"], &slotifyGroupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slotifyGroupID", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPISlotifyGroupsSlotifyGroupIDUsersParams

	// ------------- Optional query parameter "pageToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageToken", r.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageToken", Err: err})
		return
	}

	// ------------- Required query parameter "limit" -------------

	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPISlotifyGroupsSlotifyGroupIDUsers(w, r, slotifyGroupID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAPIUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIUsersParams

	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", r.URL.Query(), &params.Email)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "email", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIUsers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIUsers operation middleware
func (siw *ServerInterfaceWrapper) PostAPIUsers(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIUsersMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPIUsersMe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIUsersMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIUsersMeLogout operation middleware
func (siw *ServerInterfaceWrapper) PostAPIUsersMeLogout(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIUsersMeLogout(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIUsersMeNotifications operation middleware
func (siw *ServerInterfaceWrapper) GetAPIUsersMeNotifications(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIUsersMeNotifications(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAPIUsersUserID operation middleware
func (siw *ServerInterfaceWrapper) DeleteAPIUsersUserID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userID" -------------
	var userID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "userID", mux.Vars(r)["userID"], &userID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAPIUsersUserID(w, r, userID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIUsersUserID operation middleware
func (siw *ServerInterfaceWrapper) GetAPIUsersUserID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userID" -------------
	var userID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "userID", mux.Vars(r)["userID"], &userID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIUsersUserID(w, r, userID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/api/auth/callback", wrapper.GetAPIAuthCallback).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/calendar/event", wrapper.GetAPICalendarEvent).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/calendar/me", wrapper.GetAPICalendarMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/calendar/me", wrapper.PostAPICalendarMe).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/calendar/{userID}", wrapper.GetAPICalendarUserID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/events", wrapper.RenderEvent).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/healthcheck", wrapper.GetAPIHealthcheck).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/invites", wrapper.PostAPIInvites).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/invites/me", wrapper.GetAPIInvitesMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/invites/{inviteID}", wrapper.DeleteAPIInvitesInviteID).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/invites/{inviteID}", wrapper.PatchAPIInvitesInviteID).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/api/invites/{inviteID}/accept", wrapper.PatchAPIInvitesInviteIDAccept).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/api/invites/{inviteID}/decline", wrapper.PatchAPIInvitesInviteIDDecline).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/api/msft-groups", wrapper.GetAPIMSFTGroups).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/msft-groups/me", wrapper.GetAPIMSFTGroupsMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/msft-groups/{groupID}", wrapper.GetAPIMSFTGroupsGroupID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/msft-groups/{groupID}/users", wrapper.GetAPIMSFTGroupsGroupIDUsers).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/msft-users", wrapper.GetAPIMSFTUsers).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/msft-users/search", wrapper.GetAPIMSFTUsersSearch).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/notifications/{notificationID}/read", wrapper.PatchAPINotificationsNotificationIDRead).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/api/refresh", wrapper.PostAPIRefresh).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/reschedule/check", wrapper.PostAPIRescheduleCheck).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/reschedule/request/replace", wrapper.PostAPIRescheduleRequestReplace).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/reschedule/request/single", wrapper.PostAPIRescheduleRequestSingle).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/reschedule/request/{requestID}", wrapper.GetAPIRescheduleRequestRequestID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/reschedule/request/{requestID}/accept", wrapper.PatchAPIRescheduleRequestRequestIDAccept).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/api/reschedule/request/{requestID}/reject", wrapper.PatchAPIRescheduleRequestRequestIDReject).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/api/reschedule/requests/me", wrapper.GetAPIRescheduleRequestsMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/rooms/all", wrapper.GetAPIRoomsAll).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/scheduling/slots", wrapper.PostAPISchedulingSlots).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups", wrapper.PostAPISlotifyGroups).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups/me", wrapper.GetAPISlotifyGroupsMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups/{slotifyGroupID}", wrapper.DeleteAPISlotifyGroupsSlotifyGroupID).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups/{slotifyGroupID}", wrapper.GetAPISlotifyGroupsSlotifyGroupID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups/{slotifyGroupID}/invites", wrapper.GetAPISlotifyGroupsSlotifyGroupIDInvites).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups/{slotifyGroupID}/leave/me", wrapper.DeleteSlotifyGroupsSlotifyGroupIDLeaveMe).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups/{slotifyGroupID}/users", wrapper.GetAPISlotifyGroupsSlotifyGroupIDUsers).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/users", wrapper.GetAPIUsers).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/users", wrapper.PostAPIUsers).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/users/me", wrapper.GetAPIUsersMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/users/me/logout", wrapper.PostAPIUsersMeLogout).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/users/me/notifications", wrapper.GetAPIUsersMeNotifications).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/users/{userID}", wrapper.DeleteAPIUsersUserID).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/users/{userID}", wrapper.GetAPIUsersUserID).Methods("GET")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//6mk+gEyvQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
