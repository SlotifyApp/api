// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AttendeeResponseStatus.
const (
	AttendeeResponseStatusAccepted           AttendeeResponseStatus = "accepted"
	AttendeeResponseStatusDeclined           AttendeeResponseStatus = "declined"
	AttendeeResponseStatusEntativelyAccepted AttendeeResponseStatus = "entativelyAccepted"
	AttendeeResponseStatusNone               AttendeeResponseStatus = "none"
	AttendeeResponseStatusNotResponded       AttendeeResponseStatus = "notResponded"
	AttendeeResponseStatusOrganizer          AttendeeResponseStatus = "organizer"
)

// Defines values for AttendeeType.
const (
	Optional AttendeeType = "optional"
	Required AttendeeType = "required"
	Resource AttendeeType = "resource"
)

// Defines values for EmptySuggestionsReason.
const (
	EmptySuggestionsReasonAttendeesUnavailable          EmptySuggestionsReason = "attendeesUnavailable"
	EmptySuggestionsReasonAttendeesUnavailableOrUnknown EmptySuggestionsReason = "attendeesUnavailableOrUnknown"
	EmptySuggestionsReasonLocationsUnavailable          EmptySuggestionsReason = "locationsUnavailable"
	EmptySuggestionsReasonOrganizerUnavailable          EmptySuggestionsReason = "organizerUnavailable"
	EmptySuggestionsReasonUnknown                       EmptySuggestionsReason = "unknown"
)

// Defines values for FreeBusyStatus.
const (
	FreeBusyStatusBusy             FreeBusyStatus = "busy"
	FreeBusyStatusFree             FreeBusyStatus = "free"
	FreeBusyStatusOof              FreeBusyStatus = "oof"
	FreeBusyStatusTentative        FreeBusyStatus = "tentative"
	FreeBusyStatusUnknown          FreeBusyStatus = "unknown"
	FreeBusyStatusWorkingElsewhere FreeBusyStatus = "workingElsewhere"
)

// Defines values for InviteStatus.
const (
	InviteStatusAccepted InviteStatus = "accepted"
	InviteStatusDeclined InviteStatus = "declined"
	InviteStatusExpired  InviteStatus = "expired"
	InviteStatusPending  InviteStatus = "pending"
)

// Defines values for LocationRoomType.
const (
	BusinessAddress LocationRoomType = "businessAddress"
	ConferenceRoom  LocationRoomType = "conferenceRoom"
	Default         LocationRoomType = "default"
	GeoCoordinates  LocationRoomType = "geoCoordinates"
	HomeAddress     LocationRoomType = "homeAddress"
	Hotel           LocationRoomType = "hotel"
	LocalBusiness   LocationRoomType = "localBusiness"
	PostalAddress   LocationRoomType = "postalAddress"
	Restaurant      LocationRoomType = "restaurant"
	StreetAddress   LocationRoomType = "streetAddress"
)

// Attendee Maps roughly to [MSFT Attendee](https://learn.microsoft.com/en-us/graph/api/resources/attendee?view=graph-rest-1.0#properties)
type Attendee struct {
	// AttendeeType Maps directly to [MSFT Attendee->type](https://learn.microsoft.com/en-us/graph/api/resources/attendee?view=graph-rest-1.0)
	AttendeeType   *AttendeeType           `json:"attendeeType,omitempty"`
	Email          openapi_types.Email     `json:"email"`
	ResponseStatus *AttendeeResponseStatus `json:"responseStatus"`
}

// AttendeeResponseStatus defines model for Attendee.ResponseStatus.
type AttendeeResponseStatus string

// AttendeeAvailability Maps roughly to [MSFT attendeeAvailability](https://learn.microsoft.com/en-us/graph/api/resources/attendeeavailability?view=graph-rest-1.0)
type AttendeeAvailability struct {
	// Attendee directly maps to [MSFT attendeeBase](https://learn.microsoft.com/en-us/graph/api/resources/attendeebase?view=graph-rest-1.0)
	Attendee AttendeeBase `json:"attendee"`

	// Availability Maps directly to [MSFT freebusyStatus](https://learn.microsoft.com/en-us/graph/api/resources/attendeeavailability?view=graph-rest-1.0)
	Availability FreeBusyStatus `json:"availability"`
}

// AttendeeBase directly maps to [MSFT attendeeBase](https://learn.microsoft.com/en-us/graph/api/resources/attendeebase?view=graph-rest-1.0)
type AttendeeBase struct {
	// AttendeeType Maps directly to [MSFT Attendee->type](https://learn.microsoft.com/en-us/graph/api/resources/attendee?view=graph-rest-1.0)
	AttendeeType AttendeeType `json:"attendeeType"`

	// EmailAddress directly maps to MSFT Email Address, see info here:[MSFT EmailAddress Struct Docs](https://learn.microsoft.com/en-us/graph/api/resources/emailaddress?view=graph-rest-1.0)
	EmailAddress EmailAddress `json:"emailAddress"`
}

// AttendeeType Maps directly to [MSFT Attendee->type](https://learn.microsoft.com/en-us/graph/api/resources/attendee?view=graph-rest-1.0)
type AttendeeType string

// CalendarEvent Maps roughly to [MSFT event](https://learn.microsoft.com/en-us/graph/api/resources/event?view=graph-rest-1.0#properties)
type CalendarEvent struct {
	Attendees   []Attendee `json:"attendees"`
	Body        *string    `json:"body,omitempty"`
	Created     *time.Time `json:"created,omitempty"`
	EndTime     *string    `json:"endTime"`
	Id          *string    `json:"id,omitempty"`
	IsCancelled *bool      `json:"isCancelled,omitempty"`

	// JoinURL Maps roughly to [MSFT OnlineMeetingInfo->joinURL](https://learn.microsoft.com/en-us/graph/api/resources/onlinemeetinginfo?view=graph-rest-1.0#json-representation)
	JoinURL   *string    `json:"joinURL"`
	Locations []Location `json:"locations"`

	// Organizer Maps roughly to [MSFT Recipient->emailAddress](https://learn.microsoft.com/en-us/graph/api/resources/recipient?view=graph-rest-1.0)
	Organizer *openapi_types.Email `json:"organizer,omitempty"`
	StartTime *string              `json:"startTime"`
	Subject   *string              `json:"subject,omitempty"`
	WebLink   *string              `json:"webLink,omitempty"`
}

// EmailAddress directly maps to MSFT Email Address, see info here:[MSFT EmailAddress Struct Docs](https://learn.microsoft.com/en-us/graph/api/resources/emailaddress?view=graph-rest-1.0)
type EmailAddress struct {
	Address openapi_types.Email `json:"address"`
	Name    string              `json:"name"`
}

// EmptySuggestionsReason Maps directly to [MSFT emptySuggestionsReason](https://learn.microsoft.com/en-us/graph/api/resources/meetingtimesuggestionsresult?view=graph-rest-1.0)
type EmptySuggestionsReason string

// FreeBusyStatus Maps directly to [MSFT freebusyStatus](https://learn.microsoft.com/en-us/graph/api/resources/attendeeavailability?view=graph-rest-1.0)
type FreeBusyStatus string

// InviteCreate Invite create request body
type InviteCreate struct {
	CreatedAt      time.Time          `json:"createdAt"`
	ExpiryDate     openapi_types.Date `json:"expiryDate"`
	Message        string             `json:"message"`
	SlotifyGroupID uint32             `json:"slotifyGroupID"`
	ToUserID       uint32             `json:"toUserID"`
}

// InviteStatus Invite status
type InviteStatus string

// InvitesGroup References a Slotify Invite For a Group
type InvitesGroup struct {
	CreatedAt         time.Time           `json:"createdAt"`
	ExpiryDate        openapi_types.Date  `json:"expiryDate"`
	FromUserEmail     openapi_types.Email `json:"fromUserEmail"`
	FromUserFirstName string              `json:"fromUserFirstName"`
	FromUserLastName  string              `json:"fromUserLastName"`
	InviteID          uint32              `json:"inviteID"`
	Message           string              `json:"message"`

	// Status Invite status
	Status          InviteStatus        `json:"status"`
	ToUserEmail     openapi_types.Email `json:"toUserEmail"`
	ToUserFirstName string              `json:"toUserFirstName"`
	ToUserLastName  string              `json:"toUserLastName"`
}

// InvitesMe References a Slotify Invite
type InvitesMe struct {
	CreatedAt  time.Time          `json:"createdAt"`
	ExpiryDate openapi_types.Date `json:"expiryDate"`

	// FromUserEmail from user email
	FromUserEmail openapi_types.Email `json:"fromUserEmail"`

	// FromUserFirstName from user first name
	FromUserFirstName string `json:"fromUserFirstName"`

	// FromUserLastName from user last name
	FromUserLastName string `json:"fromUserLastName"`
	InviteID         uint32 `json:"inviteID"`

	// Message invite message
	Message string `json:"message"`

	// SlotifyGroupName slotify group name
	SlotifyGroupName string `json:"slotifyGroupName"`

	// Status Invite status
	Status InviteStatus `json:"status"`
}

// Location Maps roughly to [MSFT Location](https://learn.microsoft.com/en-us/graph/api/resources/location?view=graph-rest-1.0)
type Location struct {
	Id       *string           `json:"id,omitempty"`
	Name     *string           `json:"name,omitempty"`
	RoomType *LocationRoomType `json:"roomType"`
	Street   *string           `json:"street"`
}

// LocationRoomType defines model for Location.RoomType.
type LocationRoomType string

// LocationConstraint Maps directly to [MSFT locationConstraint](https://learn.microsoft.com/en-us/graph/api/resources/locationconstraint?view=graph-rest-1.0)
type LocationConstraint struct {
	IsRequired      *bool                     `json:"isRequired,omitempty"`
	Locations       *[]LocationConstraintItem `json:"locations,omitempty"`
	SuggestLocation *bool                     `json:"suggestLocation,omitempty"`
}

// LocationConstraintItem Maps roughly to [MSFT locationConstraintItem](https://learn.microsoft.com/en-us/graph/api/resources/locationconstraintitem?view=graph-rest-1.0)
type LocationConstraintItem struct {
	// Address Maps directly to [MSFT physicalAddress](https://learn.microsoft.com/en-us/graph/api/resources/locationconstraintitem?view=graph-rest-1.0)
	Address              PhysicalAddress `json:"address"`
	DisplayName          string          `json:"displayName"`
	LocationEmailAddress *string         `json:"locationEmailAddress,omitempty"`
	ResolveAvailability  bool            `json:"resolveAvailability"`
}

// MSFTGroup defines model for MSFTGroup.
type MSFTGroup struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// MSFTUser defines model for MSFTUser.
type MSFTUser struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	LastName  string              `json:"lastName"`
}

// MeetingTimeSlot Maps directly to [MSFT meetingTimeSlot](https://learn.microsoft.com/en-us/graph/api/resources/timeslot?view=graph-rest-1.0)
type MeetingTimeSlot struct {
	End   time.Time `json:"end"`
	Start time.Time `json:"start"`
}

// MeetingTimeSuggestion Maps roughly to [MSFT meetingTimeSuggestion](https://learn.microsoft.com/en-us/graph/api/resources/meetingtimesuggestion?view=graph-rest-1.0)
type MeetingTimeSuggestion struct {
	AttendeeAvailability *[]AttendeeAvailability `json:"attendeeAvailability,omitempty"`
	Confidence           *float64                `json:"confidence,omitempty"`
	Locations            *[]Location             `json:"locations,omitempty"`

	// MeetingTimeSlot Maps directly to [MSFT meetingTimeSlot](https://learn.microsoft.com/en-us/graph/api/resources/timeslot?view=graph-rest-1.0)
	MeetingTimeSlot       *MeetingTimeSlot `json:"meetingTimeSlot,omitempty"`
	Order                 *int32           `json:"order,omitempty"`
	OrganizerAvailability *string          `json:"organizerAvailability,omitempty"`
	SuggestionReason      *string          `json:"suggestionReason,omitempty"`
}

// Notification defines model for Notification.
type Notification struct {
	Created time.Time `json:"created"`
	Id      uint32    `json:"id"`
	Message string    `json:"message"`
}

// PhysicalAddress Maps directly to [MSFT physicalAddress](https://learn.microsoft.com/en-us/graph/api/resources/locationconstraintitem?view=graph-rest-1.0)
type PhysicalAddress struct {
	// City The city.
	City *string `json:"city,omitempty"`

	// CountryOrRegion The country or region. It's a free-format string value, for example, "United States".
	CountryOrRegion *string `json:"countryOrRegion,omitempty"`

	// PostalCode The postal code.
	PostalCode *string `json:"postalCode,omitempty"`

	// State The state.
	State *string `json:"state,omitempty"`

	// Street The street.
	Street *string `json:"street,omitempty"`
}

// RescheduleRequest Reschedule request object
type RescheduleRequest struct {
	NewMeeting *ReschedulingRequestNewMeeting `json:"newMeeting,omitempty"`
	OldMeeting ReschedulingRequestOldMeeting  `json:"oldMeeting"`

	// RequestId The request ID
	RequestId uint32 `json:"request_id"`

	// RequestedAt The time the request was made
	RequestedAt time.Time `json:"requested_at"`

	// RequestedBy The user ID of the person who requested the reschedule
	RequestedBy uint32 `json:"requested_by"`

	// Status The status of the reschedule request
	Status string `json:"status"`
}

// ReschedulingCheckBodySchema Request body of the details of the two meetings
type ReschedulingCheckBodySchema struct {
	NewMeeting struct {
		// Attendees Array of all the attendees
		Attendees []AttendeeBase `json:"attendees"`

		// MeetingDuration The length of the meeting, denoted in **ISO 8601** format. - Example:
		//   - **1 hour** → `'PT1H'`
		//   - **2 hours, 30 minutes** → `'PT2H30M'`
		// - `'P'` is the duration designator. - `'T'` separates date and time components. - `'H'` (hours) and `'M'` (minutes) specify the time duration. - If omitted, the default duration is **30 minutes** (`'PT30M'`).
		MeetingDuration string `json:"meetingDuration"`

		// Title name of the meeting
		Title string `json:"title"`
	} `json:"newMeeting"`
	OldMeeting struct {
		// IsOrganizerOptional if organizer does not need to be there, then set true. If the organizer is the only person in the meeting, keep false
		IsOrganizerOptional *bool `json:"isOrganizerOptional,omitempty"`

		// MsftMeetingID The microsoft meeting ID of the old meeting if it exists
		MsftMeetingID string `json:"msftMeetingID"`
	} `json:"oldMeeting"`
}

// ReschedulingRequestAcceptBodySchema defines model for ReschedulingRequestAcceptBodySchema.
type ReschedulingRequestAcceptBodySchema struct {
	// NewEndTime The start of the meeting denoted in *ISO 8601* format In the format: yyyy-mm-ddThh:mm:ssZ Where lowercase letters are replaced by their numerical values
	NewEndTime time.Time `json:"newEndTime"`

	// NewStartTime The start of the meeting denoted in *ISO 8601* format In the format: yyyy-mm-ddThh:mm:ssZ Where lowercase letters are replaced by their numerical values
	NewStartTime time.Time `json:"newStartTime"`
}

// ReschedulingRequestBodySchema Request body of the details of the two meetings
type ReschedulingRequestBodySchema struct {
	NewMeeting struct {
		// Attendees Array of all the attendees user id
		Attendees []int `json:"attendees"`

		// EndRangeTime The start of the meeting denoted in *ISO 8601* format In the format: yyyy-mm-ddThh:mm:ssZ Where lowercase letters are replaced by their numerical values
		EndRangeTime time.Time `json:"endRangeTime"`

		// EndTime The start of the meeting denoted in *ISO 8601* format In the format: yyyy-mm-ddThh:mm:ssZ Where lowercase letters are replaced by their numerical values
		EndTime time.Time `json:"endTime"`

		// Location The location of the meeting
		Location string `json:"location"`

		// MeetingDuration The length of the meeting, denoted in **ISO 8601** format. - Example:
		//   - **1 hour** → `'PT1H'`
		//   - **2 hours, 30 minutes** → `'PT2H30M'`
		// - `'P'` is the duration designator. - `'T'` separates date and time components. - `'H'` (hours) and `'M'` (minutes) specify the time duration. - If omitted, the default duration is **30 minutes** (`'PT30M'`).
		MeetingDuration string `json:"meetingDuration"`

		// StartRangeTime The start of the meeting denoted in *ISO 8601* format In the format: yyyy-mm-ddThh:mm:ssZ Where lowercase letters are replaced by their numerical values
		StartRangeTime time.Time `json:"startRangeTime"`

		// StartTime The start of the meeting denoted in *ISO 8601* format In the format: yyyy-mm-ddThh:mm:ssZ Where lowercase letters are replaced by their numerical values
		StartTime time.Time `json:"startTime"`

		// Title name of the meeting
		Title string `json:"title"`
	} `json:"newMeeting"`
	OldMeeting struct {
		// MeetingOwner Meeting owner ID
		MeetingOwner int `json:"meetingOwner"`

		// MeetingStartTime The start of the meeting denoted in *ISO 8601* format
		MeetingStartTime time.Time `json:"meetingStartTime"`

		// MsftMeetingID The microsoft meeting ID of the old meeting
		MsftMeetingID string `json:"msftMeetingID"`
	} `json:"oldMeeting"`
}

// ReschedulingRequestNewMeeting defines model for ReschedulingRequestNewMeeting.
type ReschedulingRequestNewMeeting struct {
	// EndTime The start of the meeting denoted in *ISO 8601* format In the format: yyyy-mm-ddThh:mm:ssZ Where lowercase letters are replaced by their numerical values
	EndTime time.Time `json:"endTime"`

	// Location The location of the meeting
	Location string `json:"location"`

	// MeetingDuration The length of the meeting, denoted in **ISO 8601** format. - Example:
	//   - **1 hour** → `'PT1H'`
	//   - **2 hours, 30 minutes** → `'PT2H30M'`
	// - `'P'` is the duration designator. - `'T'` separates date and time components. - `'H'` (hours) and `'M'` (minutes) specify the time duration. - If omitted, the default duration is **30 minutes** (`'PT30M'`).
	MeetingDuration string `json:"meetingDuration"`

	// StartTime The start of the meeting denoted in *ISO 8601* format In the format: yyyy-mm-ddThh:mm:ssZ Where lowercase letters are replaced by their numerical values
	StartTime time.Time `json:"startTime"`

	// Title name of the meeting
	Title string `json:"title"`
}

// ReschedulingRequestOldMeeting defines model for ReschedulingRequestOldMeeting.
type ReschedulingRequestOldMeeting struct {
	// MeetingId The meeting ID of the old meeting
	MeetingId uint32 `json:"meetingId"`

	// MsftMeetingID The microsoft meeting ID of the old meeting
	MsftMeetingID string `json:"msftMeetingID"`
}

// ReschedulingRequestSingleBodySchema Request body of the details of the old meeting
type ReschedulingRequestSingleBodySchema struct {
	// MsftMeetingID The microsoft meeting ID of the old meeting
	MsftMeetingID string `json:"msftMeetingID"`
}

// Room defines model for Room.
type Room struct {
	Email openapi_types.Email `json:"email"`
	Name  string              `json:"name"`
}

// SchedulingSlotsBodySchema Roughly maps to [MSFT Find Meeting Schema](https://learn.microsoft.com/en-us/graph/api/user-findmeetingtimes?view=graph-rest-1.0&tabs=http#request-body)
type SchedulingSlotsBodySchema struct {
	Attendees           []AttendeeBase `json:"attendees"`
	IsOrganizerOptional bool           `json:"isOrganizerOptional"`

	// LocationConstraint Maps directly to [MSFT locationConstraint](https://learn.microsoft.com/en-us/graph/api/resources/locationconstraint?view=graph-rest-1.0)
	LocationConstraint LocationConstraint `json:"locationConstraint"`
	MaxCandidates      *int32             `json:"maxCandidates,omitempty"`

	// MeetingDuration The length of the meeting, denoted in **ISO 8601** format. - Example:
	//   - **1 hour** → `'PT1H'`
	//   - **2 hours, 30 minutes** → `'PT2H30M'`
	// - `'P'` is the duration designator. - `'T'` separates date and time components. - `'H'` (hours) and `'M'` (minutes) specify the time duration. - If omitted, the default duration is **30 minutes** (`'PT30M'`).
	MeetingDuration string `json:"meetingDuration"`

	// MeetingName custom field, this is used for the AI model
	MeetingName               string   `json:"meetingName"`
	MinimumAttendeePercentage *float64 `json:"minimumAttendeePercentage,omitempty"`

	// TimeConstraint Maps directly to [MSFT timeConstraint](https://learn.microsoft.com/en-us/graph/api/resources/timeconstraint?view=graph-rest-1.0)
	TimeConstraint TimeConstraint `json:"timeConstraint"`
}

// SchedulingSlotsSuccessResponseBody Maps roughly to [MSFT meetingTimeSuggestionsResult](https://learn.microsoft.com/en-us/graph/api/resources/meetingtimesuggestionsresult?view=graph-rest-1.0)
type SchedulingSlotsSuccessResponseBody struct {
	// EmptySuggestionsReason Maps directly to [MSFT emptySuggestionsReason](https://learn.microsoft.com/en-us/graph/api/resources/meetingtimesuggestionsresult?view=graph-rest-1.0)
	EmptySuggestionsReason *EmptySuggestionsReason  `json:"emptySuggestionsReason,omitempty"`
	MeetingTimeSuggestions *[]MeetingTimeSuggestion `json:"meetingTimeSuggestions,omitempty"`
}

// SlotifyGroup defines model for SlotifyGroup.
type SlotifyGroup struct {
	Id   uint32 `json:"id"`
	Name string `json:"name"`
}

// SlotifyGroupCreate defines model for SlotifyGroupCreate.
type SlotifyGroupCreate struct {
	Name string `json:"name"`
}

// TimeConstraint Maps directly to [MSFT timeConstraint](https://learn.microsoft.com/en-us/graph/api/resources/timeconstraint?view=graph-rest-1.0)
type TimeConstraint struct {
	ActivityDomain *string           `json:"activityDomain,omitempty"`
	TimeSlots      []MeetingTimeSlot `json:"timeSlots"`
}

// User defines model for User.
type User struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	Id        uint32              `json:"id"`
	LastName  string              `json:"lastName"`
}

// UserCreate defines model for UserCreate.
type UserCreate struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	LastName  string              `json:"lastName"`
}

// RescheduleRequests defines model for RescheduleRequests.
type RescheduleRequests = []RescheduleRequest

// SchedulingSlotsSuccessResponse Maps roughly to [MSFT meetingTimeSuggestionsResult](https://learn.microsoft.com/en-us/graph/api/resources/meetingtimesuggestionsresult?view=graph-rest-1.0)
type SchedulingSlotsSuccessResponse = SchedulingSlotsSuccessResponseBody

// GetAPIAuthCallbackParams defines parameters for GetAPIAuthCallback.
type GetAPIAuthCallbackParams struct {
	Code  string `form:"code" json:"code"`
	State string `form:"state" json:"state"`
}

// GetAPICalendarEventParams defines parameters for GetAPICalendarEvent.
type GetAPICalendarEventParams struct {
	MsftID string `form:"msftID" json:"msftID"`
}

// GetAPICalendarMeParams defines parameters for GetAPICalendarMe.
type GetAPICalendarMeParams struct {
	Start time.Time `form:"start" json:"start"`
	End   time.Time `form:"end" json:"end"`
}

// GetAPICalendarUserIDParams defines parameters for GetAPICalendarUserID.
type GetAPICalendarUserIDParams struct {
	Start time.Time `form:"start" json:"start"`
	End   time.Time `form:"end" json:"end"`
}

// GetAPIInvitesMeParams defines parameters for GetAPIInvitesMe.
type GetAPIInvitesMeParams struct {
	// Status Invite status
	Status    *InviteStatus `form:"status,omitempty" json:"status,omitempty"`
	PageToken *int          `form:"pageToken,omitempty" json:"pageToken,omitempty"`
	Limit     int           `form:"limit" json:"limit"`
}

// PatchAPIInvitesInviteIDJSONBody defines parameters for PatchAPIInvitesInviteID.
type PatchAPIInvitesInviteIDJSONBody struct {
	Message string `json:"message"`
}

// GetAPIMSFTGroupsParams defines parameters for GetAPIMSFTGroups.
type GetAPIMSFTGroupsParams struct {
	// Name Microsoft group name
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// GetAPIMSFTGroupsGroupIDUsersParams defines parameters for GetAPIMSFTGroupsGroupIDUsers.
type GetAPIMSFTGroupsGroupIDUsersParams struct {
	NextLink *string `form:"nextLink,omitempty" json:"nextLink,omitempty"`
	Limit    int     `form:"limit" json:"limit"`
}

// GetAPIMSFTUsersParams defines parameters for GetAPIMSFTUsers.
type GetAPIMSFTUsersParams struct {
	NextLink *string `form:"nextLink,omitempty" json:"nextLink,omitempty"`
	Limit    int     `form:"limit" json:"limit"`
}

// GetAPIMSFTUsersSearchParams defines parameters for GetAPIMSFTUsersSearch.
type GetAPIMSFTUsersSearchParams struct {
	// Search Search parameter for Microsoft users, can be first name, surname, or email
	Search   *string `form:"search,omitempty" json:"search,omitempty"`
	NextLink *string `form:"nextLink,omitempty" json:"nextLink,omitempty"`
	Limit    int     `form:"limit" json:"limit"`
}

// GetAPISlotifyGroupsMeParams defines parameters for GetAPISlotifyGroupsMe.
type GetAPISlotifyGroupsMeParams struct {
	PageToken *int `form:"pageToken,omitempty" json:"pageToken,omitempty"`
	Limit     int  `form:"limit" json:"limit"`
}

// GetAPISlotifyGroupsSlotifyGroupIDInvitesParams defines parameters for GetAPISlotifyGroupsSlotifyGroupIDInvites.
type GetAPISlotifyGroupsSlotifyGroupIDInvitesParams struct {
	// Status Invite status
	Status    *InviteStatus `form:"status,omitempty" json:"status,omitempty"`
	PageToken *int          `form:"pageToken,omitempty" json:"pageToken,omitempty"`
	Limit     int           `form:"limit" json:"limit"`
}

// GetAPISlotifyGroupsSlotifyGroupIDUsersParams defines parameters for GetAPISlotifyGroupsSlotifyGroupIDUsers.
type GetAPISlotifyGroupsSlotifyGroupIDUsersParams struct {
	PageToken *int `form:"pageToken,omitempty" json:"pageToken,omitempty"`
	Limit     int  `form:"limit" json:"limit"`
}

// GetAPIUsersParams defines parameters for GetAPIUsers.
type GetAPIUsersParams struct {
	// Email Email of user to search for
	Email *openapi_types.Email `form:"email,omitempty" json:"email,omitempty"`

	// Name Name of user to search for
	Name      *string `form:"name,omitempty" json:"name,omitempty"`
	PageToken *int    `form:"pageToken,omitempty" json:"pageToken,omitempty"`
	Limit     int     `form:"limit" json:"limit"`
}

// PostAPICalendarMeJSONRequestBody defines body for PostAPICalendarMe for application/json ContentType.
type PostAPICalendarMeJSONRequestBody = CalendarEvent

// PostAPIInvitesJSONRequestBody defines body for PostAPIInvites for application/json ContentType.
type PostAPIInvitesJSONRequestBody = InviteCreate

// PatchAPIInvitesInviteIDJSONRequestBody defines body for PatchAPIInvitesInviteID for application/json ContentType.
type PatchAPIInvitesInviteIDJSONRequestBody PatchAPIInvitesInviteIDJSONBody

// PostAPIRescheduleCheckJSONRequestBody defines body for PostAPIRescheduleCheck for application/json ContentType.
type PostAPIRescheduleCheckJSONRequestBody = ReschedulingCheckBodySchema

// PostAPIRescheduleRequestReplaceJSONRequestBody defines body for PostAPIRescheduleRequestReplace for application/json ContentType.
type PostAPIRescheduleRequestReplaceJSONRequestBody = ReschedulingRequestBodySchema

// PostAPIRescheduleRequestSingleJSONRequestBody defines body for PostAPIRescheduleRequestSingle for application/json ContentType.
type PostAPIRescheduleRequestSingleJSONRequestBody = ReschedulingRequestSingleBodySchema

// PatchAPIRescheduleRequestRequestIDAcceptJSONRequestBody defines body for PatchAPIRescheduleRequestRequestIDAccept for application/json ContentType.
type PatchAPIRescheduleRequestRequestIDAcceptJSONRequestBody = ReschedulingRequestAcceptBodySchema

// PostAPISchedulingSlotsJSONRequestBody defines body for PostAPISchedulingSlots for application/json ContentType.
type PostAPISchedulingSlotsJSONRequestBody = SchedulingSlotsBodySchema

// PostAPISlotifyGroupsJSONRequestBody defines body for PostAPISlotifyGroups for application/json ContentType.
type PostAPISlotifyGroupsJSONRequestBody = SlotifyGroupCreate

// PostAPIUsersJSONRequestBody defines body for PostAPIUsers for application/json ContentType.
type PostAPIUsersJSONRequestBody = UserCreate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Auth route for authorisation code flow.
	// (GET /api/auth/callback)
	GetAPIAuthCallback(w http.ResponseWriter, r *http.Request, params GetAPIAuthCallbackParams)
	// Get calendar event by microsoft id.
	// (GET /api/calendar/event)
	GetAPICalendarEvent(w http.ResponseWriter, r *http.Request, params GetAPICalendarEventParams)
	// Get a user's calendar events for a given time range.
	// (GET /api/calendar/me)
	GetAPICalendarMe(w http.ResponseWriter, r *http.Request, params GetAPICalendarMeParams)
	// Create a new calendar event.
	// (POST /api/calendar/me)
	PostAPICalendarMe(w http.ResponseWriter, r *http.Request)
	// Get a specific user's calendar events for a given time range.
	// (GET /api/calendar/{userID})
	GetAPICalendarUserID(w http.ResponseWriter, r *http.Request, userID uint32, params GetAPICalendarUserIDParams)
	// Subscribe to notifications eventstream.
	// (GET /api/events)
	RenderEvent(w http.ResponseWriter, r *http.Request)
	// Healthcheck route.
	// (GET /api/healthcheck)
	GetAPIHealthcheck(w http.ResponseWriter, r *http.Request)
	// Create a new invite
	// (POST /api/invites)
	PostAPIInvites(w http.ResponseWriter, r *http.Request)
	// Get all invites for logged in user、requires pageToken.
	// (GET /api/invites/me)
	GetAPIInvitesMe(w http.ResponseWriter, r *http.Request, params GetAPIInvitesMeParams)
	// Delete an invite
	// (DELETE /api/invites/{inviteID})
	DeleteAPIInvitesInviteID(w http.ResponseWriter, r *http.Request, inviteID uint32)
	// Update an invite with a new message
	// (PATCH /api/invites/{inviteID})
	PatchAPIInvitesInviteID(w http.ResponseWriter, r *http.Request, inviteID uint32)
	// Accept a new group invite and add member to slotify group.
	// (PATCH /api/invites/{inviteID}/accept)
	PatchAPIInvitesInviteIDAccept(w http.ResponseWriter, r *http.Request, inviteID uint32)
	// Decline an invite
	// (PATCH /api/invites/{inviteID}/decline)
	PatchAPIInvitesInviteIDDecline(w http.ResponseWriter, r *http.Request, inviteID uint32)
	// Get a Microsoft group by query params.
	// (GET /api/msft-groups)
	GetAPIMSFTGroups(w http.ResponseWriter, r *http.Request, params GetAPIMSFTGroupsParams)
	// Get all Microsoft groups's id for current user.
	// (GET /api/msft-groups/me)
	GetAPIMSFTGroupsMe(w http.ResponseWriter, r *http.Request)
	// Get a Microsoft group by id.
	// (GET /api/msft-groups/{groupID})
	GetAPIMSFTGroupsGroupID(w http.ResponseWriter, r *http.Request, groupID string)
	// Get all members of a Microsoft group.
	// (GET /api/msft-groups/{groupID}/users)
	GetAPIMSFTGroupsGroupIDUsers(w http.ResponseWriter, r *http.Request, groupID string, params GetAPIMSFTGroupsGroupIDUsersParams)
	// Get all users from Microsoft
	// (GET /api/msft-users)
	GetAPIMSFTUsers(w http.ResponseWriter, r *http.Request, params GetAPIMSFTUsersParams)
	// Get users from Microsoft based on name and email
	// (GET /api/msft-users/search)
	GetAPIMSFTUsersSearch(w http.ResponseWriter, r *http.Request, params GetAPIMSFTUsersSearchParams)
	// Mark a notification as being read.
	// (PATCH /api/notifications/{notificationID}/read)
	PatchAPINotificationsNotificationIDRead(w http.ResponseWriter, r *http.Request, notificationID uint32)
	// Refresh Slotify access token and refresh token.
	// (POST /api/refresh)
	PostAPIRefresh(w http.ResponseWriter, r *http.Request)
	// Check if the old meeting can be rescheduled
	// (POST /api/reschedule/check)
	PostAPIRescheduleCheck(w http.ResponseWriter, r *http.Request)
	// Create a request to reschedule the old meeting for a new meeting.
	// (POST /api/reschedule/request/replace)
	PostAPIRescheduleRequestReplace(w http.ResponseWriter, r *http.Request)
	// Request to reschedule the old meeting by itself
	// (POST /api/reschedule/request/single)
	PostAPIRescheduleRequestSingle(w http.ResponseWriter, r *http.Request)
	// Get all reschedule requests by request id.
	// (GET /api/reschedule/request/{requestID})
	GetAPIRescheduleRequestRequestID(w http.ResponseWriter, r *http.Request, requestID uint32)
	// Accept a reschedule request by request id.
	// (PATCH /api/reschedule/request/{requestID}/accept)
	PatchAPIRescheduleRequestRequestIDAccept(w http.ResponseWriter, r *http.Request, requestID uint32)
	// Reject a reschedule request by id.
	// (PATCH /api/reschedule/request/{requestID}/reject)
	PatchAPIRescheduleRequestRequestIDReject(w http.ResponseWriter, r *http.Request, requestID uint32)
	// Get all reschedule requests for current user.
	// (GET /api/reschedule/requests/me)
	GetAPIRescheduleRequestsMe(w http.ResponseWriter, r *http.Request)
	// Get all possible rooms.
	// (GET /api/rooms/all)
	GetAPIRoomsAll(w http.ResponseWriter, r *http.Request)
	// Idempotent route, just returns appropriate time slots along with their respective ratings.
	// (POST /api/scheduling/slots)
	PostAPISchedulingSlots(w http.ResponseWriter, r *http.Request)
	// Create a new slotifyGroup.
	// (POST /api/slotify-groups)
	PostAPISlotifyGroups(w http.ResponseWriter, r *http.Request)
	// Get all slotify-groups for current user.
	// (GET /api/slotify-groups/me)
	GetAPISlotifyGroupsMe(w http.ResponseWriter, r *http.Request, params GetAPISlotifyGroupsMeParams)
	// Delete a slotifyGroup by id.
	// (DELETE /api/slotify-groups/{slotifyGroupID})
	DeleteAPISlotifyGroupsSlotifyGroupID(w http.ResponseWriter, r *http.Request, slotifyGroupID uint32)
	// Get a slotifyGroup by id.
	// (GET /api/slotify-groups/{slotifyGroupID})
	GetAPISlotifyGroupsSlotifyGroupID(w http.ResponseWriter, r *http.Request, slotifyGroupID uint32)
	// Get all invites for a slotify group
	// (GET /api/slotify-groups/{slotifyGroupID}/invites)
	GetAPISlotifyGroupsSlotifyGroupIDInvites(w http.ResponseWriter, r *http.Request, slotifyGroupID uint32, params GetAPISlotifyGroupsSlotifyGroupIDInvitesParams)
	// Have a member leave from a slotify group
	// (DELETE /api/slotify-groups/{slotifyGroupID}/leave/me)
	DeleteSlotifyGroupsSlotifyGroupIDLeaveMe(w http.ResponseWriter, r *http.Request, slotifyGroupID uint32)
	// Get all members of a slotifyGroup.
	// (GET /api/slotify-groups/{slotifyGroupID}/users)
	GetAPISlotifyGroupsSlotifyGroupIDUsers(w http.ResponseWriter, r *http.Request, slotifyGroupID uint32, params GetAPISlotifyGroupsSlotifyGroupIDUsersParams)
	// Search for users with by email and name. Only provide one of the query params or none as well as the page token.
	// (GET /api/users)
	GetAPIUsers(w http.ResponseWriter, r *http.Request, params GetAPIUsersParams)
	// Create a new user.
	// (POST /api/users)
	PostAPIUsers(w http.ResponseWriter, r *http.Request)
	// Get current user's details.
	// (GET /api/users/me)
	GetAPIUsersMe(w http.ResponseWriter, r *http.Request)
	// Logout user.
	// (POST /api/users/me/logout)
	PostAPIUsersMeLogout(w http.ResponseWriter, r *http.Request)
	// Get user's unread notifications.
	// (GET /api/users/me/notifications)
	GetAPIUsersMeNotifications(w http.ResponseWriter, r *http.Request)
	// Delete a user by id.
	// (DELETE /api/users/{userID})
	DeleteAPIUsersUserID(w http.ResponseWriter, r *http.Request, userID uint32)
	// Get a user by id.
	// (GET /api/users/{userID})
	GetAPIUsersUserID(w http.ResponseWriter, r *http.Request, userID uint32)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAPIAuthCallback operation middleware
func (siw *ServerInterfaceWrapper) GetAPIAuthCallback(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIAuthCallbackParams

	// ------------- Required query parameter "code" -------------

	if paramValue := r.URL.Query().Get("code"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "code"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "code", r.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Required query parameter "state" -------------

	if paramValue := r.URL.Query().Get("state"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "state"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "state", r.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIAuthCallback(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPICalendarEvent operation middleware
func (siw *ServerInterfaceWrapper) GetAPICalendarEvent(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPICalendarEventParams

	// ------------- Required query parameter "msftID" -------------

	if paramValue := r.URL.Query().Get("msftID"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "msftID"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "msftID", r.URL.Query(), &params.MsftID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "msftID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPICalendarEvent(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPICalendarMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPICalendarMe(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPICalendarMeParams

	// ------------- Required query parameter "start" -------------

	if paramValue := r.URL.Query().Get("start"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "start"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "start", r.URL.Query(), &params.Start)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start", Err: err})
		return
	}

	// ------------- Required query parameter "end" -------------

	if paramValue := r.URL.Query().Get("end"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "end"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "end", r.URL.Query(), &params.End)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "end", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPICalendarMe(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPICalendarMe operation middleware
func (siw *ServerInterfaceWrapper) PostAPICalendarMe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPICalendarMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPICalendarUserID operation middleware
func (siw *ServerInterfaceWrapper) GetAPICalendarUserID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userID" -------------
	var userID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "userID", mux.Vars(r)["userID"], &userID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userID", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPICalendarUserIDParams

	// ------------- Required query parameter "start" -------------

	if paramValue := r.URL.Query().Get("start"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "start"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "start", r.URL.Query(), &params.Start)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start", Err: err})
		return
	}

	// ------------- Required query parameter "end" -------------

	if paramValue := r.URL.Query().Get("end"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "end"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "end", r.URL.Query(), &params.End)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "end", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPICalendarUserID(w, r, userID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RenderEvent operation middleware
func (siw *ServerInterfaceWrapper) RenderEvent(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RenderEvent(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIHealthcheck operation middleware
func (siw *ServerInterfaceWrapper) GetAPIHealthcheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIHealthcheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIInvites operation middleware
func (siw *ServerInterfaceWrapper) PostAPIInvites(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIInvites(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIInvitesMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPIInvitesMe(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIInvitesMeParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "pageToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageToken", r.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageToken", Err: err})
		return
	}

	// ------------- Required query parameter "limit" -------------

	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIInvitesMe(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAPIInvitesInviteID operation middleware
func (siw *ServerInterfaceWrapper) DeleteAPIInvitesInviteID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "inviteID" -------------
	var inviteID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "inviteID", mux.Vars(r)["inviteID"], &inviteID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inviteID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAPIInvitesInviteID(w, r, inviteID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchAPIInvitesInviteID operation middleware
func (siw *ServerInterfaceWrapper) PatchAPIInvitesInviteID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "inviteID" -------------
	var inviteID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "inviteID", mux.Vars(r)["inviteID"], &inviteID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inviteID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAPIInvitesInviteID(w, r, inviteID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchAPIInvitesInviteIDAccept operation middleware
func (siw *ServerInterfaceWrapper) PatchAPIInvitesInviteIDAccept(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "inviteID" -------------
	var inviteID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "inviteID", mux.Vars(r)["inviteID"], &inviteID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inviteID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAPIInvitesInviteIDAccept(w, r, inviteID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchAPIInvitesInviteIDDecline operation middleware
func (siw *ServerInterfaceWrapper) PatchAPIInvitesInviteIDDecline(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "inviteID" -------------
	var inviteID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "inviteID", mux.Vars(r)["inviteID"], &inviteID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inviteID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAPIInvitesInviteIDDecline(w, r, inviteID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIMSFTGroups operation middleware
func (siw *ServerInterfaceWrapper) GetAPIMSFTGroups(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIMSFTGroupsParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIMSFTGroups(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIMSFTGroupsMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPIMSFTGroupsMe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIMSFTGroupsMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIMSFTGroupsGroupID operation middleware
func (siw *ServerInterfaceWrapper) GetAPIMSFTGroupsGroupID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "groupID" -------------
	var groupID string

	err = runtime.BindStyledParameterWithOptions("simple", "groupID", mux.Vars(r)["groupID"], &groupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIMSFTGroupsGroupID(w, r, groupID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIMSFTGroupsGroupIDUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAPIMSFTGroupsGroupIDUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "groupID" -------------
	var groupID string

	err = runtime.BindStyledParameterWithOptions("simple", "groupID", mux.Vars(r)["groupID"], &groupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupID", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIMSFTGroupsGroupIDUsersParams

	// ------------- Optional query parameter "nextLink" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextLink", r.URL.Query(), &params.NextLink)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextLink", Err: err})
		return
	}

	// ------------- Required query parameter "limit" -------------

	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIMSFTGroupsGroupIDUsers(w, r, groupID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIMSFTUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAPIMSFTUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIMSFTUsersParams

	// ------------- Optional query parameter "nextLink" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextLink", r.URL.Query(), &params.NextLink)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextLink", Err: err})
		return
	}

	// ------------- Required query parameter "limit" -------------

	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIMSFTUsers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIMSFTUsersSearch operation middleware
func (siw *ServerInterfaceWrapper) GetAPIMSFTUsersSearch(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIMSFTUsersSearchParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "nextLink" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextLink", r.URL.Query(), &params.NextLink)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextLink", Err: err})
		return
	}

	// ------------- Required query parameter "limit" -------------

	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIMSFTUsersSearch(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchAPINotificationsNotificationIDRead operation middleware
func (siw *ServerInterfaceWrapper) PatchAPINotificationsNotificationIDRead(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "notificationID" -------------
	var notificationID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "notificationID", mux.Vars(r)["notificationID"], &notificationID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "notificationID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAPINotificationsNotificationIDRead(w, r, notificationID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIRefresh operation middleware
func (siw *ServerInterfaceWrapper) PostAPIRefresh(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIRefresh(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIRescheduleCheck operation middleware
func (siw *ServerInterfaceWrapper) PostAPIRescheduleCheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIRescheduleCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIRescheduleRequestReplace operation middleware
func (siw *ServerInterfaceWrapper) PostAPIRescheduleRequestReplace(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIRescheduleRequestReplace(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIRescheduleRequestSingle operation middleware
func (siw *ServerInterfaceWrapper) PostAPIRescheduleRequestSingle(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIRescheduleRequestSingle(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIRescheduleRequestRequestID operation middleware
func (siw *ServerInterfaceWrapper) GetAPIRescheduleRequestRequestID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "requestID" -------------
	var requestID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "requestID", mux.Vars(r)["requestID"], &requestID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIRescheduleRequestRequestID(w, r, requestID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchAPIRescheduleRequestRequestIDAccept operation middleware
func (siw *ServerInterfaceWrapper) PatchAPIRescheduleRequestRequestIDAccept(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "requestID" -------------
	var requestID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "requestID", mux.Vars(r)["requestID"], &requestID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAPIRescheduleRequestRequestIDAccept(w, r, requestID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchAPIRescheduleRequestRequestIDReject operation middleware
func (siw *ServerInterfaceWrapper) PatchAPIRescheduleRequestRequestIDReject(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "requestID" -------------
	var requestID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "requestID", mux.Vars(r)["requestID"], &requestID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAPIRescheduleRequestRequestIDReject(w, r, requestID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIRescheduleRequestsMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPIRescheduleRequestsMe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIRescheduleRequestsMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIRoomsAll operation middleware
func (siw *ServerInterfaceWrapper) GetAPIRoomsAll(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIRoomsAll(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPISchedulingSlots operation middleware
func (siw *ServerInterfaceWrapper) PostAPISchedulingSlots(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPISchedulingSlots(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPISlotifyGroups operation middleware
func (siw *ServerInterfaceWrapper) PostAPISlotifyGroups(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPISlotifyGroups(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPISlotifyGroupsMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPISlotifyGroupsMe(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPISlotifyGroupsMeParams

	// ------------- Optional query parameter "pageToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageToken", r.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageToken", Err: err})
		return
	}

	// ------------- Required query parameter "limit" -------------

	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPISlotifyGroupsMe(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAPISlotifyGroupsSlotifyGroupID operation middleware
func (siw *ServerInterfaceWrapper) DeleteAPISlotifyGroupsSlotifyGroupID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "slotifyGroupID" -------------
	var slotifyGroupID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "slotifyGroupID", mux.Vars(r)["slotifyGroupID"], &slotifyGroupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slotifyGroupID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAPISlotifyGroupsSlotifyGroupID(w, r, slotifyGroupID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPISlotifyGroupsSlotifyGroupID operation middleware
func (siw *ServerInterfaceWrapper) GetAPISlotifyGroupsSlotifyGroupID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "slotifyGroupID" -------------
	var slotifyGroupID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "slotifyGroupID", mux.Vars(r)["slotifyGroupID"], &slotifyGroupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slotifyGroupID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPISlotifyGroupsSlotifyGroupID(w, r, slotifyGroupID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPISlotifyGroupsSlotifyGroupIDInvites operation middleware
func (siw *ServerInterfaceWrapper) GetAPISlotifyGroupsSlotifyGroupIDInvites(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "slotifyGroupID" -------------
	var slotifyGroupID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "slotifyGroupID", mux.Vars(r)["slotifyGroupID"], &slotifyGroupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slotifyGroupID", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPISlotifyGroupsSlotifyGroupIDInvitesParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "pageToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageToken", r.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageToken", Err: err})
		return
	}

	// ------------- Required query parameter "limit" -------------

	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPISlotifyGroupsSlotifyGroupIDInvites(w, r, slotifyGroupID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteSlotifyGroupsSlotifyGroupIDLeaveMe operation middleware
func (siw *ServerInterfaceWrapper) DeleteSlotifyGroupsSlotifyGroupIDLeaveMe(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "slotifyGroupID" -------------
	var slotifyGroupID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "slotifyGroupID", mux.Vars(r)["slotifyGroupID"], &slotifyGroupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slotifyGroupID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSlotifyGroupsSlotifyGroupIDLeaveMe(w, r, slotifyGroupID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPISlotifyGroupsSlotifyGroupIDUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAPISlotifyGroupsSlotifyGroupIDUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "slotifyGroupID" -------------
	var slotifyGroupID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "slotifyGroupID", mux.Vars(r)["slotifyGroupID"], &slotifyGroupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slotifyGroupID", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPISlotifyGroupsSlotifyGroupIDUsersParams

	// ------------- Optional query parameter "pageToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageToken", r.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageToken", Err: err})
		return
	}

	// ------------- Required query parameter "limit" -------------

	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPISlotifyGroupsSlotifyGroupIDUsers(w, r, slotifyGroupID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAPIUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIUsersParams

	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", r.URL.Query(), &params.Email)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "email", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "pageToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageToken", r.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageToken", Err: err})
		return
	}

	// ------------- Required query parameter "limit" -------------

	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIUsers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIUsers operation middleware
func (siw *ServerInterfaceWrapper) PostAPIUsers(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIUsersMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPIUsersMe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIUsersMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIUsersMeLogout operation middleware
func (siw *ServerInterfaceWrapper) PostAPIUsersMeLogout(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIUsersMeLogout(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIUsersMeNotifications operation middleware
func (siw *ServerInterfaceWrapper) GetAPIUsersMeNotifications(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIUsersMeNotifications(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAPIUsersUserID operation middleware
func (siw *ServerInterfaceWrapper) DeleteAPIUsersUserID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userID" -------------
	var userID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "userID", mux.Vars(r)["userID"], &userID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAPIUsersUserID(w, r, userID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIUsersUserID operation middleware
func (siw *ServerInterfaceWrapper) GetAPIUsersUserID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userID" -------------
	var userID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "userID", mux.Vars(r)["userID"], &userID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIUsersUserID(w, r, userID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/api/auth/callback", wrapper.GetAPIAuthCallback).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/calendar/event", wrapper.GetAPICalendarEvent).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/calendar/me", wrapper.GetAPICalendarMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/calendar/me", wrapper.PostAPICalendarMe).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/calendar/{userID}", wrapper.GetAPICalendarUserID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/events", wrapper.RenderEvent).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/healthcheck", wrapper.GetAPIHealthcheck).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/invites", wrapper.PostAPIInvites).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/invites/me", wrapper.GetAPIInvitesMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/invites/{inviteID}", wrapper.DeleteAPIInvitesInviteID).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/invites/{inviteID}", wrapper.PatchAPIInvitesInviteID).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/api/invites/{inviteID}/accept", wrapper.PatchAPIInvitesInviteIDAccept).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/api/invites/{inviteID}/decline", wrapper.PatchAPIInvitesInviteIDDecline).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/api/msft-groups", wrapper.GetAPIMSFTGroups).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/msft-groups/me", wrapper.GetAPIMSFTGroupsMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/msft-groups/{groupID}", wrapper.GetAPIMSFTGroupsGroupID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/msft-groups/{groupID}/users", wrapper.GetAPIMSFTGroupsGroupIDUsers).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/msft-users", wrapper.GetAPIMSFTUsers).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/msft-users/search", wrapper.GetAPIMSFTUsersSearch).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/notifications/{notificationID}/read", wrapper.PatchAPINotificationsNotificationIDRead).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/api/refresh", wrapper.PostAPIRefresh).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/reschedule/check", wrapper.PostAPIRescheduleCheck).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/reschedule/request/replace", wrapper.PostAPIRescheduleRequestReplace).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/reschedule/request/single", wrapper.PostAPIRescheduleRequestSingle).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/reschedule/request/{requestID}", wrapper.GetAPIRescheduleRequestRequestID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/reschedule/request/{requestID}/accept", wrapper.PatchAPIRescheduleRequestRequestIDAccept).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/api/reschedule/request/{requestID}/reject", wrapper.PatchAPIRescheduleRequestRequestIDReject).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/api/reschedule/requests/me", wrapper.GetAPIRescheduleRequestsMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/rooms/all", wrapper.GetAPIRoomsAll).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/scheduling/slots", wrapper.PostAPISchedulingSlots).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups", wrapper.PostAPISlotifyGroups).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups/me", wrapper.GetAPISlotifyGroupsMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups/{slotifyGroupID}", wrapper.DeleteAPISlotifyGroupsSlotifyGroupID).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups/{slotifyGroupID}", wrapper.GetAPISlotifyGroupsSlotifyGroupID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups/{slotifyGroupID}/invites", wrapper.GetAPISlotifyGroupsSlotifyGroupIDInvites).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups/{slotifyGroupID}/leave/me", wrapper.DeleteSlotifyGroupsSlotifyGroupIDLeaveMe).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/slotify-groups/{slotifyGroupID}/users", wrapper.GetAPISlotifyGroupsSlotifyGroupIDUsers).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/users", wrapper.GetAPIUsers).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/users", wrapper.PostAPIUsers).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/users/me", wrapper.GetAPIUsersMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/users/me/logout", wrapper.PostAPIUsersMeLogout).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/users/me/notifications", wrapper.GetAPIUsersMeNotifications).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/users/{userID}", wrapper.DeleteAPIUsersUserID).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/users/{userID}", wrapper.GetAPIUsersUserID).Methods("GET")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"wFguxglcRNdfrv8/AAD//03i73vMuQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
