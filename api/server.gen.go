// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AttendeeResponseStatus.
const (
	Accepted           AttendeeResponseStatus = "accepted"
	Declined           AttendeeResponseStatus = "declined"
	EntativelyAccepted AttendeeResponseStatus = "entativelyAccepted"
	None               AttendeeResponseStatus = "none"
	NotResponded       AttendeeResponseStatus = "notResponded"
	Organizer          AttendeeResponseStatus = "organizer"
)

// Defines values for AttendeeType.
const (
	Optional AttendeeType = "optional"
	Required AttendeeType = "required"
	Resource AttendeeType = "resource"
)

// Defines values for LocationRoomType.
const (
	BusinessAddress LocationRoomType = "businessAddress"
	ConferenceRoom  LocationRoomType = "conferenceRoom"
	Default         LocationRoomType = "default"
	GeoCoordinates  LocationRoomType = "geoCoordinates"
	HomeAddress     LocationRoomType = "homeAddress"
	Hotel           LocationRoomType = "hotel"
	LocalBusiness   LocationRoomType = "localBusiness"
	PostalAddress   LocationRoomType = "postalAddress"
	Restaurant      LocationRoomType = "restaurant"
	StreetAddress   LocationRoomType = "streetAddress"
)

// Attendee defines model for Attendee.
type Attendee struct {
	Email          *openapi_types.Email    `json:"email,omitempty"`
	ResponseStatus *AttendeeResponseStatus `json:"responseStatus,omitempty"`
	Type           *AttendeeType           `json:"type,omitempty"`
}

// AttendeeResponseStatus defines model for Attendee.ResponseStatus.
type AttendeeResponseStatus string

// AttendeeType defines model for Attendee.Type.
type AttendeeType string

// CalendarEvent defines model for CalendarEvent.
type CalendarEvent struct {
	Attendees   *[]Attendee          `json:"attendees,omitempty"`
	Body        *string              `json:"body,omitempty"`
	Created     *time.Time           `json:"created,omitempty"`
	EndTime     *string              `json:"endTime,omitempty"`
	Id          *string              `json:"id,omitempty"`
	IsCancelled *bool                `json:"isCancelled,omitempty"`
	JoinURL     *string              `json:"joinURL,omitempty"`
	Locations   *[]Location          `json:"locations,omitempty"`
	Organizer   *openapi_types.Email `json:"organizer,omitempty"`
	StartTime   *string              `json:"startTime,omitempty"`
	Subject     *string              `json:"subject,omitempty"`
	WebLink     *string              `json:"webLink,omitempty"`
}

// Group defines model for Group.
type Group struct {
	Id   uint32 `json:"id"`
	Name string `json:"name"`
}

// Location defines model for Location.
type Location struct {
	Id       *string           `json:"id,omitempty"`
	Name     *string           `json:"name,omitempty"`
	RoomType *LocationRoomType `json:"roomType,omitempty"`
	Street   *string           `json:"street,omitempty"`
}

// LocationRoomType defines model for Location.RoomType.
type LocationRoomType string

// Notification defines model for Notification.
type Notification struct {
	Created time.Time `json:"created"`
	Id      uint32    `json:"id"`
	Message string    `json:"message"`
}

// Team defines model for Team.
type Team struct {
	Id   uint32 `json:"id"`
	Name string `json:"name"`
}

// TeamCreate defines model for TeamCreate.
type TeamCreate struct {
	Name string `json:"name"`
}

// User defines model for User.
type User struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	Id        uint32              `json:"id"`
	LastName  string              `json:"lastName"`
}

// UserCreate defines model for UserCreate.
type UserCreate struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	LastName  string              `json:"lastName"`
}

// GetAPIAuthCallbackParams defines parameters for GetAPIAuthCallback.
type GetAPIAuthCallbackParams struct {
	Code  string `form:"code" json:"code"`
	State string `form:"state" json:"state"`
}

// GetAPICalendarMeParams defines parameters for GetAPICalendarMe.
type GetAPICalendarMeParams struct {
	Start time.Time `form:"start" json:"start"`
	End   time.Time `form:"end" json:"end"`
}

// GetAPIGroupsParams defines parameters for GetAPIGroups.
type GetAPIGroupsParams struct {
	// Name Group name
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// GetAPITeamsParams defines parameters for GetAPITeams.
type GetAPITeamsParams struct {
	// Name Team name
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// GetAPIUsersParams defines parameters for GetAPIUsers.
type GetAPIUsersParams struct {
	// Email Email of user
	Email *openapi_types.Email `form:"email,omitempty" json:"email,omitempty"`

	// FirstName First name of user
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty"`

	// LastName Last name of user
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty"`
}

// PostAPICalendarMeJSONRequestBody defines body for PostAPICalendarMe for application/json ContentType.
type PostAPICalendarMeJSONRequestBody = CalendarEvent

// PostAPITeamsJSONRequestBody defines body for PostAPITeams for application/json ContentType.
type PostAPITeamsJSONRequestBody = TeamCreate

// PostAPIUsersJSONRequestBody defines body for PostAPIUsers for application/json ContentType.
type PostAPIUsersJSONRequestBody = UserCreate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Auth route for authorisation code flow.
	// (GET /api/auth/callback)
	GetAPIAuthCallback(w http.ResponseWriter, r *http.Request, params GetAPIAuthCallbackParams)
	// Get a user's calendar events for a given time range.
	// (GET /api/calendar/me)
	GetAPICalendarMe(w http.ResponseWriter, r *http.Request, params GetAPICalendarMeParams)
	// CORS preflight for creating an event
	// (OPTIONS /api/calendar/me)
	OptionsAPICalendarMe(w http.ResponseWriter, r *http.Request)
	// Create a new calendar event.
	// (POST /api/calendar/me)
	PostAPICalendarMe(w http.ResponseWriter, r *http.Request)
	// Subscribe to notifications eventstream.
	// (GET /api/events)
	RenderEvent(w http.ResponseWriter, r *http.Request)
	// Get a group by query params.
	// (GET /api/groups)
	GetAPIGroups(w http.ResponseWriter, r *http.Request, params GetAPIGroupsParams)
	// Get all groups for current user.
	// (GET /api/groups/me)
	GetAPIGroupsMe(w http.ResponseWriter, r *http.Request)
	// Get a group by id.
	// (GET /api/groups/{groupID})
	GetAPIGroupsGroupID(w http.ResponseWriter, r *http.Request, groupID uint32)
	// Get all members of a group.
	// (GET /api/groups/{groupID}/users)
	GetAPIGroupsGroupIDUsers(w http.ResponseWriter, r *http.Request, groupID uint32)
	// Healthcheck route.
	// (GET /api/healthcheck)
	GetAPIHealthcheck(w http.ResponseWriter, r *http.Request)
	// Satisfy CORS preflight for marking a notification as read.
	// (OPTIONS /api/notifications/{notificationID}/read)
	OptionsAPINotificationsNotificationIDRead(w http.ResponseWriter, r *http.Request, notificationID uint32)
	// Mark a notification as being read.
	// (PATCH /api/notifications/{notificationID}/read)
	PatchAPINotificationsNotificationIDRead(w http.ResponseWriter, r *http.Request, notificationID uint32)
	// Refresh Slotify access token and refresh token.
	// (POST /api/refresh)
	PostAPIRefresh(w http.ResponseWriter, r *http.Request)
	// Get a team by query params.
	// (GET /api/teams)
	GetAPITeams(w http.ResponseWriter, r *http.Request, params GetAPITeamsParams)
	// Satisfy CORS preflight for creatingteams.
	// (OPTIONS /api/teams)
	OptionsAPITeams(w http.ResponseWriter, r *http.Request)
	// Create a new team.
	// (POST /api/teams)
	PostAPITeams(w http.ResponseWriter, r *http.Request)
	// Get all joinable teams for a user excluding teams they are already a part of.
	// (GET /api/teams/joinable/me)
	GetAPITeamsJoinableMe(w http.ResponseWriter, r *http.Request)
	// Get all teams for current user.
	// (GET /api/teams/me)
	GetAPITeamsMe(w http.ResponseWriter, r *http.Request)
	// Delete a team by id.
	// (DELETE /api/teams/{teamID})
	DeleteAPITeamsTeamID(w http.ResponseWriter, r *http.Request, teamID uint32)
	// Get a team by id.
	// (GET /api/teams/{teamID})
	GetAPITeamsTeamID(w http.ResponseWriter, r *http.Request, teamID uint32)
	// Get all members of a team.
	// (GET /api/teams/{teamID}/users)
	GetAPITeamsTeamIDUsers(w http.ResponseWriter, r *http.Request, teamID uint32)
	// Add current user to a team.
	// (POST /api/teams/{teamID}/users/me)
	PostAPITeamsTeamIDUsersMe(w http.ResponseWriter, r *http.Request, teamID uint32)
	// Add a user to a team.
	// (POST /api/teams/{teamID}/users/{userID})
	PostAPITeamsTeamIDUsersUserID(w http.ResponseWriter, r *http.Request, teamID uint32, userID uint32)
	// Get users by query params.
	// (GET /api/users)
	GetAPIUsers(w http.ResponseWriter, r *http.Request, params GetAPIUsersParams)
	// Create a new user.
	// (POST /api/users)
	PostAPIUsers(w http.ResponseWriter, r *http.Request)
	// Get current user's details.
	// (GET /api/users/me)
	GetAPIUsersMe(w http.ResponseWriter, r *http.Request)
	// Logout user.
	// (POST /api/users/me/logout)
	PostAPIUsersMeLogout(w http.ResponseWriter, r *http.Request)
	// Get user's unread notifications.
	// (GET /api/users/me/notifications)
	GetAPIUsersMeNotifications(w http.ResponseWriter, r *http.Request)
	// Delete a user by id.
	// (DELETE /api/users/{userID})
	DeleteAPIUsersUserID(w http.ResponseWriter, r *http.Request, userID uint32)
	// Get a user by id.
	// (GET /api/users/{userID})
	GetAPIUsersUserID(w http.ResponseWriter, r *http.Request, userID uint32)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAPIAuthCallback operation middleware
func (siw *ServerInterfaceWrapper) GetAPIAuthCallback(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIAuthCallbackParams

	// ------------- Required query parameter "code" -------------

	if paramValue := r.URL.Query().Get("code"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "code"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "code", r.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Required query parameter "state" -------------

	if paramValue := r.URL.Query().Get("state"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "state"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "state", r.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIAuthCallback(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPICalendarMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPICalendarMe(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPICalendarMeParams

	// ------------- Required query parameter "start" -------------

	if paramValue := r.URL.Query().Get("start"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "start"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "start", r.URL.Query(), &params.Start)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start", Err: err})
		return
	}

	// ------------- Required query parameter "end" -------------

	if paramValue := r.URL.Query().Get("end"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "end"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "end", r.URL.Query(), &params.End)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "end", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPICalendarMe(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OptionsAPICalendarMe operation middleware
func (siw *ServerInterfaceWrapper) OptionsAPICalendarMe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OptionsAPICalendarMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPICalendarMe operation middleware
func (siw *ServerInterfaceWrapper) PostAPICalendarMe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPICalendarMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RenderEvent operation middleware
func (siw *ServerInterfaceWrapper) RenderEvent(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RenderEvent(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIGroups operation middleware
func (siw *ServerInterfaceWrapper) GetAPIGroups(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIGroupsParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIGroups(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIGroupsMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPIGroupsMe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIGroupsMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIGroupsGroupID operation middleware
func (siw *ServerInterfaceWrapper) GetAPIGroupsGroupID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "groupID" -------------
	var groupID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "groupID", mux.Vars(r)["groupID"], &groupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIGroupsGroupID(w, r, groupID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIGroupsGroupIDUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAPIGroupsGroupIDUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "groupID" -------------
	var groupID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "groupID", mux.Vars(r)["groupID"], &groupID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIGroupsGroupIDUsers(w, r, groupID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIHealthcheck operation middleware
func (siw *ServerInterfaceWrapper) GetAPIHealthcheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIHealthcheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OptionsAPINotificationsNotificationIDRead operation middleware
func (siw *ServerInterfaceWrapper) OptionsAPINotificationsNotificationIDRead(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "notificationID" -------------
	var notificationID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "notificationID", mux.Vars(r)["notificationID"], &notificationID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "notificationID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OptionsAPINotificationsNotificationIDRead(w, r, notificationID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchAPINotificationsNotificationIDRead operation middleware
func (siw *ServerInterfaceWrapper) PatchAPINotificationsNotificationIDRead(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "notificationID" -------------
	var notificationID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "notificationID", mux.Vars(r)["notificationID"], &notificationID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "notificationID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAPINotificationsNotificationIDRead(w, r, notificationID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIRefresh operation middleware
func (siw *ServerInterfaceWrapper) PostAPIRefresh(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIRefresh(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPITeams operation middleware
func (siw *ServerInterfaceWrapper) GetAPITeams(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPITeamsParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPITeams(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OptionsAPITeams operation middleware
func (siw *ServerInterfaceWrapper) OptionsAPITeams(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OptionsAPITeams(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPITeams operation middleware
func (siw *ServerInterfaceWrapper) PostAPITeams(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPITeams(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPITeamsJoinableMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPITeamsJoinableMe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPITeamsJoinableMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPITeamsMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPITeamsMe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPITeamsMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAPITeamsTeamID operation middleware
func (siw *ServerInterfaceWrapper) DeleteAPITeamsTeamID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "teamID" -------------
	var teamID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "teamID", mux.Vars(r)["teamID"], &teamID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "teamID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAPITeamsTeamID(w, r, teamID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPITeamsTeamID operation middleware
func (siw *ServerInterfaceWrapper) GetAPITeamsTeamID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "teamID" -------------
	var teamID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "teamID", mux.Vars(r)["teamID"], &teamID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "teamID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPITeamsTeamID(w, r, teamID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPITeamsTeamIDUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAPITeamsTeamIDUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "teamID" -------------
	var teamID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "teamID", mux.Vars(r)["teamID"], &teamID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "teamID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPITeamsTeamIDUsers(w, r, teamID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPITeamsTeamIDUsersMe operation middleware
func (siw *ServerInterfaceWrapper) PostAPITeamsTeamIDUsersMe(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "teamID" -------------
	var teamID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "teamID", mux.Vars(r)["teamID"], &teamID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "teamID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPITeamsTeamIDUsersMe(w, r, teamID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPITeamsTeamIDUsersUserID operation middleware
func (siw *ServerInterfaceWrapper) PostAPITeamsTeamIDUsersUserID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "teamID" -------------
	var teamID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "teamID", mux.Vars(r)["teamID"], &teamID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "teamID", Err: err})
		return
	}

	// ------------- Path parameter "userID" -------------
	var userID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "userID", mux.Vars(r)["userID"], &userID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPITeamsTeamIDUsersUserID(w, r, teamID, userID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAPIUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIUsersParams

	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", r.URL.Query(), &params.Email)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "email", Err: err})
		return
	}

	// ------------- Optional query parameter "firstName" -------------

	err = runtime.BindQueryParameter("form", true, false, "firstName", r.URL.Query(), &params.FirstName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "firstName", Err: err})
		return
	}

	// ------------- Optional query parameter "lastName" -------------

	err = runtime.BindQueryParameter("form", true, false, "lastName", r.URL.Query(), &params.LastName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "lastName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIUsers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIUsers operation middleware
func (siw *ServerInterfaceWrapper) PostAPIUsers(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIUsersMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPIUsersMe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIUsersMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIUsersMeLogout operation middleware
func (siw *ServerInterfaceWrapper) PostAPIUsersMeLogout(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIUsersMeLogout(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIUsersMeNotifications operation middleware
func (siw *ServerInterfaceWrapper) GetAPIUsersMeNotifications(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIUsersMeNotifications(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAPIUsersUserID operation middleware
func (siw *ServerInterfaceWrapper) DeleteAPIUsersUserID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userID" -------------
	var userID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "userID", mux.Vars(r)["userID"], &userID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAPIUsersUserID(w, r, userID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIUsersUserID operation middleware
func (siw *ServerInterfaceWrapper) GetAPIUsersUserID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userID" -------------
	var userID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "userID", mux.Vars(r)["userID"], &userID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIUsersUserID(w, r, userID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/api/auth/callback", wrapper.GetAPIAuthCallback).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/calendar/me", wrapper.GetAPICalendarMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/calendar/me", wrapper.OptionsAPICalendarMe).Methods("OPTIONS")

	r.HandleFunc(options.BaseURL+"/api/calendar/me", wrapper.PostAPICalendarMe).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/events", wrapper.RenderEvent).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/groups", wrapper.GetAPIGroups).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/groups/me", wrapper.GetAPIGroupsMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/groups/{groupID}", wrapper.GetAPIGroupsGroupID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/groups/{groupID}/users", wrapper.GetAPIGroupsGroupIDUsers).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/healthcheck", wrapper.GetAPIHealthcheck).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/notifications/{notificationID}/read", wrapper.OptionsAPINotificationsNotificationIDRead).Methods("OPTIONS")

	r.HandleFunc(options.BaseURL+"/api/notifications/{notificationID}/read", wrapper.PatchAPINotificationsNotificationIDRead).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/api/refresh", wrapper.PostAPIRefresh).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/teams", wrapper.GetAPITeams).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/teams", wrapper.OptionsAPITeams).Methods("OPTIONS")

	r.HandleFunc(options.BaseURL+"/api/teams", wrapper.PostAPITeams).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/teams/joinable/me", wrapper.GetAPITeamsJoinableMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/teams/me", wrapper.GetAPITeamsMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/teams/{teamID}", wrapper.DeleteAPITeamsTeamID).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/teams/{teamID}", wrapper.GetAPITeamsTeamID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/teams/{teamID}/users", wrapper.GetAPITeamsTeamIDUsers).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/teams/{teamID}/users/me", wrapper.PostAPITeamsTeamIDUsersMe).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/teams/{teamID}/users/{userID}", wrapper.PostAPITeamsTeamIDUsersUserID).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/users", wrapper.GetAPIUsers).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/users", wrapper.PostAPIUsers).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/users/me", wrapper.GetAPIUsersMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/users/me/logout", wrapper.PostAPIUsersMeLogout).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/users/me/notifications", wrapper.GetAPIUsersMeNotifications).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/users/{userID}", wrapper.DeleteAPIUsersUserID).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/users/{userID}", wrapper.GetAPIUsersUserID).Methods("GET")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
