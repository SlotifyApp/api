// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// CalendarEvent defines model for CalendarEvent.
type CalendarEvent struct {
	EndTime   *string `json:"endTime,omitempty"`
	StartTime *string `json:"startTime,omitempty"`
	Subject   *string `json:"subject,omitempty"`
}

// Team defines model for Team.
type Team struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

// TeamCreate defines model for TeamCreate.
type TeamCreate struct {
	Name string `json:"name"`
}

// User defines model for User.
type User struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	Id        int                 `json:"id"`
	LastName  string              `json:"lastName"`
}

// UserCreate defines model for UserCreate.
type UserCreate struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	LastName  string              `json:"lastName"`
}

// GetAPIAuthCallbackParams defines parameters for GetAPIAuthCallback.
type GetAPIAuthCallbackParams struct {
	Code  string `form:"code" json:"code"`
	State string `form:"state" json:"state"`
}

// GetTeamsParams defines parameters for GetTeams.
type GetTeamsParams struct {
	// Name Team name
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// Email Email of user
	Email *openapi_types.Email `form:"email,omitempty" json:"email,omitempty"`

	// FirstName First name of user
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty"`

	// LastName Last name of user
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty"`
}

// PostTeamsJSONRequestBody defines body for PostTeams for application/json ContentType.
type PostTeamsJSONRequestBody = TeamCreate

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = UserCreate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Auth route for authorisation code flow
	// (GET /api/auth/callback)
	GetAPIAuthCallback(w http.ResponseWriter, r *http.Request, params GetAPIAuthCallbackParams)
	// get a user's calendar events
	// (GET /calendar/me)
	GetCalendarMe(w http.ResponseWriter, r *http.Request)
	// Healthcheck route
	// (GET /healthcheck)
	GetHealthcheck(w http.ResponseWriter, r *http.Request)
	// Create new Slotify access token and refresh token
	// (POST /refresh)
	PostRefresh(w http.ResponseWriter, r *http.Request)
	// Get a team by query params
	// (GET /teams)
	GetTeams(w http.ResponseWriter, r *http.Request, params GetTeamsParams)
	// Create a new team
	// (POST /teams)
	PostTeams(w http.ResponseWriter, r *http.Request)
	// Delete a team by id
	// (DELETE /teams/{teamID})
	DeleteTeamsTeamID(w http.ResponseWriter, r *http.Request, teamID int)
	// Get a team by id
	// (GET /teams/{teamID})
	GetTeamsTeamID(w http.ResponseWriter, r *http.Request, teamID int)
	// Get all members of a team
	// (GET /teams/{teamID}/users)
	GetTeamsTeamIDUsers(w http.ResponseWriter, r *http.Request, teamID int)
	// Add a user to a team
	// (POST /teams/{teamID}/users/{userID})
	PostTeamsTeamIDUsersUserID(w http.ResponseWriter, r *http.Request, teamID int, userID int)
	// Get a user by id passed by JWT
	// (GET /user)
	GetUser(w http.ResponseWriter, r *http.Request)
	// Logout user
	// (POST /user/logout)
	PostUserLogout(w http.ResponseWriter, r *http.Request)
	// Get a user by query params
	// (GET /users)
	GetUsers(w http.ResponseWriter, r *http.Request, params GetUsersParams)
	// Create a new user
	// (POST /users)
	PostUsers(w http.ResponseWriter, r *http.Request)
	// Delete a user by id
	// (DELETE /users/{userID})
	DeleteUsersUserID(w http.ResponseWriter, r *http.Request, userID int)
	// Get a user by id
	// (GET /users/{userID})
	GetUsersUserID(w http.ResponseWriter, r *http.Request, userID int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAPIAuthCallback operation middleware
func (siw *ServerInterfaceWrapper) GetAPIAuthCallback(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIAuthCallbackParams

	// ------------- Required query parameter "code" -------------

	if paramValue := r.URL.Query().Get("code"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "code"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "code", r.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Required query parameter "state" -------------

	if paramValue := r.URL.Query().Get("state"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "state"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "state", r.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIAuthCallback(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCalendarMe operation middleware
func (siw *ServerInterfaceWrapper) GetCalendarMe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCalendarMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHealthcheck operation middleware
func (siw *ServerInterfaceWrapper) GetHealthcheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealthcheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostRefresh operation middleware
func (siw *ServerInterfaceWrapper) PostRefresh(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRefresh(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTeams operation middleware
func (siw *ServerInterfaceWrapper) GetTeams(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTeamsParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTeams(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostTeams operation middleware
func (siw *ServerInterfaceWrapper) PostTeams(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostTeams(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteTeamsTeamID operation middleware
func (siw *ServerInterfaceWrapper) DeleteTeamsTeamID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "teamID" -------------
	var teamID int

	err = runtime.BindStyledParameterWithOptions("simple", "teamID", mux.Vars(r)["teamID"], &teamID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "teamID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTeamsTeamID(w, r, teamID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTeamsTeamID operation middleware
func (siw *ServerInterfaceWrapper) GetTeamsTeamID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "teamID" -------------
	var teamID int

	err = runtime.BindStyledParameterWithOptions("simple", "teamID", mux.Vars(r)["teamID"], &teamID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "teamID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTeamsTeamID(w, r, teamID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTeamsTeamIDUsers operation middleware
func (siw *ServerInterfaceWrapper) GetTeamsTeamIDUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "teamID" -------------
	var teamID int

	err = runtime.BindStyledParameterWithOptions("simple", "teamID", mux.Vars(r)["teamID"], &teamID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "teamID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTeamsTeamIDUsers(w, r, teamID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostTeamsTeamIDUsersUserID operation middleware
func (siw *ServerInterfaceWrapper) PostTeamsTeamIDUsersUserID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "teamID" -------------
	var teamID int

	err = runtime.BindStyledParameterWithOptions("simple", "teamID", mux.Vars(r)["teamID"], &teamID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "teamID", Err: err})
		return
	}

	// ------------- Path parameter "userID" -------------
	var userID int

	err = runtime.BindStyledParameterWithOptions("simple", "userID", mux.Vars(r)["userID"], &userID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostTeamsTeamIDUsersUserID(w, r, teamID, userID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostUserLogout operation middleware
func (siw *ServerInterfaceWrapper) PostUserLogout(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUserLogout(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams

	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", r.URL.Query(), &params.Email)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "email", Err: err})
		return
	}

	// ------------- Optional query parameter "firstName" -------------

	err = runtime.BindQueryParameter("form", true, false, "firstName", r.URL.Query(), &params.FirstName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "firstName", Err: err})
		return
	}

	// ------------- Optional query parameter "lastName" -------------

	err = runtime.BindQueryParameter("form", true, false, "lastName", r.URL.Query(), &params.LastName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "lastName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostUsers operation middleware
func (siw *ServerInterfaceWrapper) PostUsers(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUsersUserID operation middleware
func (siw *ServerInterfaceWrapper) DeleteUsersUserID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userID" -------------
	var userID int

	err = runtime.BindStyledParameterWithOptions("simple", "userID", mux.Vars(r)["userID"], &userID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUsersUserID(w, r, userID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUsersUserID operation middleware
func (siw *ServerInterfaceWrapper) GetUsersUserID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userID" -------------
	var userID int

	err = runtime.BindStyledParameterWithOptions("simple", "userID", mux.Vars(r)["userID"], &userID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsersUserID(w, r, userID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/api/auth/callback", wrapper.GetAPIAuthCallback).Methods("GET")

	r.HandleFunc(options.BaseURL+"/calendar/me", wrapper.GetCalendarMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/healthcheck", wrapper.GetHealthcheck).Methods("GET")

	r.HandleFunc(options.BaseURL+"/refresh", wrapper.PostRefresh).Methods("POST")

	r.HandleFunc(options.BaseURL+"/teams", wrapper.GetTeams).Methods("GET")

	r.HandleFunc(options.BaseURL+"/teams", wrapper.PostTeams).Methods("POST")

	r.HandleFunc(options.BaseURL+"/teams/{teamID}", wrapper.DeleteTeamsTeamID).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/teams/{teamID}", wrapper.GetTeamsTeamID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/teams/{teamID}/users", wrapper.GetTeamsTeamIDUsers).Methods("GET")

	r.HandleFunc(options.BaseURL+"/teams/{teamID}/users/{userID}", wrapper.PostTeamsTeamIDUsersUserID).Methods("POST")

	r.HandleFunc(options.BaseURL+"/user", wrapper.GetUser).Methods("GET")

	r.HandleFunc(options.BaseURL+"/user/logout", wrapper.PostUserLogout).Methods("POST")

	r.HandleFunc(options.BaseURL+"/users", wrapper.GetUsers).Methods("GET")

	r.HandleFunc(options.BaseURL+"/users", wrapper.PostUsers).Methods("POST")

	r.HandleFunc(options.BaseURL+"/users/{userID}", wrapper.DeleteUsersUserID).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/users/{userID}", wrapper.GetUsersUserID).Methods("GET")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
