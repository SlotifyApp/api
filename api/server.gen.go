// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AttendeeResponseStatus.
const (
	Accepted           AttendeeResponseStatus = "accepted"
	Declined           AttendeeResponseStatus = "declined"
	EntativelyAccepted AttendeeResponseStatus = "entativelyAccepted"
	None               AttendeeResponseStatus = "none"
	NotResponded       AttendeeResponseStatus = "notResponded"
	Organizer          AttendeeResponseStatus = "organizer"
)

// Defines values for AttendeeType.
const (
	Optional AttendeeType = "optional"
	Required AttendeeType = "required"
	Resource AttendeeType = "resource"
)

// Defines values for LocationRoomType.
const (
	BusinessAddress LocationRoomType = "businessAddress"
	ConferenceRoom  LocationRoomType = "conferenceRoom"
	Default         LocationRoomType = "default"
	GeoCoordinates  LocationRoomType = "geoCoordinates"
	HomeAddress     LocationRoomType = "homeAddress"
	Hotel           LocationRoomType = "hotel"
	LocalBusiness   LocationRoomType = "localBusiness"
	PostalAddress   LocationRoomType = "postalAddress"
	Restaurant      LocationRoomType = "restaurant"
	StreetAddress   LocationRoomType = "streetAddress"
)

// Attendee defines model for Attendee.
type Attendee struct {
	Email          *openapi_types.Email    `json:"email"`
	ResponseStatus *AttendeeResponseStatus `json:"responseStatus"`
	Type           *AttendeeType           `json:"type"`
}

// AttendeeResponseStatus defines model for Attendee.ResponseStatus.
type AttendeeResponseStatus string

// AttendeeType defines model for Attendee.Type.
type AttendeeType string

// CalendarEvent defines model for CalendarEvent.
type CalendarEvent struct {
	Attendees   *[]Attendee          `json:"attendees,omitempty"`
	Body        *string              `json:"body,omitempty"`
	Created     *time.Time           `json:"created,omitempty"`
	EndTime     *string              `json:"endTime"`
	Id          *string              `json:"id,omitempty"`
	IsCancelled *bool                `json:"isCancelled,omitempty"`
	JoinURL     *string              `json:"joinURL"`
	Locations   *[]Location          `json:"locations,omitempty"`
	Organizer   *openapi_types.Email `json:"organizer,omitempty"`
	StartTime   *string              `json:"startTime"`
	Subject     *string              `json:"subject,omitempty"`
	WebLink     *string              `json:"webLink,omitempty"`
}

// Location defines model for Location.
type Location struct {
	Id       *string           `json:"id,omitempty"`
	Name     *string           `json:"name,omitempty"`
	RoomType *LocationRoomType `json:"roomType"`
	Street   *string           `json:"street"`
}

// LocationRoomType defines model for Location.RoomType.
type LocationRoomType string

// Notification defines model for Notification.
type Notification struct {
	Created time.Time `json:"created"`
	Id      uint32    `json:"id"`
	Message string    `json:"message"`
}

// Team defines model for Team.
type Team struct {
	Id   uint32 `json:"id"`
	Name string `json:"name"`
}

// TeamCreate defines model for TeamCreate.
type TeamCreate struct {
	Name string `json:"name"`
}

// User defines model for User.
type User struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	Id        uint32              `json:"id"`
	LastName  string              `json:"lastName"`
}

// UserCreate defines model for UserCreate.
type UserCreate struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	LastName  string              `json:"lastName"`
}

// GetAPIAuthCallbackParams defines parameters for GetAPIAuthCallback.
type GetAPIAuthCallbackParams struct {
	Code  string `form:"code" json:"code"`
	State string `form:"state" json:"state"`
}

// GetAPICalendarMeParams defines parameters for GetAPICalendarMe.
type GetAPICalendarMeParams struct {
	Start time.Time `form:"start" json:"start"`
	End   time.Time `form:"end" json:"end"`
}

// GetAPITeamsParams defines parameters for GetAPITeams.
type GetAPITeamsParams struct {
	// Name Team name
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// GetAPIUsersParams defines parameters for GetAPIUsers.
type GetAPIUsersParams struct {
	// Email Email of user
	Email *openapi_types.Email `form:"email,omitempty" json:"email,omitempty"`

	// FirstName First name of user
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty"`

	// LastName Last name of user
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty"`
}

// PostAPICalendarMeJSONRequestBody defines body for PostAPICalendarMe for application/json ContentType.
type PostAPICalendarMeJSONRequestBody = CalendarEvent

// PostAPITeamsJSONRequestBody defines body for PostAPITeams for application/json ContentType.
type PostAPITeamsJSONRequestBody = TeamCreate

// PostAPIUsersJSONRequestBody defines body for PostAPIUsers for application/json ContentType.
type PostAPIUsersJSONRequestBody = UserCreate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Auth route for authorisation code flow.
	// (GET /api/auth/callback)
	GetAPIAuthCallback(w http.ResponseWriter, r *http.Request, params GetAPIAuthCallbackParams)
	// Get a user's calendar events for a given time range.
	// (GET /api/calendar/me)
	GetAPICalendarMe(w http.ResponseWriter, r *http.Request, params GetAPICalendarMeParams)
	// CORS preflight for creating an event
	// (OPTIONS /api/calendar/me)
	OptionsAPICalendarMe(w http.ResponseWriter, r *http.Request)
	// Create a new calendar event.
	// (POST /api/calendar/me)
	PostAPICalendarMe(w http.ResponseWriter, r *http.Request)
	// Subscribe to notifications eventstream.
	// (GET /api/events)
	RenderEvent(w http.ResponseWriter, r *http.Request)
	// Healthcheck route.
	// (GET /api/healthcheck)
	GetAPIHealthcheck(w http.ResponseWriter, r *http.Request)
	// Satisfy CORS preflight for marking a notification as read.
	// (OPTIONS /api/notifications/{notificationID}/read)
	OptionsAPINotificationsNotificationIDRead(w http.ResponseWriter, r *http.Request, notificationID uint32)
	// Mark a notification as being read.
	// (PATCH /api/notifications/{notificationID}/read)
	PatchAPINotificationsNotificationIDRead(w http.ResponseWriter, r *http.Request, notificationID uint32)
	// Refresh Slotify access token and refresh token.
	// (POST /api/refresh)
	PostAPIRefresh(w http.ResponseWriter, r *http.Request)
	// Get a team by query params.
	// (GET /api/teams)
	GetAPITeams(w http.ResponseWriter, r *http.Request, params GetAPITeamsParams)
	// Satisfy CORS preflight for creatingteams.
	// (OPTIONS /api/teams)
	OptionsAPITeams(w http.ResponseWriter, r *http.Request)
	// Create a new team.
	// (POST /api/teams)
	PostAPITeams(w http.ResponseWriter, r *http.Request)
	// Get all joinable teams for a user excluding teams they are already a part of.
	// (GET /api/teams/joinable/me)
	GetAPITeamsJoinableMe(w http.ResponseWriter, r *http.Request)
	// Get all teams for current user.
	// (GET /api/teams/me)
	GetAPITeamsMe(w http.ResponseWriter, r *http.Request)
	// Delete a team by id.
	// (DELETE /api/teams/{teamID})
	DeleteAPITeamsTeamID(w http.ResponseWriter, r *http.Request, teamID uint32)
	// Get a team by id.
	// (GET /api/teams/{teamID})
	GetAPITeamsTeamID(w http.ResponseWriter, r *http.Request, teamID uint32)
	// Get all members of a team.
	// (GET /api/teams/{teamID}/users)
	GetAPITeamsTeamIDUsers(w http.ResponseWriter, r *http.Request, teamID uint32)
	// Add current user to a team.
	// (POST /api/teams/{teamID}/users/me)
	PostAPITeamsTeamIDUsersMe(w http.ResponseWriter, r *http.Request, teamID uint32)
	// Add a user to a team.
	// (POST /api/teams/{teamID}/users/{userID})
	PostAPITeamsTeamIDUsersUserID(w http.ResponseWriter, r *http.Request, teamID uint32, userID uint32)
	// Get users by query params.
	// (GET /api/users)
	GetAPIUsers(w http.ResponseWriter, r *http.Request, params GetAPIUsersParams)
	// Create a new user.
	// (POST /api/users)
	PostAPIUsers(w http.ResponseWriter, r *http.Request)
	// Get current user's details.
	// (GET /api/users/me)
	GetAPIUsersMe(w http.ResponseWriter, r *http.Request)
	// Logout user.
	// (POST /api/users/me/logout)
	PostAPIUsersMeLogout(w http.ResponseWriter, r *http.Request)
	// Get user's unread notifications.
	// (GET /api/users/me/notifications)
	GetAPIUsersMeNotifications(w http.ResponseWriter, r *http.Request)
	// Delete a user by id.
	// (DELETE /api/users/{userID})
	DeleteAPIUsersUserID(w http.ResponseWriter, r *http.Request, userID uint32)
	// Get a user by id.
	// (GET /api/users/{userID})
	GetAPIUsersUserID(w http.ResponseWriter, r *http.Request, userID uint32)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAPIAuthCallback operation middleware
func (siw *ServerInterfaceWrapper) GetAPIAuthCallback(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIAuthCallbackParams

	// ------------- Required query parameter "code" -------------

	if paramValue := r.URL.Query().Get("code"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "code"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "code", r.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Required query parameter "state" -------------

	if paramValue := r.URL.Query().Get("state"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "state"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "state", r.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIAuthCallback(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPICalendarMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPICalendarMe(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPICalendarMeParams

	// ------------- Required query parameter "start" -------------

	if paramValue := r.URL.Query().Get("start"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "start"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "start", r.URL.Query(), &params.Start)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start", Err: err})
		return
	}

	// ------------- Required query parameter "end" -------------

	if paramValue := r.URL.Query().Get("end"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "end"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "end", r.URL.Query(), &params.End)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "end", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPICalendarMe(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OptionsAPICalendarMe operation middleware
func (siw *ServerInterfaceWrapper) OptionsAPICalendarMe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OptionsAPICalendarMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPICalendarMe operation middleware
func (siw *ServerInterfaceWrapper) PostAPICalendarMe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPICalendarMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RenderEvent operation middleware
func (siw *ServerInterfaceWrapper) RenderEvent(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RenderEvent(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIHealthcheck operation middleware
func (siw *ServerInterfaceWrapper) GetAPIHealthcheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIHealthcheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OptionsAPINotificationsNotificationIDRead operation middleware
func (siw *ServerInterfaceWrapper) OptionsAPINotificationsNotificationIDRead(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "notificationID" -------------
	var notificationID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "notificationID", mux.Vars(r)["notificationID"], &notificationID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "notificationID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OptionsAPINotificationsNotificationIDRead(w, r, notificationID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchAPINotificationsNotificationIDRead operation middleware
func (siw *ServerInterfaceWrapper) PatchAPINotificationsNotificationIDRead(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "notificationID" -------------
	var notificationID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "notificationID", mux.Vars(r)["notificationID"], &notificationID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "notificationID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAPINotificationsNotificationIDRead(w, r, notificationID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIRefresh operation middleware
func (siw *ServerInterfaceWrapper) PostAPIRefresh(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIRefresh(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPITeams operation middleware
func (siw *ServerInterfaceWrapper) GetAPITeams(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPITeamsParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPITeams(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OptionsAPITeams operation middleware
func (siw *ServerInterfaceWrapper) OptionsAPITeams(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OptionsAPITeams(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPITeams operation middleware
func (siw *ServerInterfaceWrapper) PostAPITeams(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPITeams(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPITeamsJoinableMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPITeamsJoinableMe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPITeamsJoinableMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPITeamsMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPITeamsMe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPITeamsMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAPITeamsTeamID operation middleware
func (siw *ServerInterfaceWrapper) DeleteAPITeamsTeamID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "teamID" -------------
	var teamID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "teamID", mux.Vars(r)["teamID"], &teamID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "teamID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAPITeamsTeamID(w, r, teamID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPITeamsTeamID operation middleware
func (siw *ServerInterfaceWrapper) GetAPITeamsTeamID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "teamID" -------------
	var teamID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "teamID", mux.Vars(r)["teamID"], &teamID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "teamID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPITeamsTeamID(w, r, teamID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPITeamsTeamIDUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAPITeamsTeamIDUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "teamID" -------------
	var teamID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "teamID", mux.Vars(r)["teamID"], &teamID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "teamID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPITeamsTeamIDUsers(w, r, teamID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPITeamsTeamIDUsersMe operation middleware
func (siw *ServerInterfaceWrapper) PostAPITeamsTeamIDUsersMe(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "teamID" -------------
	var teamID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "teamID", mux.Vars(r)["teamID"], &teamID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "teamID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPITeamsTeamIDUsersMe(w, r, teamID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPITeamsTeamIDUsersUserID operation middleware
func (siw *ServerInterfaceWrapper) PostAPITeamsTeamIDUsersUserID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "teamID" -------------
	var teamID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "teamID", mux.Vars(r)["teamID"], &teamID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "teamID", Err: err})
		return
	}

	// ------------- Path parameter "userID" -------------
	var userID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "userID", mux.Vars(r)["userID"], &userID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPITeamsTeamIDUsersUserID(w, r, teamID, userID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAPIUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIUsersParams

	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", r.URL.Query(), &params.Email)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "email", Err: err})
		return
	}

	// ------------- Optional query parameter "firstName" -------------

	err = runtime.BindQueryParameter("form", true, false, "firstName", r.URL.Query(), &params.FirstName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "firstName", Err: err})
		return
	}

	// ------------- Optional query parameter "lastName" -------------

	err = runtime.BindQueryParameter("form", true, false, "lastName", r.URL.Query(), &params.LastName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "lastName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIUsers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIUsers operation middleware
func (siw *ServerInterfaceWrapper) PostAPIUsers(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIUsersMe operation middleware
func (siw *ServerInterfaceWrapper) GetAPIUsersMe(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIUsersMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAPIUsersMeLogout operation middleware
func (siw *ServerInterfaceWrapper) PostAPIUsersMeLogout(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAPIUsersMeLogout(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIUsersMeNotifications operation middleware
func (siw *ServerInterfaceWrapper) GetAPIUsersMeNotifications(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIUsersMeNotifications(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAPIUsersUserID operation middleware
func (siw *ServerInterfaceWrapper) DeleteAPIUsersUserID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userID" -------------
	var userID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "userID", mux.Vars(r)["userID"], &userID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAPIUsersUserID(w, r, userID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAPIUsersUserID operation middleware
func (siw *ServerInterfaceWrapper) GetAPIUsersUserID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userID" -------------
	var userID uint32

	err = runtime.BindStyledParameterWithOptions("simple", "userID", mux.Vars(r)["userID"], &userID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIUsersUserID(w, r, userID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/api/auth/callback", wrapper.GetAPIAuthCallback).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/calendar/me", wrapper.GetAPICalendarMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/calendar/me", wrapper.OptionsAPICalendarMe).Methods("OPTIONS")

	r.HandleFunc(options.BaseURL+"/api/calendar/me", wrapper.PostAPICalendarMe).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/events", wrapper.RenderEvent).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/healthcheck", wrapper.GetAPIHealthcheck).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/notifications/{notificationID}/read", wrapper.OptionsAPINotificationsNotificationIDRead).Methods("OPTIONS")

	r.HandleFunc(options.BaseURL+"/api/notifications/{notificationID}/read", wrapper.PatchAPINotificationsNotificationIDRead).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/api/refresh", wrapper.PostAPIRefresh).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/teams", wrapper.GetAPITeams).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/teams", wrapper.OptionsAPITeams).Methods("OPTIONS")

	r.HandleFunc(options.BaseURL+"/api/teams", wrapper.PostAPITeams).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/teams/joinable/me", wrapper.GetAPITeamsJoinableMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/teams/me", wrapper.GetAPITeamsMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/teams/{teamID}", wrapper.DeleteAPITeamsTeamID).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/teams/{teamID}", wrapper.GetAPITeamsTeamID).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/teams/{teamID}/users", wrapper.GetAPITeamsTeamIDUsers).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/teams/{teamID}/users/me", wrapper.PostAPITeamsTeamIDUsersMe).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/teams/{teamID}/users/{userID}", wrapper.PostAPITeamsTeamIDUsersUserID).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/users", wrapper.GetAPIUsers).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/users", wrapper.PostAPIUsers).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/users/me", wrapper.GetAPIUsersMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/users/me/logout", wrapper.PostAPIUsersMeLogout).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/users/me/notifications", wrapper.GetAPIUsersMeNotifications).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/users/{userID}", wrapper.DeleteAPIUsersUserID).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/users/{userID}", wrapper.GetAPIUsersUserID).Methods("GET")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
